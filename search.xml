<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 8 Streams API 详解</title>
      <link href="/2022/07/17/java-8-streams-api-xiang-jie/"/>
      <url>/2022/07/17/java-8-streams-api-xiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文出处：<a href="http://dengchengchao.com/">邓承超的个人日志</a></p></blockquote><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/java8-stream.png"></p><p>流式编程作为Java 8的亮点之一，是继<code>Java 5</code>之后对集合的再一次升级，可以说<code>Java 8</code>几大特性中，<code>Streams API</code> 是作为Java 函数式的主角来设计的,夸张的说，有了<code>Streams API</code>之后，万物皆可一行代码。</p><h2 id="二、什么是-Stream"><a href="#二、什么是-Stream" class="headerlink" title="二、什么是 Stream"></a>二、什么是 Stream</h2><pre class="line-numbers language-Stream```被翻译为流，它的工作过程像将一瓶水导入有很多过滤阀的管道一样，水每经过一个过滤阀，便被操作一次，比如过滤，转换等，最后管道的另外一头有一个容器负责接收剩下的水。" data-language="Stream```被翻译为流，它的工作过程像将一瓶水导入有很多过滤阀的管道一样，水每经过一个过滤阀，便被操作一次，比如过滤，转换等，最后管道的另外一头有一个容器负责接收剩下的水。"><code class="language-Stream```被翻译为流，它的工作过程像将一瓶水导入有很多过滤阀的管道一样，水每经过一个过滤阀，便被操作一次，比如过滤，转换等，最后管道的另外一头有一个容器负责接收剩下的水。">![](https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/java8-stream2.png)首先通过```source```产生流，然后依次通过一些中间操作，比如过滤，转换，限制等，最后结束对流的操作。```Stream```也可以理解为一个更加高级的迭代器，主要的作用便是遍历其中每一个元素。## 三、为什么需要Stream```Stream```作为Java 8的一大亮点，它专门针对集合的各种操作提供各种非常便利，简单，高效的API，```Stream API```主要是通过```Lambda```表达式完成，极大的提高了程序的效率和可读性，同时```Stram API```中自带的并行流使得并发处理集合的门槛再次降低，使用```Stream API```编程无需多写一行多线程的大门就可以非常方便的写出高性能的并发程序。使用```Stream API```能够使你的代码更加优雅。流的另一特点是可无限性，使用```Stream```，你的数据源可以是无限大的。在没有```Stream```之前，我们想提取出所有年龄大于18的学生，我们需要这样做：```javaList&lt;Student&gt; result = new ArrayList&lt;&gt;();for (Student student : students) {    if (student.getAge() &gt; 18) {        result.add(student);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Stream,我们可以参照上面的流程示意图来做，首先产生Stream,然后filter过滤，最后归并到容器中。</p><p>转换为代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>首先<code>stream()</code>获得流 </li><li>然后<code>filter((student) -&gt; student.getAge() &gt; 18)</code>过滤</li><li>最后<code>collect(Collectors.toList())</code>归并到容器中</li></ul><p>是不是很像在写sql?</p><h2 id="四、如何使用Stream"><a href="#四、如何使用Stream" class="headerlink" title="四、如何使用Stream"></a>四、如何使用Stream</h2><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/java8-stream3.png"></p><p>我们可以发现，当我们使用一个流的时候，主要包括三个步骤：</p><ul><li>获取流</li><li>对流进行操作</li><li>结束对流的操作</li></ul><h3 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h3><p>获取流的方式有多种，对于常见的容器(<code>Collection</code>)可以直接<code>.stream()</code>获取</p><p>例如：</p><ul><li><code>Collection.stream()</code></li><li><code>Collection.parallelStream()</code></li><li><code>Arrays.stream(T array) or Stream.of()</code></li></ul><p>对于 <code>I/O</code>，我们也可以通过 <code>lines()</code> 方法获取流：</p><ul><li><code>java.nio.file.Files.walk()</code></li><li><code>java.io.BufferedReader.lines()</code></li></ul><p>最后，我们还可以从无限大的数据源中产生流：</p><ul><li><code>Random.ints()</code></li></ul><p>值得注意的是，JDK中针对基本数据类型的昂贵的装箱和拆箱操作，提供了基本数据类型的流：</p><ul><li><code>IntStream</code></li><li><code>LongStream</code></li><li><code>DoubleStream</code></li></ul><p>这三种基本数据类型和普通流差不多，不过他们流里面的数据都是指定的基本数据类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Intstream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Intstream</span><span class="token punctuation">.</span><span class="token function">rang</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="对流进行操作"><a href="#对流进行操作" class="headerlink" title="对流进行操作"></a>对流进行操作</h3><p>这是本章的重点，产生流比较容易，但是不同的业务系统的需求会涉及到很多不同的要求，明白我们能对流做什么，怎么做，才能更好的利用Stream API的特点。</p><p><strong>流的操作类型分为两种:</strong></p><ul><li><strong>Intermediate</strong>：中间操作，一个流可以后面跟随零个或多个<code>intermediate</code>操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后会返回一个新的流，交给下一个操作使用。这类操作都是<strong>惰性化的（lazy）</strong>，就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</li></ul><blockquote><p>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p></blockquote><ul><li><strong>Terminal</strong>：终结操作，一个流只能有一个<code>terminal</code>操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。<code>Terminal</code>操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</li></ul><blockquote><p>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p></blockquote><p><code>Intermediate</code>和<code>Terminal</code>完全可以按照上图的流程图理解，<code>Intermediate</code>表示在管道中间的过滤器，水会流入过滤器，然后再流出去，而<code>Terminal</code>操作便是最后一个过滤器，它在管道的最后面，流入<code>Terminal</code>的水，最后便会流出管道。</p><p>下面依次详细的解读下每一个操作所能产生的效果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zq1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zq2"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zq3"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zq4"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"zq5"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><p>对于中间操作，所有的<code>API</code>的返回值基本都是<code>Stream&lt;T&gt;</code>,因此以后看见一个陌生的<code>API</code>也能通过返回值判断它的所属类型。</p><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>map顾名思义，就是映射，map操作能够将流中的每一个元素映射为另外的元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到map接受的是一个Function,也就是接收参数，并返回一个值。</p><p>比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 提取 List&lt;Student&gt;  所有student 的名字 </span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的代码等同于以前的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再比如：将List中所有字母转换为大写：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wards <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> upperWords <span class="token operator">=</span> wards<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><p><code>flatMap</code>顾名思义就是扁平化映射，它具体的操作是将多个<code>stream</code>连接成一个<code>stream</code>，这个操作是针对类似多维数组的，比如容器里面包含容器等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> flatInts <span class="token operator">=</span> ints<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，相当于降维。</p><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>filter顾名思义，就是过滤，通过测试的元素会被留下来并生成一个新的Stream</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理，我们可以<code>filter</code>接收的参数是<code>Predicate</code>，也就是推断型函数式接口，接收参数，并返回<code>boolean</code>值。</p><p>比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取所有年龄大于18岁的学生</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><p><code>distinct</code>是去重操作,它没有参数</p><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p><code>sorted</code>排序操作，默认是从小到大排列，<code>sorted</code>方法包含一个重载，使用<code>sorted</code>方法，如果没有传递参数，那么流中的元素就需要实现<code>Comparable&lt;T&gt;</code>方法，也可以在使用<code>sorted</code>方法的时候传入一个<code>Comparator&lt;T&gt;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得一说的是这个<code>Comparator</code>在<code>Java 8</code>之后被打上了<code>@FunctionalInterface</code>,其他方法都提供了<code>default</code>实现，因此我们可以在<code>sort</code>中使用<code>Lambda</code>表达式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 以年龄倒序</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然而还有更方便的，<code>Comparator</code>默认也提供了实现好的方法引用，使得我们更加方便的使用：</p><p>例如上面的代码可以改成如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 以年龄倒序</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 以姓名倒序</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: </span><span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token operator">=</span>zq4<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token operator">=</span>zq3<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token operator">=</span>zq2<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token class-name">Student</span><span class="token punctuation">(</span>name<span class="token operator">=</span>zq1<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h5><p><code>peek</code>有遍历的意思，和<code>forEach</code>一样，但是它是一个中间操作。</p><p><code>peek</code>接受一个消费型的函数式接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 去重以后打印出来，然后再归并为List</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>limit</code>裁剪操作，和<code>String::subString(0,x)</code>有点类似，<code>limit</code>接受一个<code>long</code>类型参数，通过<code>limit</code>之后的元素只会剩下<code>min(n,size)</code>个元素，<code>n</code>表示参数，<code>size</code>表示流中元素个数</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//只留下前3个元素并打印</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><p><code>skip</code>表示跳过多少个元素，和<code>limit</code>比较像，不过<code>limit</code>是保留前面的元素，<code>skip</code>是保留后面的元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//跳过前3个元素并打印 </span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h4><p>一个流处理中，有且只能有一个终结操作，通过终结操作之后，流才真正被处理，终结操作一般都返回其他的类型而不再是一个流,一般来说，终结操作都是将其转换为一个容器。</p><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><p><code>forEach</code>是终结操作的遍历，操作和<code>peek</code>一样，但是<code>forEach</code>之后就不会再返回流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//遍历打印</span>students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的代码和一下代码效果相同：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h5><p><code>toArray</code>和<code>List##toArray()</code>用法差不多，包含一个重载。</p><p>默认的<code>toArray()</code>返回一个<code>Object[]</code>，</p><p>也可以传入一个<code>IntFunction&lt;A[]&gt; generator</code>指定数据类型</p><p>一般建议第二种方式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">IntFunction</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> generator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h5><p><code>max/min</code>即使找出最大或者最小的元素。<code>max/min</code>必须传入一个<code>Comparator</code>。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 找到年龄最小的学生</span> <span class="token class-name">Student</span> student <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p><code>count</code>返回流中的元素数量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> count <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><p><code>reduce</code>为归纳操作，主要是将流中各个元素结合起来，它需要提供一个起始值，然后按一定规则进行运算，比如相加等，它接收一个二元操作 <code>BinaryOperator</code>函数式接口。从某种意义上来说，<code>sum,min,max,average</code>都是特殊的<code>reduce</code></p><p><code>reduce</code>包含三个重载：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">T</span> identity<span class="token punctuation">,</span> <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">U</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">U</span> identity<span class="token punctuation">,</span>             <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> accumulator<span class="token punctuation">,</span>             <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> combiner<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> sum <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>reduce</code>两个参数和一个参数的区别在于有没有提供一个起始值，</p><p>如果提供了起始值，则可以返回一个确定的值，如果没有提供起始值，则返回<code>Opeational</code>防止流中没有足够的元素。</p><h5 id="anyMatch-allMatch-noneMatch"><a href="#anyMatch-allMatch-noneMatch" class="headerlink" title="anyMatch\ allMatch\ noneMatch"></a>anyMatch\ allMatch\ noneMatch</h5><p>测试是否有任意元素\所有元素\没有元素匹配表达式</p><p>他们都接收一个推断类型的函数式接口：<code>Predicate</code></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> test <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="findFirst、-findAny"><a href="#findFirst、-findAny" class="headerlink" title="findFirst、 findAny"></a>findFirst、 findAny</h5><p>获取元素，这两个API都不接受任何参数，<code>findFirt</code>返回流中第一个元素，<code>findAny</code>返回流中任意一个元素。</p><p>也有有人会问<code>findAny()</code>这么奇怪的操作谁会用？这个API主要是为了在并行条件下想要获取任意元素，以最大性能获取任意元素</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> integer <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h5><p><code>collect</code>收集操作，这个<code>API</code>放在后面将是因为它太重要了，基本上所有的流操作最后都会使用它。</p><p>我们先看<code>collect</code>的定义</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> supplier<span class="token punctuation">,</span>              <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> accumulator<span class="token punctuation">,</span>              <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> combiner<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> collector<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<code>collect</code>包含两个重载：</p><p>一个参数和三个参数，</p><p>三个参数我们很少使用，因为<code>JDK</code>提供了足够我们使用的<code>Collector</code>供我们直接使用,我们可以简单了解下这三个参数什么意思：</p><ul><li><code>Supplier</code>:用于产生最后存放元素的容器的生产者</li><li><code>accumulator</code>:将元素添加到容器中的方法</li><li><code>combiner</code>：将分段元素全部添加到容器中的方法</li></ul><p>前两个元素我们都很好理解，第三个元素是干嘛的呢？因为流提供了并行操作，因此有可能一个流被多个线程分别添加，然后再将各个子列表依次添加到最终的容器中。</p><p>↓ – – – – – – – – –</p><p>↓ — — —</p><p>↓ ———</p><p>如上图，分而治之。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token operator">::</span><span class="token function">addAll</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来看只有一个参数的<code>collect</code></p><p>一般来说，只有一个参数的<code>collect</code>，我们都直接传入<code>Collectors</code>中的方法引用即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>Collectors</code>中包含很多常用的转换器。<code>toList()</code>,<code>toSet()</code>等。</p><p><code>Collectors</code>中还包括一个<code>groupBy()</code>，他和<code>Sql</code>中的<code>groupBy</code>一样都是分组，返回一个<code>Map</code></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 按年龄分组</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>groupingBy</code>可以接受3个参数，分别是</p><ul><li>第一个参数：分组按照什么分</li><li>第二个参数：分组最后用什么容器保存返回（当只有两个参数是，此参数默认为<code>HashMap</code>）</li><li>第三个参数：按照第一个参数分后，对应的分类的结果如何收集</li></ul><p>有时候单参数的<code>groupingBy</code>不满足我们需求的时候，我们可以使用多个参数的<code>groupingBy</code></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将学生以年龄分组，每组中只存学生的名字而不是对象</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>            <span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span>            <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>toList</code>默认生成的是<code>ArrayList</code>,<code>toSet</code>默认生成的是<code>HashSet</code>，如果想要指定其他容器，可以如下操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">TreeSet</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Collectors</code>还包含一个<code>toMap</code>，利用这个API我们可以将<code>List</code>转换<code>为Map</code></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>        <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Collectors.toMap，最后一个参数表示元素有重复时保留哪一个元素</p><p>值得注意的一点是，<code>IntStream</code>，<code>LongStream</code>,<code>DoubleStream</code>是没有<code>collect()</code>方法的，因为对于基本数据类型，要进行装箱，拆箱操作，SDK并没有将它放入流中，对于基本数据类型流，我们只能将其<code>toArray()</code></p><h2 id="五、优雅的使用Stream"><a href="#五、优雅的使用Stream" class="headerlink" title="五、优雅的使用Stream"></a>五、优雅的使用Stream</h2><p>了解了<code>Stream API</code>，下面详细介绍一下如果优雅的使用<code>Steam</code></p><ul><li>了解流的惰性操作</li></ul><p>前面说到，流的中间操作是惰性的，如果一个流操作流程中只有中间操作，没有终结操作，那么这个流什么都不会做，整个流程中会一直等到遇到终结操作操作才会真正的开始执行。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的流操作只有中间操作，没有终结操作，那么不管流里面包含多少元素，他都不会执行任何操作。</p><ul><li>明白流操作的顺序的重要性</li></ul><p>在<code>Stream API</code>中，还包括一类<code>Short-circuiting</code>,它能够改变流中元素的数量，一般这类<code>API</code>如果是中间操作，最好写在靠前位置：</p><p>考虑下面两行代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两段代码所使用的<code>API</code>都是相同的，但是由于顺序不同，带来的结果都非常不一样的，</p><p>第一段代码会先排序所有的元素，再依次打印一遍，最后获取前三个最小的放入<code>list</code>中,</p><p>第二段代码会先截取前3个元素，在对这三个元素排序，然后遍历打印，最后放<code>list</code>中。</p><ul><li>明白<code>Lambda</code>的局限性</li></ul><p>由于<code>Java</code>目前只能<code>Pass-by-value</code>，因此对于<code>Lambda</code>也和有匿名类一样的<code>final</code>的局限性。</p><p>因此我们无法再<code>lambda</code>表达式中修改外部元素的值。</p><p>同时，在<code>Stream</code>中，我们无法使用<code>break</code>提前返回。</p><ul><li>合理编排<code>Stream</code>的代码格式</li></ul><p>由于可能在使用流式编程的时候会处理很多的业务逻辑，导致API非常长，此时最后使用换行将各个操作分离开来，使得代码更加易读。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时由于<code>Lambda</code>表达式省略了参数类型，因此对于变量，尽量使用完成的名词，比如<code>student</code>而不是<code>s</code>，增加代码的可读性。</p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>总之<code>，Stream</code>是Java 8 提供的简化代码的神器，合理使用它，能让你的代码更加优雅。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Streams </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不停服不修改代码条件下重建 Elasticsearch 索引</title>
      <link href="/2022/07/10/bu-ting-fu-bu-xiu-gai-dai-ma-tiao-jian-xia-chong-jian-elasticsearch-suo-yin/"/>
      <url>/2022/07/10/bu-ting-fu-bu-xiu-gai-dai-ma-tiao-jian-xia-chong-jian-elasticsearch-suo-yin/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/es.png"></p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在某些情况下，重建索引不可避免。例如，如果我们需要更改任何现有的字段映射（mapping）或分析器（analyzer）。ES 是不允许直接更改的，因些需要重建一个与现有索引分开的新索引。</p><p>我们来分析下如何才能做到 <strong>不停服不修改代码</strong> 情况下重建索引？</p><h3 id="不停服"><a href="#不停服" class="headerlink" title="不停服"></a>不停服</h3><p>不能停服，那就要求新老索引在系统中能平稳过渡，需要在重建新索引时保持旧索引还在使用状态。因此，当旧索引仍然在使用的时候，我们不能将现有老索引名称用于新索引，必须得创建一个新的索引名称。</p><h3 id="不修改代码"><a href="#不修改代码" class="headerlink" title="不修改代码"></a>不修改代码</h3><p>要做到每次重建时不更新代码而使用新的索引名称，那就要求我们代码中不能直接使用索引名称进行搜索和索引文档。我们应该为索引创建一个别名，并在我们的搜索/索引代码中使用别名。然后在重建时更新ES中的别名以指向新索引。这样，我们访问索引的代码就不需要在每次重建索引时都更新发版。</p><h2 id="二、借助工具"><a href="#二、借助工具" class="headerlink" title="二、借助工具"></a>二、借助工具</h2><ul><li>cerebro</li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cerebro.png"></p><ul><li>kibana</li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/kibana.png"></p><p>cerebro 和 kinaba 都有控制台来输入执行命令，十分方便</p><h2 id="三、重建索引步骤"><a href="#三、重建索引步骤" class="headerlink" title="三、重建索引步骤"></a>三、重建索引步骤</h2><h3 id="在搜索和索引的代码中使用别名"><a href="#在搜索和索引的代码中使用别名" class="headerlink" title="在搜索和索引的代码中使用别名"></a>在搜索和索引的代码中使用别名</h3><ol><li>最终要使用重建的索引，原始的索引将被删除。如果你的代码中正在直接使用索引名，在重建前创建别名，更新代码。如果已经使用的是别名那可以跳过这一步。</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">POST /_aliases{  "actions": [    {      "add": {        "index": "current_index", // 原有索引        "alias": "alias1" // 服务的别名      }    }  ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/es-alias.jpeg"></p><ol start="2"><li>记得查看 Elasticsearch 的 Disk Usage，如果不够，请先申请好足够的空间。<h3 id="创建新索引"><a href="#创建新索引" class="headerlink" title="创建新索引"></a>创建新索引</h3></li></ol><p>和创建普通索引一样创建新索引。这里值得一提的时，当数据量很大的时候，需要设置刷新时间间隔，在此期间写入的数据不能搜到，从而提高重建速度：<code>refresh_intervals = -1, number_of_replicas = 0</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PUT /new_index{    "settings": {        "index": {            "number_of_replicas": "0",            "number_of_shards": "18"        }    },    "mappings": {        "properties": {}    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关闭自动刷新"><a href="#关闭自动刷新" class="headerlink" title="关闭自动刷新"></a>关闭自动刷新</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PUT new_index/_settings{    "index" : {        "refresh_interval" : "-1"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES 中刷新索引和写入磁盘是两个不同的过程。</p><p><strong>刷新索引</strong>：当一个文档被索引时，它被添加到内存缓冲区并附加到 translog 文件中。当刷新发生时，缓冲区中的文档被写入一个新的 segment，没有发生 fsync，该 segment 被打开以使其对搜索可见并清除缓冲区。 translog 尚未清除，实际上没有任何东西保存到磁盘（因为没有发生 fsync）。没有索引刷新，你不能搜索你的文档，段不是在缓存中创建的</p><p><strong>写入磁盘</strong>：默认情况下，当 translog 大小达到 512mb 或 30 分钟后。这实际上是将数据保存在磁盘上，其他所有内容都在文件系统缓存中（如果节点死亡或机器重新启动，缓存将丢失，translog 是唯一的救赎）</p><p>此处的refresh_interval指的是刷新（写入磁盘）的时间。</p><p>默认情况下 refresh_interval 设置为 1s。 实际上，这在 ES 中可以称为昂贵的操作，尤其是在索引时。通过将 refresh_interval 设置为 -1 意味着您正在禁用它，并且在索引 ES 时可以为您带来显著的性能提升。 您只需要禁用 refresh_interval （完成索引数据后再次启用它）</p><h3 id="数据迁移，把老索引数据迁移到新索引中"><a href="#数据迁移，把老索引数据迁移到新索引中" class="headerlink" title="数据迁移，把老索引数据迁移到新索引中"></a>数据迁移，把老索引数据迁移到新索引中</h3><p>使用 <code>reindex API</code> 就可以将数据 copy 到新索引中。这里几条路可以选：</p><ol><li><p>当只是改变 mapping 数据结构时，可以仅仅使用 reindex api 即可。例如：删除字段，更新字段分词方式等。</p></li><li><p>当需要写入新的字段，新的字段是由老的字段计算得到时，可以使用 script 参数。例如，计算某条数据某字段的总和。script 有很多坑，当 script 出错时，reindex 跑了很久之后失败，即使将数据恢复，也需要重新跑 reindex。</p></li><li><p>当含有很复杂的逻辑时，还是自己写程序吧。</p></li></ol><p>调用 reindex 接口，接口将会在 reindex 结束后返回，而接口返回超时只有30秒，如果 reindex 时间过长，建议加上wait_for_completion=false的参数条件，这样 reindex 将直接返回taskId</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">POST _reindex?wait_for_completion=false{  "source": {    "index": "current_index",    "size":5000  },  "dest": {    "index": "new_index"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重建索引中"><a href="#重建索引中" class="headerlink" title="重建索引中"></a>重建索引中</h3><p>重建索引非常耗时，可以使用 <code>task API</code> 以看到重建进程，其中包含耗时，剩余doc数量等信息。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">GET _tasks/{taskID}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/es-task2.png"></p><p>如果发现错误，可以使用<code>PUT _tasks/{taskID}/cancel</code>接口放弃任务，从头再来。</p><h3 id="恢复自动刷新，恢复副本数"><a href="#恢复自动刷新，恢复副本数" class="headerlink" title="恢复自动刷新，恢复副本数"></a>恢复自动刷新，恢复副本数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PUT new_index/_settings{    "index" : {        "refresh_interval" : "1s",        "number_of_replicas" : "1"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="给新索引设置别名，它的名称为程序中使用的，解除老索引与别名的绑定"><a href="#给新索引设置别名，它的名称为程序中使用的，解除老索引与别名的绑定" class="headerlink" title="给新索引设置别名，它的名称为程序中使用的，解除老索引与别名的绑定"></a>给新索引设置别名，它的名称为程序中使用的，解除老索引与别名的绑定</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">POST /_aliases{    "actions": [        {            "add": {                "index": "new_index",                "alias": "alias1"            },            "remove": {                "index": "current_index",                "alias": "alias1"            }        }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/es-new_index.jpeg"></p><h3 id="删除旧索引"><a href="#删除旧索引" class="headerlink" title="删除旧索引"></a>删除旧索引</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">DELETE current_index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除旧的 index，释放磁盘空间</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li><p>修改索引是一件费时费力的工作，特别是如果发生了错误，整个人都不好了。所以还是在创建索引的时候尽量想好能否满足需求</p></li><li><p>我们使用Kafka把Mysql中的数据同步到Elasticsearch中的，如果没有kafka，也要记录同步数据的时间，方便后面重新同步数据。无论使用哪种同步数据的方式，都需要记录同步数据的offset或时间。重建索引可能非常耗时，在这段时间内，同步进程仍然在向旧索引更新数据，此时重建索引是无法更新这些新数据的。</p></li></ul><h2 id="五-参考资料"><a href="#五-参考资料" class="headerlink" title="五. 参考资料"></a>五. 参考资料</h2><ul><li><a href="https://medium.com/craftsmenltd/rebuild-elasticsearch-index-without-downtime-168363829ea4">https://medium.com/craftsmenltd/rebuild-elasticsearch-index-without-downtime-168363829ea4</a></li><li><a href="https://stackoverflow.com/questions/36449506/what-exactly-does-1-refresh-interval-in-elasticsearch-mean">https://stackoverflow.com/questions/36449506/what-exactly-does-1-refresh-interval-in-elasticsearch-mean</a></li><li><a href="https://sematext.com/blog/elasticsearch-refresh-interval-vs-indexing-performance/">Elasticsearch 刷新间隔与索引性能</a></li><li><a href="https://juejin.cn/post/6844903605967781902">教你如何在 elasticsearch 中重建索引</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8 Lambda 表达式</title>
      <link href="/2022/06/26/java8-lambda-biao-da-shi/"/>
      <url>/2022/06/26/java8-lambda-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/lambda.png"></p><p>Java 8 Lambda 表达式是一个匿名函数。匿名函数是指没有名字且不与任何类绑定的函数。</p><h2 id="二、为什么要使用-Lambda-表达式？"><a href="#二、为什么要使用-Lambda-表达式？" class="headerlink" title="二、为什么要使用 Lambda 表达式？"></a>二、为什么要使用 Lambda 表达式？</h2><p>使用 Lambda 表达式可以实现使用简洁的代码来创建函数式接口的实例，这样就避免了使用匿名内部类繁琐的写法。</p><p>下面我们将学习下Java 8 Lambda 表达式实现示例。</p><h2 id="三、Java-Lambda-表达式语法"><a href="#三、Java-Lambda-表达式语法" class="headerlink" title="三、Java Lambda 表达式语法"></a>三、Java Lambda 表达式语法</h2><p>Lambda 表达式非常简单，包含三个部分。形参列表、箭头运算符（-&gt;）和表达式（方法体）。</p><p><strong>语法 ：</strong> <code>(parameters) -&gt; { statements; }</code></p><p>与任何 java 函数一样，我们可以有任意数量的参数。我们还可以在方法体中包含任意数量的行或表达式。</p><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 普通函数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 等效的Java Lambda表达式示例</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了更好地理解，让我们看一下 Runnable 类的真实示例。</p><p>在 java 8 之前，对于函数式接口的实现，我们要么使用实现类，要么使用匿名内部类。 但是在 lambda 之后，我们可以有另外的做法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在 java 8 之前，使用实现类来实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Runnable implementation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// usage：Runnable runnableObj = new RunnableImpl();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在 java 8 之前，使用匿名类内部类来实现</span><span class="token class-name">Runnable</span> runnableObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Anonymous implementation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换成等效的 lambda 表达式的实现是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Runnable</span> runnableObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Lambda implementation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于 Java lambda 表达式要知道的知识点：</p><ul><li>Java 8 lambda 表达式可以有零个、一个或<strong>多个参数</strong>。eg: <code>() -&gt; 10; a -&gt; a * a; (a, b) -&gt; a + b;</code></li><li>对于零个或多个参数，小括号是<strong>必须的</strong>。eg：<code>() -&gt; 10; (a, b) -&gt; a + b;</code></li><li>对于一个参数，小括号是<strong>可选的</strong>。eg：<code>a -&gt; a * a;</code></li><li>参数类型可以声明或由程序<strong>自动检测</strong>。eg：<code>(int a, int b) -&gt; a + b; OR (a, b) -&gt; a + b;</code></li><li>如果我们要声明参数类型，小括号是<strong>必须的</strong>。eg：<code>(int a) -&gt; a * a;</code></li><li>如果方法体只有一条语句，大括号是<strong>可选的</strong>。eg：<code>a -&gt; a * a; OR a -&gt; {return a * a;};</code></li><li>如果方法体只有一条语句，return关键字是<strong>可选的</strong>，Lambda表达式会自动返回这条语句的值。eg：<code>a -&gt; a * a; OR a -&gt; {return a * a;};</code></li><li>如果有返回值，我们添加了大括号，那么return关键字是<strong>必须的</strong>。eg：<code>a -&gt; {return a * a}</code></li><li>可以在 Lambda 表达式中使用<strong>方法级别或类级别的变量</strong>。</li><li>lambda 表达式中使用的局部变量必须是<strong>有效的最终变量</strong>。</li></ul><h2 id="四、Lambda-表达式与函数式接口"><a href="#四、Lambda-表达式与函数式接口" class="headerlink" title="四、Lambda 表达式与函数式接口"></a>四、Lambda 表达式与函数式接口</h2><p>Lambda 表达式的类型，也被称为“目标类型（target type）”，Lambda 表达式的目标类型必须是“函数式接口（funcitonal interface）”。函数式接口代表只包含一个抽象方法的接口。函数式接口可以包含多个默认方法、类方法，但只能声明一个抽象方法。</p><p>由于 Lambda 表达式的结果就是被当成对象，因此可以使用 Lambda 表达式进行赋值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Runnable 接口中只包含一个无参的方法</span><span class="token comment">// Lambda 表达式的匿名函数实现了Runnable接口中唯一的方法</span><span class="token comment">// 下面的 Lambda 表达式创建了一个 Runnable 对象</span><span class="token class-name">Runnable</span> runnableObj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lambda 表达式有两个使用限制：</p><ul><li>Lambda 表达式的目标类型必须是<strong>明确的函数式接口</strong>。</li><li>Lambda 表达式只能为<strong>函数式接口创建对象</strong>。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译上面的代码会报 <code>Object 不是函数接口</code>的错误，这表明 Lambda 表达式的类型必须是明确的函数式接口，上面的代码将 Lambda 表达式赋值给 Object 变量，编译器只能确定该该 Lambda 表达式的类型为 Object，而 Object 并不是函数式接口，因此会报错。</p><p>通常有 3 种方式来保证Lambda表达式的目标类型是一个函数式接口</p><ul><li>赋值：将 Lambda 表达式赋值给函数式接口类型的变量。 </li><li>传参：将 Lambda 表达式作为函数式接口类型的参数传给某个方法。 </li><li>强制类型转换：使用函数式接口对 Lambda 表达式进行强制类型转换。</li></ul><h2 id="五、Lambda-表达式的方法引用与构造器引用及数组引用"><a href="#五、Lambda-表达式的方法引用与构造器引用及数组引用" class="headerlink" title="五、Lambda 表达式的方法引用与构造器引用及数组引用"></a>五、Lambda 表达式的方法引用与构造器引用及数组引用</h2><p>方法引用和构造器引用可以让 Lambda 表达式的代码块更加简洁。<code>方法引用和构造器引用都需要使用两个英文冒号</code>。</p><p>Lambda 表达式支持的方法引用和构造器引用如下：</p><table><thead><tr><th>引用方式</th><th>示例</th><th>说明</th><th>对应的Lambda表达式</th></tr></thead><tbody><tr><td>类方法引用</td><td>类名::静态方法名</td><td>调用时全部参数将传给该类方法作为参数</td><td>(a, b, c) -&gt; 类名.类方法(a, b, c)</td></tr><tr><td>实例方法引用</td><td>类名::实例方法名</td><td>第一个参数将作为调用者，剩下全部参数将传给该实例方法作为参数</td><td>(a, b, c) -&gt; a.实例方法(b, c)</td></tr><tr><td>引用特定对象的实例方法</td><td>对象::实例方法名</td><td>调用时全部参数将传给该实例方法作为参数</td><td>(a, b, c) -&gt; 特定对象.实例方法(a, b, c)</td></tr><tr><td>引用构造器</td><td>类名::new</td><td>调用时全部参数将传给该构造器作为参数</td><td>(a, b, c) -&gt; new 类名(a, b, c)</td></tr></tbody></table><h3 id="5-1-方法引用"><a href="#5-1-方法引用" class="headerlink" title="5.1 方法引用"></a>5.1 方法引用</h3><ul><li><p>使用场景：当 Lambda 体中的具体实现，已经有其他方法帮我们实现过了，那这时候我们就可以使用方法引用。</p></li><li><p>要求：需要保证引用方法的参数列表、返回值类型与我们当前所要实现的函数式接口方法的参数列表、返回值类型保持一致。</p></li><li><p>为什么要使用：方法引用是Lambda表达式的另外一种表现形式，是一个语法糖，使用方法引用可以少写一些代码，提高工作效率。</p></li></ul><h4 id="5-1-1-类名-静态方法名"><a href="#5-1-1-类名-静态方法名" class="headerlink" title="5.1.1 类名::静态方法名"></a>5.1.1 类名::静态方法名</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Converter</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用Lambda表达式来创建一个Converter对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Converter</span> converter <span class="token operator">=</span> s <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面我们将使用<code>类方法引用</code>来代替上面的写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Converter</span> converter <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当调用 <code>converter.convert("10")</code> 时，调用参数会传给 Integer 类的 valueOf 类方法</p><h4 id="5-1-2-类名-实例方法名"><a href="#5-1-2-类名-实例方法名" class="headerlink" title="5.1.2 类名::实例方法名"></a>5.1.2 类名::实例方法名</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">MyStr</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用Lambda表达式来创建一个MyLambda对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyStr</span> ms <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token string">"lambda"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output：mb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面我们将使用<code>实例方法引用</code>来代替上面的写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyStr</span> ms <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">substring</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token string">"lambda"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output：mb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当调用<code>ms.substr("lambda", 2, 4))</code> substr 方法时，第一个调用参数(lambda)将作为实例方法 substring() 方法的调用者，剩下的全部调用参数(2,4)将作为 substring() 实例方法的实参。</p><p><strong>注意</strong>：这种方法引用的方式就不需要满足<code>保证引用方法的参数列表、返回值类型与我们当前所要实现的函数式接口方法的参数列表、返回值类型保持一致</code>这一规则</p><h4 id="5-1-3-对象-实例方法名"><a href="#5-1-3-对象-实例方法名" class="headerlink" title="5.1.3 对象::实例方法名"></a>5.1.3 对象::实例方法名</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用lambda表达式</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: zhang</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们将使用<code>引用特定对象的实例方法</code>来代替上面的写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用方法引用</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> con2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"quan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: quan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>，<code>这样写的前提: accept()方法和println()方法的参数列表和返回类型要完全一致</code>（有参无返回值）。 </p><p>当调用 out 对象的 println() 方法时，调用参数会全部传给 <strong>“out”对象的println()实例方法</strong></p><p>再举一个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用lambda表达式</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: 0.7947699240208332</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用方法引用</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> sup1 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: 0.1991189968346606</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>，<code>这样写的前提: get()方法和random()方法的参数列表和返回类型要完全一致</code>（无参有返回值）。</p><h3 id="5-2-引用构造器"><a href="#5-2-引用构造器" class="headerlink" title="5.2 引用构造器"></a>5.2 引用构造器</h3><p>语法格式：<code>类::new</code>，调用哪个构造器取决于函数式接口中的方法形参的定义，Lambda 会自动根据接口方法推断出你要调用的构造器，也就是说需要调用的构造器的参数列表要与函数式接口中的抽象方法的参数列表保持一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age='"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">String</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-1-无参构造器获取对象（Supplier）"><a href="#5-2-1-无参构造器获取对象（Supplier）" class="headerlink" title="5.2.1 无参构造器获取对象（Supplier）"></a>5.2.1 无参构造器获取对象（Supplier）</h4><p>使用Lambda表达式实现通过 User 的无参构造器获取 User 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> supplier1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user: "</span> <span class="token operator">+</span> supplier1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: user: User{id=null, name='null', age='null'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用Lambda构造器引用实现通过 User 的无参构造器获取 User 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> supplier2 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user: "</span> <span class="token operator">+</span> supplier2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: user: User{id=null, name='null', age='null'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-2-2-一个有参构造器获取对象（Function）"><a href="#5-2-2-一个有参构造器获取对象（Function）" class="headerlink" title="5.2.2  一个有参构造器获取对象（Function）"></a>5.2.2  一个有参构造器获取对象（Function）</h4><p>使用Lambda表达式实现通过 User 的 1 个有参构造器获取 User 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> function1 <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: User{id=1, name='null', age='null'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用Lambda构造器引用实现通过 User 的 1 个有参构造器获取 User 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> function2 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: User{id=1, name='null', age='null'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3-二个有参构造器获取对象（BiFunction）"><a href="#5-2-3-二个有参构造器获取对象（BiFunction）" class="headerlink" title="5.2.3 二个有参构造器获取对象（BiFunction）"></a>5.2.3 二个有参构造器获取对象（BiFunction）</h4><p>使用Lambda表达式实现通过 User 的 2 个有参构造器获取 User 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> biFun1 <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>biFun1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: User{id=1, name='zhangquan', age='null'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用Lambda构造器引用实现通过 User 的 2 个有参构造器获取 User 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> biFun2 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>biFun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: User{id=1, name='zhangquan', age='null'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-2-4-三及以上个有参构造器获取对象（自定义函数式接口）"><a href="#5-2-4-三及以上个有参构造器获取对象（自定义函数式接口）" class="headerlink" title="5.2.4  三及以上个有参构造器获取对象（自定义函数式接口）"></a>5.2.4  三及以上个有参构造器获取对象（自定义函数式接口）</h4><p>首先自定义函数式接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFun</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">F</span> f<span class="token punctuation">,</span> <span class="token class-name">S</span> s<span class="token punctuation">,</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda表达式实现通过 User 的 3 个有参构造器获取 User 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyFun</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> myFun1 <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myFun1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zhangquan"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: User{id=1, name='zhangquan', age='30'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用Lambda构造器引用实现通过 User 的 3 个有参构造器获取 User 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyFun</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> myFun2 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myFun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zhangquan"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: User{id=1, name='zhangquan', age='30'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-3-数组引用"><a href="#5-3-数组引用" class="headerlink" title="5.3 数组引用"></a>5.3 数组引用</h3><p>可以把数组看做是一个特殊的类，则写法与构造器引用一致。</p><blockquote><p>语法格式为：Type[]::new</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> fun1 <span class="token operator">=</span>  <span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> fun1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> fun2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> fun1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、Lambda-表达式-VS-匿名内部类"><a href="#六、Lambda-表达式-VS-匿名内部类" class="headerlink" title="六、Lambda 表达式 VS 匿名内部类"></a>六、Lambda 表达式 VS 匿名内部类</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都可以直接访问 “effectively final”的局部变量（不需要加final关键字，但实际上是final，编译器编译时会自动加上），以及外部类的成员变量（包括实例变量和类变量）。</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li><p>匿名内部类可以为任意接口创建实例，不管接口包含多少个抽象方法，只要匿名内部类实现所有的抽象方法即可。但Lambda表达式只能为函数式接口创建实例。</p></li><li><p>匿名内部类可以为抽象类、甚至普通类创建实例。但Lambda表达式只能为函数式接口创建实例。</p></li><li><p>匿名内部类实现的抽象方法的方法体允许调用接口中定义的默认方法。但Lambda表达式的代码块不允许调用接口中定义的默认方法。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 中 Optional 类详解</title>
      <link href="/2022/06/19/java-zhong-optional-lei-xiang-jie/"/>
      <url>/2022/06/19/java-zhong-optional-lei-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/optional.png"></p><p>在 java.util 包下的 Java 8 版本中添加了 Optional类。它用作实际值的容器或包装器，实际值可能为空，也可能不为空。使用 Optional将有助于我们以更简洁的方式避免和处理空指针异常</p><h2 id="二、为什么要使用-Optional-？"><a href="#二、为什么要使用-Optional-？" class="headerlink" title="二、为什么要使用 Optional ？"></a>二、为什么要使用 Optional ？</h2><p>我们在开发时为了避免出现空指针，需要添加空检查，这可能会导致嵌套 if 语句，结果就是造成很丑陋的代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 处理 null 的传统方式</span><span class="token class-name">Double</span> balance <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Account</span> account <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>account <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        balance <span class="token operator">=</span> account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用 Optional 来处理 null</span><span class="token class-name">Double</span> balance <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAccount</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token operator">::</span><span class="token function">getBalance</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在某些场景下使用 Optional 能使我们的代码更加优雅简洁</p><h2 id="三、Java-8-中-Optional-类中的方法"><a href="#三、Java-8-中-Optional-类中的方法" class="headerlink" title="三、Java 8 中 Optional 类中的方法"></a>三、Java 8 中 Optional 类中的方法</h2><table><thead><tr><th>创建实例的方法</th><th>检查值的方法</th><th>获取值的方法</th><th>操作的方法</th></tr></thead><tbody><tr><td><code>empty()</code></td><td><code>isPresent()</code></td><td><code>get()</code></td><td><code>ifPresent(Consumer consumer)</code></td></tr><tr><td><code>of(T value)</code></td><td><code>filter(Predicate predicate)</code></td><td><code>orElse(T other)</code></td><td><code>map(Function mapper)</code></td></tr><tr><td><code>ofNullable(T value)</code></td><td></td><td><code>orElseGet(Supplier other)</code></td><td><code>flatMap(Function mapper)</code></td></tr><tr><td></td><td></td><td><code>orElseThrow(Supplier exception)</code></td><td></td></tr></tbody></table><h3 id="3-1-创建-Optional-对象的方法"><a href="#3-1-创建-Optional-对象的方法" class="headerlink" title="3.1 创建 Optional 对象的方法"></a>3.1 创建 Optional 对象的方法</h3><p>Optional 类具有私有构造函数，因此我们不能使用 new 关键字创建对象。此外，一旦创建我们就无法更改 Optional 中的值，因此我们需要在创建对象时提供值。</p><p>有 3 种方法可以创建 Optional 对象。 使用 Optional 类中提供的 3 种不同的静态方法</p><ul><li><code>empty()</code></li></ul><p>返回一个没有 <code>null</code> 值的 Optional 对象，该方法创建的对象始终为空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> emptyOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>空的 Optional 对象用于表示空值。 在这个对象上我们可以执行一些操作而不会出现空指针异常</p><ul><li><code>of(T value) </code></li></ul><p>每当我们需要创建某个值的 Optional 时，我们可以使用 <code>Optional.of(value)</code> 来创建所需值的 Optional。<br>在此方法中，不允许使用 null 值。<br>如果我们尝试创建具有 null 值的对象，则会抛出 NullPointerException。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"zhangquan"</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// OK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在某些情况下，我们不确定该值是否存在。 在这种情况下，我们应该使用 <code>ofNullable(value)</code> 而不是 <code>of(value)</code> 来避免NullPoiterException</p><ul><li><code>ofNullable(T value) </code></li></ul><p>当我们需要创建某个值的 Optional 并且 value 可以为 null 时，我们应该使用 <code>Optional.ofNullabe(value)</code>。 这将创建所需值的 Optional，如果为 null，则为空。在此方法中，允许使用 null 值。如果我们尝试创建具有 null 值的对象，它将返回空 Optional。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"zhangquan"</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullabe</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// OK        </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullabe</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// OK        </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>创建实例的方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>empty()</code></td><td>-</td><td>创建一个空的Optional</td></tr><tr><td><code>of(T value)</code></td><td>要设置的值 - 不能为null</td><td>为非null的值创建一个Optional</td></tr><tr><td><code>ofNullable(T value)</code></td><td>要设置的值 - 可以为 null</td><td>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional</td></tr></tbody></table><h3 id="3-2-检查-Optional-对象中值的方法"><a href="#3-2-检查-Optional-对象中值的方法" class="headerlink" title="3.2 检查 Optional 对象中值的方法"></a>3.2 检查 Optional 对象中值的方法</h3><p>有时我们需要检查 Optional 是否包含期望值，我们可以通过 2 种方式检查 Optional 对象是否包含值</p><ul><li><code>isPresent()</code></li></ul><p>根据值是否存在返回 true 或 false</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> emptyOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emptyOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output : false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output : true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code></li></ul><p>此方法将<code>predicate</code>作为输入参数。 这里的<code>predicate</code>是针对 optional 对象检查的条件， 如果条件匹配，则返回带有值的 optional 对象，否则返回空的 optional 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span> nameOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span> output <span class="token operator">=</span> nameOptional<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output：Optional[zhangquan]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，我们尝试检查 optional 是否包含“zhangquan”。 因为它是匹配的，所以输出以“zhangquan”作为值的optional对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span> nameOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span> output <span class="token operator">=</span> nameOptional<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output：Optional.empty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，我们尝试检查 optional 是否包含“java”值。 因为它是不匹配的，所以输出空的optional对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span> output <span class="token operator">=</span> nameOptional<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output：Optional[zhangquan]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>检查值的方法</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>isPresent()</code></td><td>-</td><td>根据值是否存在返回true或false</td></tr><tr><td><code>filter(Predicate predicate)</code></td><td>Predicate接口</td><td>如果条件匹配，则返回带有值的 optional 对象，否则返回空的 optional 对象</td></tr></tbody></table><h3 id="3-3-获取-Optional-对象中值的方法"><a href="#3-3-获取-Optional-对象中值的方法" class="headerlink" title="3.3 获取 Optional 对象中值的方法"></a>3.3 获取 Optional 对象中值的方法</h3><p>根据需求和场景不同有 4 种方法可以访问 Optional 对象中的值</p><ul><li><code>get()</code></li></ul><p>如果值存在则返回值，如果为空则抛出 NoSuchElementException 异常，只有当我们确定该值存在并且它不是空的 optional 时，我们才应该在此 optional 对象上使用此方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Exception in thread "main" java.util.NoSuchElementException: No value present</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Output: Optional[zhangquan]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果 optional 中的值可以为 null，那么我们可以使用其他方法，如 <code>orElse(...)</code> 来访问该值</p><ul><li><code>orElse(T other)</code> </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  Output: zhangquan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与 get() 方法不同，如果为空 Optional，我们可以指定要返回的值，因此它不会抛出 NoSuchElementException。 这是从 optional 对象中访问值的最常见和最常用的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  Output: default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  Output: default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>orElseGet( Supplier&lt;? extends T&gt; other)</code></li></ul><p>如果值存在则返回该值，否则返回其它值，这个其它值是个函数式接口。</p><p>该方法与 <code>orElse(...)</code> 方法差别不大，只不过 optional 为空时执行函数式接口，返回该函数式接口返回的值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token class-name">String</span> <span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"default"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Output</span> <span class="token operator">:</span> <span class="token keyword">default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>orElseThrow(Supplier exceptionSupplier)</code></li></ul><p>如果值存在则返回该值，否则则抛出异常。我们可以使用这个方法来抛出自定义异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// before java 8</span><span class="token class-name">Data</span> date <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 我们需要检查的变量</span><span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Date not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// if null throw exception</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> date<span class="token punctuation">;</span> <span class="token comment">// else return value from variable</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// using java 8</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> date <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//  optional variable</span><span class="token keyword">return</span> date<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Date not found"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-4-操作-Optional-对象中值的方法"><a href="#3-4-操作-Optional-对象中值的方法" class="headerlink" title="3.4 操作 Optional 对象中值的方法"></a>3.4 操作 Optional 对象中值的方法</h3><p>有 3 种方法可以对 Optional 对象中的值进行一些操作或者将值从一种形式转换为另一个形式</p><ul><li><code>ifPresent( Consumer&lt;? super T&gt; consumer)</code></li></ul><p>仅当值存在时才执行逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>向上面这种代码使用 Optional 我们可以非常简洁的处理这个问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>id <span class="token operator">-&gt;</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>map( Function&lt;? super  T,? extends U&gt; mapper)</code></li></ul><p>使用 <code>mapper</code> 函数中的指定逻辑将值从一个形式转换为另一种形式，如果值存在，则返回新值的 optional，如果值不存在，则返回空的 optional。需要注意的一点是<code>map()</code>将返回新的值并且不会修改原始的值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> person <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// using optional</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>  person <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OR<span class="token class-name">Optional</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>flatMap( Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</code></li></ul><p>与map() 几乎类似，不同之处在于map 将值转换为Optional 对象，而 flatMap 转换嵌套的Optional 对象<code>Optional&lt;Optional&gt;</code>。</p><p>Optional 值也可能是 Optional，因此这可能导致 <code>Optional&lt;Optional&gt;</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zhangquan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Optional[com.zhangquan.java8.optional.User@5caf905d]</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIdOptional</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Optional[Optional[1]]</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIdOptional</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Optional[1]</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getIdOptional</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> idOptional<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">getIdOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> idOptional<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIdOptional</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> idOptional<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>idOptional <span class="token operator">=</span> idOptional<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最需要注意的是 flat方法的 mapper 函数必须返回一个 Optional 对象。</p><h2 id="四、orElse-vs-orElseGet"><a href="#四、orElse-vs-orElseGet" class="headerlink" title="四、orElse vs orElseGet"></a>四、orElse vs orElseGet</h2><p>我们将讨论下 Optional 中的 orElse 与 orElseGet 它们的区别以及在什么时候应该使用哪种方法？</p><p><code>orElse</code> 方法需要一个值，而 <code>orElseGet </code>方法需要函数式接口，我们可以使用 <code>orElse(functionCall())</code> 代替 <code>orElseGet(Class::functionDef())</code>，它会得到相同的结果，那为什么还要创建两种不同的方法呢？</p><p>答案就是在某些情况下它们在性能方面有很大差异。</p><p>orElse 与 orElseGet  的区别</p><ul><li>如果 optional 为 null，我们将使用以下函数获取值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseVSorElseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orElseVSorElseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> orElseGetResult <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getFunctionForTest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value in orElseGetResult "</span> <span class="token operator">+</span> orElseGetResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> orElseResult <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFunctionForTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value in orElseResult "</span> <span class="token operator">+</span> orElseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFunctionForTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n ===== function called ===== "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"default value"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Output: </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> ===== function called ===== value in orElseGetResult default value ===== function called ===== value in orElseResult default value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 optional 中有值，我们将使用以下函数获取值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseVSorElseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">orElseVSorElseGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"value found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> orElseGetResult <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getFunctionForTest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value in orElseGetResult "</span> <span class="token operator">+</span> orElseGetResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> orElseResult <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFunctionForTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value in orElseResult "</span> <span class="token operator">+</span> orElseResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFunctionForTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n ===== function called ===== "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"default value"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Output: </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">value in orElseGetResult value found ===== function called ===== value in orElseResult value found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们明确的知道 optional 对象中是有值的，所以我们期望 <code>orElse</code> 部分不应该被执行，然而它执行了。</p><p>因为上面 <code>getFunctionForTest</code> 方法很简单，没有多少性能的差异，但是当我们有复杂的逻辑来获取默认值时，它会影响性能，特别是需要查询数据库或者通过网络调用来获取默认值时，即使 optional 已经明确有值程序也会变慢。</p><blockquote><p>在 orElse 的情况下，即使 optional 有值，也会执行 else 部分，如果我们有默认的静态值，那么 orElse 是不错的选择。但如果默认值需要通过复杂的计算逻辑来获得，那么我们应该使用 orElseGet</p></blockquote><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li>5.1 在 java.util 包下的 Java 8 版本中添加。</li><li>5.2 Optional 类具有私有构造函数，因此我们不能使用 new 关键字创建对象。</li><li>5.3 Optional 表示具体某个值的 Optional 对象或空值，而不是 null 引用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 中确定理想线程池的大小和Linux 查看CPU核数</title>
      <link href="/2022/06/15/java-zhong-que-ding-li-xiang-xian-cheng-chi-de-da-xiao-he-linux-cha-kan-cpu-he-shu/"/>
      <url>/2022/06/15/java-zhong-que-ding-li-xiang-xian-cheng-chi-de-da-xiao-he-linux-cha-kan-cpu-he-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在进行 java 编程时经常会遇到这样的问题：我的线程池应该设置为多少？</p><p>如果线程池设置的过大，那么大量的线程将在相对很少的CPU和内存资源上发生竞争，这不仅会导致更高的内存使用量，而且还可能会耗尽资源。如果线程池设置的过小，那么将导致许多空闲的处理器无法执行工作，从而降低吞吐率。</p><p>下面我们就来聊一聊如果正确的设置线程池大小。</p><h2 id="二、Linux-查看CPU核数"><a href="#二、Linux-查看CPU核数" class="headerlink" title="二、Linux 查看CPU核数"></a>二、Linux 查看CPU核数</h2><p>我们知道 Linux/UNIX 中一切皆文档，硬件信息也记录在文件中。可以通过<code>cat /proc/cpuinfo</code> 查看CPU详细信息。</p><p>下面是cpuinfo的信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">processor       : 0vendor_id       : GenuineIntelcpu family      : 6model           : 85model name      : Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHzstepping        : 4microcode       : 0x1cpu MHz         : 2499.992cache size      : 33792 KBphysical id     : 0siblings        : 2core id         : 0cpu cores       : 1apicid          : 0initial apicid  : 0fpu             : yesfpu_exception   : yescpuid level     : 13wp              : yesflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 spec_ctrl intel_stibpbogomips        : 4999.98clflush size    : 64cache_alignment : 64address sizes   : 46 bits physical, 48 bits virtualpower management:processor       : 1vendor_id       : GenuineIntelcpu family      : 6model           : 85model name      : Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHzstepping        : 4microcode       : 0x1cpu MHz         : 2499.992cache size      : 33792 KBphysical id     : 0siblings        : 2core id         : 0cpu cores       : 1apicid          : 1initial apicid  : 1fpu             : yesfpu_exception   : yescpuid level     : 13wp              : yesflags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 spec_ctrl intel_stibpbogomips        : 4999.98clflush size    : 64cache_alignment : 64address sizes   : 46 bits physical, 48 bits virtualpower management:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要字段含义如下：</p><ul><li>vendor_id：供应商ID，如果处理器是Intel处理器，会包含Intel字符串</li><li>processor：逻辑CPU的唯一标识符</li><li>core id：每个内核的唯一标识符</li><li>physical id：物理CPU的唯一标识符</li><li>cpu cores：同一个物理CPU的核心的个数</li><li>siblings：表示此物理CPU上可能支持或不支持超线程（HT）技术的逻辑CPU的数量（一个物理CPU有几个逻辑CPU）</li></ul><p>需要注意：</p><ol><li>如果多个逻辑处理器具有相同的核心ID （core id）和物理ID（physical id），则系统支持超线程（HT）技术</li><li>如果两个或多个逻辑CPU具有相同的物理id（physical id），但核心id（core id）不同，则这是一个多核处理器</li></ol><h3 id="2-1-查看物理CPU个数"><a href="#2-1-查看物理CPU个数" class="headerlink" title="2.1 查看物理CPU个数"></a>2.1 查看物理CPU个数</h3><p>物理计算机插槽上的CPU数量，也就是物理CPU的数量，可以统计非重复物理ID的数量，</p><p>查看方法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep "physical id" /proc/cpuinfo | sort | uniq | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-查看每个物理CPU中核心数"><a href="#2-2-查看每个物理CPU中核心数" class="headerlink" title="2.2 查看每个物理CPU中核心数"></a>2.2 查看每个物理CPU中核心数</h3><p>单个CPU可处理数据的芯片组数是CPU核心数，如双核、四核等。</p><p>查看方法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat /proc/cpuinfo | grep "cpu cores" | uniq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-查看逻辑CPU的个数"><a href="#2-3-查看逻辑CPU的个数" class="headerlink" title="2.3 查看逻辑CPU的个数"></a>2.3 查看逻辑CPU的个数</h3><p>这个是我们的机器总的CPU的个数，也是<code>设置线程池大小的时候需要使用到的CPU的个数</code>。</p><p>注意　/proc/cpuinfo　文件中　<code>processor 0 – n</code> 并不一定是逻辑CPU的实际数量。</p><p>通常，一个CPU会有多个核心。英特尔公司的超线程技术（Hyper-Threading）在逻辑上可以将CPU核心的数量增加一倍，所以逻辑CPU个数应该这样算：</p><p>CPU不支持超线程：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">逻辑CPU个数 = 物理CPU个数 * 每个物理CPU中核心数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CPU支持超线程：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">逻辑CPU个数 = 物理CPU个数 * 每个物理CPU中核心数 * 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果多个逻辑CPU具有相同的核心ID（core id）和物理（physical id），则系统支持超线程（HT）技术。</p><p>查看方法：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat /proc/cpuinfo | grep "processor" | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、设置线程池大小"><a href="#三、设置线程池大小" class="headerlink" title="三、设置线程池大小"></a>三、设置线程池大小</h2><p>线程池称为工作线程池。工作线程是一个接受任务、完成任务并再次返回线程池以接受另一个任务的线程。</p><p>线程池的大小主要取决于以下两个因素：</p><h3 id="3-1-CPU核数（逻辑CPU的个数）"><a href="#3-1-CPU核数（逻辑CPU的个数）" class="headerlink" title="3.1 CPU核数（逻辑CPU的个数）"></a>3.1 CPU核数（逻辑CPU的个数）</h3><p>单核CPU将一次运行一个线程。如果是四核的，这意味着CPU中有四个核，而云或服务器的CPU中可能有多达个内核。</p><p>如果我们考虑超线程，那么单核CPU可以有多个处理器。</p><p>可以使用下面的 java 代码找到处理器的数量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> poolSize <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-任务类型"><a href="#3-2-任务类型" class="headerlink" title="3.2 任务类型"></a>3.2 任务类型</h3><p>有两种类型的任务：</p><ul><li>CPU密集型：涉及数学计算的任务</li><li>I/O密集型：通过网络调用（如数据库、web服务）与其他应用程序通信的阻塞任务</li></ul><h4 id="3-2-1-CPU密集型"><a href="#3-2-1-CPU密集型" class="headerlink" title="3.2.1 CPU密集型"></a>3.2.1 CPU密集型</h4><p>如果有一个CPU核心和一个线程正在运行，其中提交了两个任务。然后将一个任务提交给线程一，一旦完成，则提交另一个任务。提交两个任务之间不应有任何时间间隔，以实现CPU的最大利用率</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cpu-bound.png"></p><h4 id="3-2-2-I-O密集型"><a href="#3-2-2-I-O密集型" class="headerlink" title="3.2.2 I/O密集型"></a>3.2.2 I/O密集型</h4><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/io-bound.png"></p><p>通过网络调用与其他应用程序进行通信的任务，如web服务、数据库、外部缓存、微服务等。</p><p>在上图中，有1个线程，向其提交了1个任务。当此任务等待IO操作完成时，CPU将变为空闲状态。当IO调用返回响应时，它会再次开始工作，直到任务未完成。</p><p>在空闲时间内，我们可以再启动一个线程并使其运行，以实现CPU的最大利用率，并且线程1可以处于等待状态，直到从IO调用接收到输出。</p><p>因此，对于具有一个核心CPU的IO绑定任务，可以增加线程数，并获得CPU的最大利用率。</p><h2 id="四、计算线程数以实现CPU利用率最优的公式"><a href="#四、计算线程数以实现CPU利用率最优的公式" class="headerlink" title="四、计算线程数以实现CPU利用率最优的公式"></a>四、计算线程数以实现CPU利用率最优的公式</h2><p>在设置线程池大小时，需要设置为：</p><ul><li>CPU密集型：逻辑CPU的个数 + 1 </li></ul><p>$$<br>N_{cpu} + 1<br>$$</p><ul><li>I/O密集型：2 * 逻辑CPU的个数 + 1</li></ul><p>$$<br>2 * N_{cpu} + 1<br>$$</p><p>这里 <code>+1</code> 的意义何在？</p><p>《Java并发编程实践》这么说：</p><blockquote><p>计算密集型的线程恰好在某时因为发生一个页错误或者因其他原因而暂停，刚好有一个“额外”的线程，可以确保在这种情况下CPU周期不会中断工作。</p></blockquote><p>所以 <code>+1</code> 其实是一个经验值。</p><h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><ul><li><a href="https://zh.wikipedia.org/zh-cn/%E8%B6%85%E5%9F%B7%E8%A1%8C%E7%B7%92">超线程（HT, Hyper-Threading)</a></li><li><a href="https://book.douban.com/subject/10484692/">《Java并发编程实践》</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 线程池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java，并发，线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能压测工具 wrk 使用指南</title>
      <link href="/2022/03/24/xing-neng-ya-ce-gong-ju-wrk-shi-yong-zhi-nan/"/>
      <url>/2022/03/24/xing-neng-ya-ce-gong-ju-wrk-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/wrk-0.png"></p><h2 id="一、什么是-wrk"><a href="#一、什么是-wrk" class="headerlink" title="一、什么是 wrk"></a>一、什么是 wrk</h2><p>wrk 是一个开源的、热门的、现代的单机 HTTP 基准测试工具，目前 GitHub 开源平台累计了 31.8k 的 star 数目，足以可见 wrk 在 HTTP 基准测试领域的热门程度。它结合了多线程设计和可扩展的事件通知系统，如 <a href="https://man7.org/linux/man-pages/man7/epoll.7.html">epoll</a> 和 <a href="https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;sektion=2">kqueue</a> ，可以在有限的资源下对目标机器产生大量的负载。并且内置了一个可选的 <a href="https://en.wikipedia.org/wiki/LuaJIT">LuaJIT</a> 脚本执行引擎，可以处理复杂的 HTTP 请求生成、响应处理以及自定义压测报告。</p><p>wrk项目地址：<a href="https://github.com/wg/wrk">https://github.com/wg/wrk</a></p><h2 id="二、wrk-的优缺点"><a href="#二、wrk-的优缺点" class="headerlink" title="二、wrk 的优缺点"></a>二、wrk 的优缺点</h2><h3 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h3><ul><li>轻量级性能测试工具</li><li>安装简单（相对 Apache ab 来说）</li><li>学习曲线基本为零，几分钟就能学会如何使用了</li><li>基于系统自带的高性能 I/O 机制，如 epoll, kqueue, 利用异步的事件驱动框架，通过很少的线程就可以压出很大的并发量</li></ul><h3 id="2-2-缺点"><a href="#2-2-缺点" class="headerlink" title="2.2 缺点"></a>2.2 缺点</h3><p>wrk 目前仅支持单机压测，后续也不太可能支持多机器对目标机压测，因为它本身的定位，并不是用来取代 JMeter, LoadRunner 等专业的测试工具，wrk 提供的功能，对我们后端开发人员来说，应付日常接口性能验证还是比较友好的。</p><h2 id="三、安装-wrk"><a href="#三、安装-wrk" class="headerlink" title="三、安装 wrk"></a>三、安装 wrk</h2><h3 id="3-1-Linux-安装"><a href="#3-1-Linux-安装" class="headerlink" title="3.1 Linux 安装"></a>3.1 Linux 安装</h3><h4 id="3-1-1-Ubuntu-Debian"><a href="#3-1-1-Ubuntu-Debian" class="headerlink" title="3.1.1 Ubuntu/Debian"></a>3.1.1 Ubuntu/Debian</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo apt-get install build-essential libssl-dev git -y$ git clone https://github.com/wg/wrk.git wrk$ cd wrk$ make# 将可执行文件移动到 /usr/local/bin 位置$ sudo cp wrk /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-CentOS-RedHat-Fedora"><a href="#3-1-2-CentOS-RedHat-Fedora" class="headerlink" title="3.1.2 CentOS/RedHat/Fedora"></a>3.1.2 CentOS/RedHat/Fedora</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo yum groupinstall 'Development Tools'$ sudo yum install -y openssl-devel git $ git clone https://github.com/wg/wrk.git wrk$ cd wrk$ make# 将可执行文件移动到 /usr/local/bin 位置$ sudo cp wrk /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-MacOS-安装"><a href="#3-2-MacOS-安装" class="headerlink" title="3.2 MacOS 安装"></a>3.2 MacOS 安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew install wrk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、如何使用"><a href="#四、如何使用" class="headerlink" title="四、如何使用"></a>四、如何使用</h2><h3 id="4-1-基础使用"><a href="#4-1-基础使用" class="headerlink" title="4.1 基础使用"></a>4.1 基础使用</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ wrk -t12 -c400 -d30s http://www.zhangquan.me<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令表示，利用 wrk 对 <a href="http://www.zhangquan.me/">www.zhangquan.me</a> 发起压力测试，线程数为 12，模拟 400 个并发请求，持续 30 秒。</p><h3 id="4-2-wrk-参数说明"><a href="#4-2-wrk-参数说明" class="headerlink" title="4.2 wrk 参数说明"></a>4.2 wrk 参数说明</h3><p>除了上面简单示例中使用到的子命令参数，wrk 还有其他更丰富的功能，命令行中输入 wrk –help, 可以看到支持以下子命令：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/wrk-2.png"></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">使用方法: wrk &lt;选项&gt; &lt;被测HTTP服务的URL&gt;                              Options:                                                -c, --connections &lt;N&gt;  跟服务器建立并保持的TCP连接数量      -d, --duration    &lt;T&gt;  压测时间               -t, --threads     &lt;N&gt;  使用多少个线程进行压测                                                             -s, --script      &lt;S&gt;  指定Lua脚本路径           -H, --header      &lt;H&gt;  为每一个HTTP请求添加HTTP头              --latency          在压测结束后，打印延迟直方图信息           --timeout     &lt;T&gt;  如果在此时间内没有收到响应，则记录超时        -v, --version          打印正在使用的wrk的详细版本信息                                                        &lt;N&gt;代表数字参数，支持国际单位 (1k, 1M, 1G)  &lt;T&gt;代表时间参数，支持时间单位 (2s, 2m, 2h)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>-</code>开头的指令为简写的，后面两个打印延迟直方图和超时设置没有简写的，只能<code>--</code>开头指定</p><blockquote><p>PS: 关于线程数，并不是设置的越大，压测效果越好，线程设置过大，反而会导致线程切换过于频繁，效果降低，一般来说，推荐设置成压测机器 CPU 核心数的 2 倍到 4 倍就行了。</p></blockquote><p>MAC 查看 CPU 物理处理器数量和逻辑处理器数量</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">$ sysctl hw.physicalcpu hw.logicalcpuhw.physicalcpu: 8hw.logicalcpu: 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-3-压测报告"><a href="#4-3-压测报告" class="headerlink" title="4.3 压测报告"></a>4.3 压测报告</h3><p>执行压测命令:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">$ wrk -t12 -c400 -d30s --latency http://www.zhangquan.me  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成如下压测报告：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">Running 30s test @ http://www.zhangquan.me （运行30s测试）  12 threads and 400 connections （共12个测试线程，400个连接）                  Thread Stats   Avg（平均值）      Stdev（标准差）     Max (最大值)    +/- Stdev（正负一个标准差所占比例）    Latency (延迟）    79.18ms   24.43ms 737.24ms   97.75%    Req/Sec (每秒请求数)     423.57     38.26   530.00     87.14%  Latency Distribution (延迟直方图)     50%   76.95ms (50%请求延迟在76.95ms内)     75%   89.43ms (75%请求延迟在89.43ms内)     90%   95.05ms (90%请求延迟在95.05ms内)     99%  143.00ms (99%请求延迟在143.00ms内)  152148 requests in 30.09s, 94.74MB read (30.09s内处理了152148个请求，耗费流量94.74MB)Requests/sec:   5056.18 (QPS 5056.18,即平均每秒处理请求数为5056.18)Transfer/sec:      3.15MB (平均每秒流量3.15MB)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>标准差啥意思？标准差如果太大说明样本本身离散程度比较高，有可能系统性能波动较大。</p></blockquote><h3 id="4-4-使用-Lua-脚本进行复杂测试"><a href="#4-4-使用-Lua-脚本进行复杂测试" class="headerlink" title="4.4 使用 Lua 脚本进行复杂测试"></a>4.4 使用 Lua 脚本进行复杂测试</h3><p>您可能有疑问了，你这种进行 GET 请求还凑合，我想进行 POST 请求咋办？而且我想每次的请求参数都不一样，用来模拟用户使用的实际场景，又要怎么弄呢？</p><p>对于这种需求，我们可以通过编写 Lua 脚本的方式，在运行压测命令时，通过参数 –script 来指定 Lua 脚本，来满足个性化需求。</p><h4 id="4-4-1-wrk-对-Lua-脚本的支持"><a href="#4-4-1-wrk-对-Lua-脚本的支持" class="headerlink" title="4.4.1 wrk 对 Lua 脚本的支持"></a>4.4.1 wrk 对 Lua 脚本的支持</h4><p>wrk 支持在三个阶段对压测进行个性化，分别是启动阶段、运行阶段和结束阶段。每个测试线程，都拥有独立的Lua 运行环境。</p><h5 id="启动阶段："><a href="#启动阶段：" class="headerlink" title="启动阶段："></a>启动阶段：</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>addr <span class="token operator">=</span> <span class="token string">"http://www.zhangquan.me"</span>            thread<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>          thread<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zq"</span><span class="token punctuation">)</span>     thread<span class="token punctuation">:</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在脚本文件中实现 setup 方法，wrk 就会在测试线程已经初始化，但还没有启动的时候调用该方法。wrk会为每一个测试线程调用一次 setup 方法，并传入代表测试线程的对象 thread 作为参数。setup 方法中可操作该 thread 对象，获取信息、存储信息、甚至关闭该线程。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">thread<span class="token punctuation">.</span>addr             <span class="token operator">-</span> get <span class="token keyword">or</span> set the thread's server address <span class="token operator">#</span> 获取或设置请求的地址thread<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token operator">-</span> get the value of a global <span class="token keyword">in</span> the thread's env <span class="token operator">#</span> 获取全局变量的值thread<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span> set the value of a global <span class="token keyword">in</span> the thread's  env <span class="token operator">#</span> 在线程的环境中设置全局变量的值thread<span class="token punctuation">:</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token operator">-</span> stop the thread <span class="token operator">#</span> 停止线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行阶段："><a href="#运行阶段：" class="headerlink" title="运行阶段："></a>运行阶段：</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>     <span class="token function">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">10</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    requests <span class="token operator">=</span> requests <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> wrk<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> body<span class="token punctuation">)</span>    responses <span class="token operator">=</span> responses <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>init(args): <strong>初始化。</strong> 由测试线程调用，只会在进入运行阶段时，调用一次。支持从启动 wrk 的命令中，获取命令行参数；args为从命令行传过来的额外参数。</li><li>delay()： <strong>每次请求前设置延迟。</strong> 在每次发送请求之前调用，如果需要定制延迟时间，可以在这个方法中设置。</li><li>request():  <strong>发起请求。</strong>         每次请求执行一次，返回包含HTTP请求的字符串。每次构建新请求的开销都很大，在测试高性能服务器时，一种解决方案是在init()中预先生成所有请求，并在request()中进行快速查找。</li><li>response(status, headers, body): <strong>响应处理。</strong> 在每次收到一个响应时被调用，为提升性能，如果没有定义该方法，那么wrk不会解析 headers 和 body。</li></ul><h5 id="结束阶段："><a href="#结束阶段：" class="headerlink" title="结束阶段："></a>结束阶段：</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">done</span><span class="token punctuation">(</span>summary<span class="token punctuation">,</span> latency<span class="token punctuation">,</span> requests<span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> thread <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span> <span class="token keyword">do</span>        <span class="token keyword">local</span> id <span class="token operator">=</span> thread<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> requests <span class="token operator">=</span> thread<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"requests"</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> responses <span class="token operator">=</span> thread<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"responses"</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> msg <span class="token operator">=</span> <span class="token string">"thread %d made %d requests and got %d responses"</span>        <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> requests<span class="token punctuation">,</span> responses<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>请求完成。</strong> done() 方法在整个测试过程中只会被调用一次，我们可以从给定的参数中，获取压测结果，生成定制化的测试报告。done()函数接收一个包含结果数据的表和两个统计数据对象，分别表示每个请求延迟和每个线程请求速率。<br>持续时间和延迟是微秒值，速率是以每秒请求数来度量的。</p><h5 id="自定义-Lua-脚本中可访问的变量以及方法："><a href="#自定义-Lua-脚本中可访问的变量以及方法：" class="headerlink" title="自定义 Lua 脚本中可访问的变量以及方法："></a>自定义 Lua 脚本中可访问的变量以及方法：</h5><p>变量：wrk</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">wrk <span class="token operator">=</span> <span class="token punctuation">{</span>    scheme  <span class="token operator">=</span> <span class="token string">"http"</span><span class="token punctuation">,</span>    host    <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    port    <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">,</span>    method  <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>    path    <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    body    <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token punctuation">,</span>    thread  <span class="token operator">=</span> <span class="token operator">&lt;</span>userdata<span class="token operator">&gt;</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上定义了一个 table 类型的全局变量，修改该 wrk 变量，会影响所有请求。</p><p>方法：</p><ul><li>wrk.fomat</li><li>wrk.lookup</li><li>wrk.connect</li></ul><p>上面三个方法解释如下：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> wrk<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> path<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> body<span class="token punctuation">)</span>    wrk<span class="token punctuation">.</span>format returns a HTTP request string containing the passed parameters    merged with values from the wrk table<span class="token punctuation">.</span>    <span class="token operator">#</span> 根据参数和全局变量 wrk，生成一个 HTTP rquest 字符串。获取域名的IP和端口，返回table，例如：返回 `<span class="token punctuation">{</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">}</span>`<span class="token keyword">function</span> wrk<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> service<span class="token punctuation">)</span>    wrk<span class="token punctuation">.</span>lookup returns a table containing all known addresses <span class="token keyword">for</span> the host    <span class="token keyword">and</span> service pair<span class="token punctuation">.</span> This corresponds to the POSIX <span class="token function">getaddrinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">function</span><span class="token punctuation">.</span>    <span class="token operator">#</span> 给定 host 和 service（port<span class="token operator">/</span>well known service name），返回所有可用的服务器地址信息。<span class="token keyword">function</span> wrk<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>    wrk<span class="token punctuation">.</span>connect returns <span class="token keyword">true</span> <span class="token keyword">if</span> the address can be connected to<span class="token punctuation">,</span> otherwise    it returns <span class="token keyword">false</span><span class="token punctuation">.</span> The address must be one returned from wrk<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>    <span class="token operator">#</span> 测试给定的服务器地址信息是否可以成功创建连接，例如：`<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">80</span>`，返回 <span class="token keyword">true</span> 或 <span class="token keyword">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-通过-Lua-脚本压测示例"><a href="#4-4-2-通过-Lua-脚本压测示例" class="headerlink" title="4.4.2 通过 Lua 脚本压测示例"></a>4.4.2 通过 Lua 脚本压测示例</h4><h5 id="调用-POST-接口："><a href="#调用-POST-接口：" class="headerlink" title="调用 POST 接口："></a>调用 POST 接口：</h5><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">wrk.method = "POST"wrk.body   = "id=1&amp;name=zq"wrk.headers["Content-Type"] = "application/x-www-form-urlencoded"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意: wrk 是个全局变量，这里对其做了修改，使得所有请求都使用 POST 的方式，并指定了 body 和 Content-Type头。</p><h5 id="自定义每次请求的参数："><a href="#自定义每次请求的参数：" class="headerlink" title="自定义每次请求的参数："></a>自定义每次请求的参数：</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">request <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   uid <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000000</span><span class="token punctuation">)</span>   path <span class="token operator">=</span> <span class="token string">"/test?uid="</span> <span class="token operator">..</span> uid   <span class="token keyword">return</span> wrk<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 request 方法中，随机生成 1~10000000 之间的 uid，并动态生成请求 URL.</p><h5 id="每次请求前，延迟-10ms"><a href="#每次请求前，延迟-10ms" class="headerlink" title="每次请求前，延迟 10ms:"></a>每次请求前，延迟 10ms:</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">10</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="请求的接口需要先进行认证，获取-token-后，才能发起请求，咋办？"><a href="#请求的接口需要先进行认证，获取-token-后，才能发起请求，咋办？" class="headerlink" title="请求的接口需要先进行认证，获取 token 后，才能发起请求，咋办？"></a>请求的接口需要先进行认证，获取 token 后，才能发起请求，咋办？</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">token <span class="token operator">=</span> <span class="token keyword">nil</span>path  <span class="token operator">=</span> <span class="token string">"/auth"</span>request <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> wrk<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token keyword">end</span>response <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> body<span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token keyword">not</span> token <span class="token keyword">and</span> status <span class="token operator">==</span> <span class="token number">200</span> <span class="token keyword">then</span>      token <span class="token operator">=</span> headers<span class="token punctuation">[</span><span class="token string">"X-Token"</span><span class="token punctuation">]</span>      path  <span class="token operator">=</span> <span class="token string">"/test"</span>      wrk<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> token   <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的脚本表示，在 token 为空的情况下，先请求 /auth 接口来认证，获取 token, 拿到 token 以后，将 token 放置到请求头中，再请求真正需要压测的 /test 接口。</p><h5 id="压测支持-HTTP-pipeline-的服务："><a href="#压测支持-HTTP-pipeline-的服务：" class="headerlink" title="压测支持 HTTP pipeline 的服务："></a>压测支持 HTTP pipeline 的服务：</h5><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>   <span class="token keyword">local</span> r <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> wrk<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token string">"/?foo"</span><span class="token punctuation">)</span>   r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> wrk<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token string">"/?bar"</span><span class="token punctuation">)</span>   r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> wrk<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token string">"/?baz"</span><span class="token punctuation">)</span>   req <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">end</span>request <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> req<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过在 init 方法中将三个 HTTP请求拼接在一起，实现每次发送三个请求，以使用 HTTP pipeline。</p><h4 id="4-4-3-通过-Lua-测试脚本案例分析"><a href="#4-4-3-通过-Lua-测试脚本案例分析" class="headerlink" title="4.4.3 通过 Lua 测试脚本案例分析"></a>4.4.3 通过 Lua 测试脚本案例分析</h4><p>案例：我们线上有一个带缓存场景的接口服务，根据 uid 的值的查询结果缓存，所以，如果单纯对指定的 uid 压测，就变成了测试缓存系统的负载了，测试不出实际的服务性能，这个场景就需要测试工具发起每次请求的测试参数都是动态的。根据这个场景我们定制了如下的 lua 测试脚本：</p><p>测试指令：</p><pre class="line-numbers language-none"><code class="language-none">wrk -t16 -c100 -d5s -sreview_digress_list.lua --latency htt://127.0.0.1:8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Lua 脚本：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">wrk<span class="token punctuation">.</span>method <span class="token operator">=</span><span class="token string">"GET"</span>wrk<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token string">"/app/{uid}/review_digress_list"</span><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">-- 动态生成每个请求的url</span>    <span class="token keyword">local</span> requestPath <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">gsub</span><span class="token punctuation">(</span>wrk<span class="token punctuation">.</span>path<span class="token punctuation">,</span><span class="token string">"{uid}"</span><span class="token punctuation">,</span>math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">-- 返回请求的完整字符串：http://127.0.0.1/app/666/review_digress_list</span>    <span class="token keyword">return</span> wrk<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">,</span> requestPath<span class="token punctuation">)</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux，分布式，架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS系统上编译OpenJDK12并使用CLion调试</title>
      <link href="/2022/03/01/zai-macos-xi-tong-shang-bian-yi-openjdk12-bing-shi-yong-clion-diao-shi/"/>
      <url>/2022/03/01/zai-macos-xi-tong-shang-bian-yi-openjdk12-bing-shi-yong-clion-diao-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MAC-环境"><a href="#1-MAC-环境" class="headerlink" title="1. MAC 环境"></a>1. MAC 环境</h2><p>macOS Catalina 版本 10.15.6</p><h2 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h2><h3 id="2-1-获取源码"><a href="#2-1-获取源码" class="headerlink" title="2.1 获取源码"></a>2.1 获取源码</h3><p>直接通过页面下载 <a href="https://hg.openjdk.java.net/jdk/jdk12/">OpenJdk12源码压缩包</a> ，然后点击左边菜单中的 “Browse”，将显示如图的源码根目录页面。</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/openjdk-12-source-code.png" alt="openjdk12-source-code.png"></p><p>此时点击左边的 “zip” 链接即可下载打包好的源码。</p><h3 id="2-2-Bootstrap-JDK"><a href="#2-2-Bootstrap-JDK" class="headerlink" title="2.2 Bootstrap JDK"></a>2.2 Bootstrap JDK</h3><p>因为OpenJDK的各个组成部分有的是使用C++编写的,有的是使用Java编写的，因此编译这些Java代码需要使用到一个可用的JDK，官方称这个JDK为“Bootstrap JDK”，一般来说只需要比编译的JDK低一个版本，这里采用OpenJDK11，可以通过这个网址 jdk.java.net/archive/ 下载<br>记住一定要下载一个适合Mac平台的OpenJDK11。</p><p>1）<a href="https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_osx-x64_bin.tar.gz">下载 JDK 11</a></p><p>2）解压安装包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo tar -zxf /Users/zhangquan/Downloads/openjdk-11.0.2_osx-x64_bin.tar.gz -C /Library/Java/JavaVirtualMachines/ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）使用 jenv add 命令将 JDK 11 加入  jenv 中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ jenv add /Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我使用的Bootstrap JDK版本如下</p><pre class="line-numbers language-none"><code class="language-none">$ java -versionopenjdk version "11.0.2" 2019-01-15OpenJDK Runtime Environment 18.9 (build 11.0.2+9)OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3. 安装依赖"></a>3. 安装依赖</h2><p>用于生成shell脚本的工具,可以使软件包在不同的系统下都可以编译</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ brew install autoconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>字体引擎</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ brew install freetype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-1-XCode-和-Command-Line-Tools-for-Xcode"><a href="#3-1-XCode-和-Command-Line-Tools-for-Xcode" class="headerlink" title="3.1 XCode 和 Command Line Tools for Xcode"></a>3.1 XCode 和 Command Line Tools for Xcode</h3><p>这两个SDK提供了OpenJDK所需的编译器以及Makefile中用到的外部命令。一般电脑上都自带安装了。</p><p>验证 Xcode Command Line Tools 安装成功</p><pre class="line-numbers language-none"><code class="language-none">$ xcode-select -p /Library/Developer/CommandLineTools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Xcode 各版本下载地址<br><a href="https://xcodereleases.com/">https://xcodereleases.com/</a></p><p> Catalina 上运行的最新版本的 Xcode 是 Xcode 12.4 和命令行工具 12.4。</p><h2 id="4-编译jdk"><a href="#4-编译jdk" class="headerlink" title="4. 编译jdk"></a>4. 编译jdk</h2><p>源码下载好之后，我解压放到了 <code> /Users/zhangquan/jvm/jdk12-06222165c35f</code> 这个目录下，下面的命令均是在这个目录下执行的。</p><p>使用以下命令来查看编译参数帮助说明</p><pre class="line-numbers language-none"><code class="language-none">$ bash configure --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令进行编译检查</p><pre class="line-numbers language-none"><code class="language-none">bash configure \--with-boot-jdk='/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home' \--with-debug-level=slowdebug \--with-target-bits=64 \--disable-warnings-as-errors \--enable-dtrace \--with-jvm-variants=server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>–with-boot-jdk：指定Bootstrap JDK路径</li><li>–with-debug-level：编译级别,可选值为release、fastdebug、slowdebug和optimized,默认值为release,如果我们要调试的话,需要设定为fastdebug或者slowdebug,建议设置为slowdebug</li><li>–with-target-bits：指定编译32位还是64位的虚拟机</li><li>–disable-warnings-as-errors：避免因为警告而导致编译过程中断</li><li>–enable-dtrace：开启一个性能工具</li><li>–with-jvm-variants：编译特定模式下的虚拟机,一般这里编译server模式</li><li>–with-conf-name：指定编译配置的名称,如果没有指定,则会生成默认的配置名称macosx-x86_64-server-slowdebug,我这里采用默认生成配置</li></ul><p>报错</p><pre class="line-numbers language-none"><code class="language-none">configure: error: No xcodebuild tool and no system framework headers found, use --with-sysroot or --with-sdk-name to provide a path to a valid SDK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行</p><pre class="line-numbers language-none"><code class="language-none">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续执行 bash configure 得到如下配置成功的提示，并且输出调试级别，Java 虚拟机的模式、特性，使用的编译器版本等配置信息。</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/buid-success.png" alt="buid-success.pn"></p><h3 id="4-1-开始编译"><a href="#4-1-开始编译" class="headerlink" title="4.1  开始编译"></a>4.1  开始编译</h3><pre class="line-numbers language-none"><code class="language-none">$ make images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 “images” 是 “product-images” 编译目标（Target）的简写，这个目标的作用是编译出整个 JDK镜像，除了 “product-images”外，其他编译目标还有</p><ul><li>hotspot：只编译HotSpot虚拟机 </li><li>hotspot-<variant>：只编译特定模式的 HotSpot 虚拟机</variant></li><li>docs-image：产生 JDK 的文档镜像</li><li>test-image：产生 JDK 的测试镜像</li><li>all-images：相当于连续调用 product、docs、test 三个编译目标</li><li>bootcycle-images：编译两次 JDK，其中第二次使用第一次编译结果作为 Bootstrap JDK</li><li>clean：清理 make 命令产生的临时文件</li><li>dist-clean：清理make 和 configure 命令产生的临时文件</li></ul><p>在 configure 命令以及 make images 命令的执行过程 中，会在 “build/macosx-x86_64-server-slowdebug”目录 下产生如下目录结构</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">├── Makefile├── bootcycle-spec.gmk├── build.log├── buildjdk-spec.gmk├── buildtools  用于生成、存放编译过程中用到的工具├── compare.sh├── configure-support├── configure.log├── hotspot  HotSpot虚拟机编译的中间文件├── images 使用 make *-image 产生的镜像存放在这里├── jdk  编译后产生的 JDK 就放在这里├── make-support ├── spec.gmk└── support 存放编译时产生的中间文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译完成之后，进入 OpenJDK 源码的 “build/配置名称/jdk” 目录下就可以看到 OpenJDK 的完整编译结果了</p><p>验证编译成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ /Users/zhangquan/jvm/jdk12-06222165c35f/jdk12-06222165c35f/build/macosx-x86_64-server-slowdebug/jdk/bin/java -versionopenjdk version "12-internal" 2019-03-19OpenJDK Runtime Environment (slowdebug build 12-internal+0-adhoc.zhangquan.jdk12-06222165c35f)OpenJDK 64-Bit Server VM (slowdebug build 12-internal+0-adhoc.zhangquan.jdk12-06222165c35f, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-生成Compilation-Database"><a href="#4-2-生成Compilation-Database" class="headerlink" title="4.2 生成Compilation Database"></a>4.2 生成Compilation Database</h3><p>在配置CLion的时候,直接import编译好之后的jdk源码,你会发现头文件都是红色的,无法找到提示,是因为CLion生产的CMakeLists.txt有问题,如果想要解决这个问题就需要修改这个文件,很明显我不会修。<br>最后通过JetBrains说的利用Compilation Database (blog.jetbrains.com/clion/2020/…) 在CLion中构建OpenJDK解决了这个问题。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ make CONF=macosx-x86_64-server-slowdebug compile-commandsBuilding target 'compile-commands' in configuration 'macosx-x86_64-server-slowdebug'Updating compile_commands.jsonFinished building target 'compile-commands' in configuration 'macosx-x86_64-server-slowdebug'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行完该命令,就会在${source_root}/build/macosx-x86_64-server-slowdebug下生成compile_commands.json文件。</p><h2 id="5-Clion-导入源码"><a href="#5-Clion-导入源码" class="headerlink" title="5. Clion 导入源码"></a>5. Clion 导入源码</h2><h3 id="5-1-导入-project"><a href="#5-1-导入-project" class="headerlink" title="5.1 导入 project"></a>5.1 导入 project</h3><p>在导入project 之前先配置好 Toolchains</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/Toolchanis.png" alt="Toolchains"></p><p>配置好 Toolchains 后，通过 File -&gt; Open 功能，选中 ${source_root}/build/macosx-x86_64-server-slowdebug/compile_commands.json,As a project 打开，这样就导入了 Compilation Database 文件，接下来 CLion 开始进行索引。</p><p>这时候，你会发现你是看不到源码的，所以下面需要修改项目的根目录，通过 Tools -&gt; Compilation Database -&gt; Change Project Root 功能，选中你的源码目录，也就是 ${source_root}, 这样设置就可以在 CLion 中看到源代码啦。</p><pre class="line-numbers language-none"><code class="language-none">${source_root} 指的是 ~/jvm/jdk12-06222165c35f/jdk12-06222165c35f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-debug-之前配置"><a href="#5-2-debug-之前配置" class="headerlink" title="5.2 debug 之前配置"></a>5.2 debug 之前配置</h3><p>需要在 <code>Preferences --&gt; Build, Exceution, Deployment --&gt; Custom Build Targets</code> 配置构建目标</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/make.png" alt="make"></p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/clean.png" alt="clean"></p><p>通过这两个配置每次构建之前都会重新编译我们的 jdk, 修改 jvm 代码之后可以直接进行重新调试。</p><h3 id="5-3-debug-配置"><a href="#5-3-debug-配置" class="headerlink" title="5.3 debug 配置"></a>5.3 debug 配置</h3><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/debug_config.png" alt="debug_config"></p><p>Executable：选择 ${source_root}/build/macosx-x86_64-server-slowdebug/jdk/bin/java, 或者其它你想调试的文件，比如 javac；<br>Before luanch：这个下面新增的时候有一个 bug, 去掉就不会每次执行都去 Build, 节省时间，但其实 OpenJDK 增量编译的方式，每次 Build 都很快，所以就看个人选择了。</p><h3 id="5-4-debug"><a href="#5-4-debug" class="headerlink" title="5.4 debug"></a>5.4 debug</h3><p>在 <code>${source_root}/src/java.base/share/native/libjli/java.c</code>的 401 行打断点，点击 Debug, 然后 F9 放掉，</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/debug1.png" alt="debug1"></p><p>不出意外你会遇到下面这个问题</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/debug2.png" alt="debug2"></p><p>由于我们使用的 LLDB 进行 debug 的，所以在进入第一个断点的时候在 LLDB 下执行以下命令可以避免此类问题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pro hand -p true -s false SIGSEGV SIGBUS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/debug3.png" alt="debug3"></p><p>最终就可以看到 java -version 的输出效果如下<br><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/debug4.png" alt="debug4"></p><p>不过每次 debug 的时候都要输入这么一句就很麻烦，所以我们可以在 <strong>~/.lldbinit</strong> 文件中，使用如下命令，实现每次 Debug 时自动打个断点，然后输入 pro hand -p true -s false SIGSEGV SIGBUS, 最后继续执行后续流程，文件内容如下 (其中 main.c 文件的路径自行替换)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">breakpoint set --file /Users/zhangquan/jvm/jdk12-06222165c35f/jdk12-06222165c35f/src/java.base/share/native/launcher/main.c --line 98 -C "pro hand -p true -s false SIGSEGV SIGBUS" --auto-continue true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-5-与-Java-程序联合-debug"><a href="#5-5-与-Java-程序联合-debug" class="headerlink" title="5.5 与 Java 程序联合 debug"></a>5.5 与 Java 程序联合 debug</h3><p>上面演示的实际是 java -version 如何 debug, 那么如何做到通过自己编写的 java 代码作为程序入口来调试呢？</p><p>首先 java 代码如下 (我用 idea 编写的):</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/main.png" alt="main"></p><p>CLion 中配置如下</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/main2.png" alt="main2"></p><p>运行结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/main3.png" alt="main3"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>&lt;&lt;深入理解 Java 虚拟机：JVM 高级特性与最佳实践&gt;&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言中对链表的简单操作</title>
      <link href="/2021/12/09/c-yu-yan-zhong-dui-lian-biao-de-jian-dan-cao-zuo/"/>
      <url>/2021/12/09/c-yu-yan-zhong-dui-lian-biao-de-jian-dan-cao-zuo/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h3><p>链表（linked list）就是一个或多个节点的集合。链表中的每个节点通过指针连接在一起。程序通过指针访问链表中的节点。</p><h3 id="二、单链表"><a href="#二、单链表" class="headerlink" title="二、单链表"></a>二、单链表</h3><p>在单链表中，每个节点包含一个指向链表下一个节点的指针。链表的最后一个节点的指针字段值为<code>NULL</code>，表示链表后面不再有其他节点。</p><p>在你找到链表的第1个节点后，指针就可以带你访问剩余所有节点。为了记住链表的起始位置，可以使用一个根指针（root pointer）。根指针指向链表的第一个节点。</p><h3 id="三、单链表操作"><a href="#三、单链表操作" class="headerlink" title="三、单链表操作"></a>三、单链表操作</h3><p>以下所有例子中的节点的类型定义我们放在<strong>node.h</strong>，内容如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_NODE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_NODE_H</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">NODE</span> <span class="token punctuation">{</span>        <span class="token keyword">struct</span> <span class="token class-name">NODE</span> <span class="token operator">*</span>link<span class="token punctuation">;</span>        <span class="token keyword">int</span>             value<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* _NODE_H */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="向单链表表头插入节点"><a href="#向单链表表头插入节点" class="headerlink" title="向单链表表头插入节点"></a>向单链表表头插入节点</h4><p>我们简单的实现一个向链表表头插入节点的程序</p><p>例子：node.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"node.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 定义两个指向节点的指针变量 */</span>Node <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* 指向第一个节点的根指针 */</span>Node <span class="token operator">*</span>new<span class="token punctuation">;</span><span class="token comment">/* 指向动态分配内存的节点指针 */</span><span class="token comment">/* 动态分配内存，创建新结点 */</span>new <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>new <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 给新结点成员 value 赋值 */</span>new<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">/* 我们只是简单地向链表表头插入新节点 */</span>new<span class="token operator">-&gt;</span>link <span class="token operator">=</span> root<span class="token punctuation">;</span>root <span class="token operator">=</span> new<span class="token punctuation">;</span><span class="token comment">/* 再插入一个节点 */</span>new <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>new <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>new<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>new<span class="token operator">-&gt;</span>link <span class="token operator">=</span> root<span class="token punctuation">;</span>root <span class="token operator">=</span> new<span class="token punctuation">;</span><span class="token comment">/* 遍历链表 */</span>Node <span class="token operator">*</span>current <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[dendi875@192 list]$ ./node105<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>向链表中插入节点这种操作是经常被使用的，我们把上述步骤封装成一个函数</p><p>例子：node2.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"node.h"</span></span><span class="token keyword">static</span> Node <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pr_list</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>Node <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* 指向第一个节点的根指针 */</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pr_list</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 向链表的表头插入节点 * * 第一个参数是指向链表首节点的指针 * 第二个参数是新节点中 value 成员的值 * 如果插入成功返回指向新链表首节点的指针 */</span><span class="token keyword">static</span> Node <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>Node <span class="token operator">*</span>new<span class="token punctuation">;</span>new <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>new <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc failed in insert.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>new<span class="token operator">-&gt;</span>value <span class="token operator">=</span> n<span class="token punctuation">;</span>new<span class="token operator">-&gt;</span>link <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">return</span> new<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 遍历链表 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pr_list</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>current<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[dendi875@192 list]$ ./node215105<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从单链表中删除一个节点"><a href="#从单链表中删除一个节点" class="headerlink" title="从单链表中删除一个节点"></a>从单链表中删除一个节点</h4><p>我们简单的实现一个指定一个 <code>value</code>值，从链表中删除第一个包含该值的节点，返回删除后的新链表</p><p>例子：node3.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"node.h"</span></span><span class="token keyword">static</span> Node <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pr_list</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> Node <span class="token operator">*</span><span class="token function">delete</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>Node <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* 指向第一个节点的根指针 */</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root <span class="token operator">=</span> <span class="token function">delete</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pr_list</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 向链表的表头插入节点 * * 第一个参数是指向链表首节点的指针 * 第二个参数是新节点中 value 成员的值 * 如果插入成功返回指向新链表首节点的指针 */</span><span class="token keyword">static</span> Node <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>Node <span class="token operator">*</span>new<span class="token punctuation">;</span>new <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>new <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"malloc failed in insert.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>new<span class="token operator">-&gt;</span>value <span class="token operator">=</span> n<span class="token punctuation">;</span>new<span class="token operator">-&gt;</span>link <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token keyword">return</span> new<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 遍历链表 */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pr_list</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>current<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 指定一个 n 值，从链表中删除第一个包含该值的节点，返回删除后的新链表 */</span><span class="token keyword">static</span> Node <span class="token operator">*</span><span class="token function">delete</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>Node <span class="token operator">*</span>current<span class="token punctuation">,</span> <span class="token operator">*</span>previous<span class="token punctuation">;</span>current <span class="token operator">=</span> root<span class="token punctuation">;</span>previous <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">-&gt;</span>value <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>previous <span class="token operator">=</span> current<span class="token punctuation">;</span>current <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* 链表中没有一个节点的 value 值等于n */</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* 链表中第一个节点的 value值就等于n */</span>root <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">/* 其它位置找到了这样的节点 */</span>previous<span class="token operator">-&gt;</span>link <span class="token operator">=</span> current<span class="token operator">-&gt;</span>link<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">free</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[dendi875@192 list]$ ./node3             155<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言中字符串处理函数</title>
      <link href="/2021/12/09/c-yu-yan-zhong-zi-fu-chuan-chu-li-han-shu/"/>
      <url>/2021/12/09/c-yu-yan-zhong-zi-fu-chuan-chu-li-han-shu/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="一、字符串基础"><a href="#一、字符串基础" class="headerlink" title="一、字符串基础"></a>一、字符串基础</h2><ul><li>字符串可以当作以<strong>空字符</strong>结尾的字符数组。</li></ul><p>空字符：一个所有位都为0的字节，因此用转义序列<code>\0</code>来表示。注意不要混淆空字符<code>'\0'</code>和零字符<code>'0'</code>。空字符的<code>ASCII</code>值为<code>0</code>，而零字符的码值为<code>48</code>。</p><ul><li>字符串长度就是它所包含的字符个数但不包括<strong>空字符</strong></li><li>字符串常量是用一对引号括起来的字符序列，在程序执行过程中保持不变的数据</li><li>字符串变量可以在程序运行过程中发生改变</li></ul><h2 id="二、字符串处理函数"><a href="#二、字符串处理函数" class="headerlink" title="二、字符串处理函数"></a>二、字符串处理函数</h2><h3 id="计算字符串长度"><a href="#计算字符串长度" class="headerlink" title="计算字符串长度"></a>计算字符串长度</h3><p>库函数<code>strlen</code>的原型如下：</p><p><code>size_t strlen(const char *s);</code></p><p>注意strlen返回一个类型为size_t的值，这个类型是一个无符号整数类型。在表达式中使用无符号数可能导致不可预料的结果。例如，下面两个表达式看上去是相等的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但事实上它们是不相等的。第一条语句将按照预想的那样工作，但第2条语句的结果将永远是真值。strlen的结果是个无符号数，所以操作符<code>&gt;=</code>左边的表达式也将是无符号数，而无符号数绝不可能是负的。</p><h3 id="不受限制的字符串函数"><a href="#不受限制的字符串函数" class="headerlink" title="不受限制的字符串函数"></a>不受限制的字符串函数</h3><ul><li>复制字符串</li></ul><p><code> char *strcpy(char *dest, const char *src);</code></p><p>这个函数把参数src字符串复制到dest参数。如果参数src和dest在内在中出现重叠，其结果是未定义的。由于dst参数将进行修改，所以它必须是个字符数组或一个指向动态分配内存的数组的指针，<strong>不能使用字符串常量</strong>。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">"Original message"</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"Different"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"message = %s\n"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">message = Different<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组<code>message</code>将包含下面的内容</p><pre class="line-numbers language-none"><code class="language-none">char message[] = {'D', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 't', '\0', 'e', 's', 's', 'a', 'g', 'e', '\0'};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个<strong>空字符</strong>后面的几个字符再也无法被字符串函数访问，从现实的角度看，它们已经是丢失的了。</p><ul><li>连接字符串</li></ul><p><code> char *strcat(char *dest, const char *src);</code></p><p>要想把一个字符串添加（连接）到另一个字符串后面，可以使用<code>strcat</code>函数。</p><p>函数<code>strcat</code>要求<code>dest</code>参数原先已经包含一个空字符（可以是空字符串）。它找到这个字符串的未尾，并把<code>src</code>字符串的一份拷贝添加到这个位置。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"message = %s\n"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">message <span class="token operator">=</span> hello string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>比较字符串</li></ul><p><code>int strcmp(const char *s1, const char *s2);</code></p><p>比较两个字符串时涉及对两个字符串对应的字符逐个比较，直到发现不匹配为止。采用的是<strong>字典比较</strong>，如果<code>s1</code>小于<code>s2</code>，返回一个小于零的值。如果<code>s1</code> 大于<code>s2</code>，返回一个大于零的值，如果两个字符串相等，返回零。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种写法是错误的，如果想要比较两个字符串相等，应该把返回值与零进行比较。</p><h3 id="长度受限的字符串函数"><a href="#长度受限的字符串函数" class="headerlink" title="长度受限的字符串函数"></a>长度受限的字符串函数</h3><pre class="line-numbers language-none"><code class="language-none">char *strncpy(char *dest, const char *src, size_t n);char *strncat(char *dest, const char *src, size_t n);int strncmp(const char *s1, const char *s2, size_t n);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这些函接受一个显式的长度参数，用于限定进行复制或连接或比较的字符数。这些函数提供了一种方便的机制，可以防止难以预料的长字符串从它们的目标数组溢出。</p><h3 id="字符串查找函数"><a href="#字符串查找函数" class="headerlink" title="字符串查找函数"></a>字符串查找函数</h3><ul><li>查找一个字符</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strchr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数<code>strchr</code>在字符串s中查找字符c第1次出现的位置，找到后函数返回一个指向该位置的指针。如果该字符并不存在字符串中，函数就返回一个<code>NULL</code>指针。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Form follows function."</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* finds first 'f' */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p <span class="token operator">=</span> follows function<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数<code>strrchr</code>和<code>strchr</code>类似，但它会反向搜索字符。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Form follows function."</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* finds last 'f' */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p <span class="token operator">=</span> function<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查找任何几个字符 </li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strpbrk</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>accept<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数<code>strpbrk</code>它并不查找某个特定的字符，而是查找任何一组字符第1次在字符串中出现的位置，它返回一个指向<code>s</code>中第一个匹配<code>accept</code>中任何一个字符的字符位置。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Form follows function."</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"mn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p <span class="token operator">=</span> m follows function<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查找一个子串</li></ul><pre class="line-numbers language-none"><code class="language-none">char *strstr(const char *haystack, const char *needle);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数<code>strstr</code>在第一个参数中查找第二个参数第1次出现的起始位置，并返回一个指向该位置的指针。如果<code>needle</code>并没有完整地出现在<code>haystack</code>的任何地方，函数将返回<code>NULL</code>，如果第二个参数是一个空字符串，函数就返回<code>haystack</code>。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Form follows function."</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p <span class="token operator">=</span> function<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查找一个字符串前缀</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">strspn</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>accept<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> <span class="token function">strcspn</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>函数<code>strspn</code>返回字符串中第一个<strong>不属于</strong>该组字符的<strong>字符的下标</strong>。<code>strcspn</code>函数返回第一个<strong>属于</strong>该组字符的<strong>字符的下标</strong>。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> n<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Form follows function."</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"Form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* n = 4 */</span> n <span class="token operator">=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">" \t\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* n = 0 */</span>n <span class="token operator">=</span> <span class="token function">strcspn</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"Form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* n = 0 */</span>n <span class="token operator">=</span> <span class="token function">strcspn</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">" \t\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* n = 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查找标记</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>delim<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数<code>strtok</code>目的是在字符串中搜索一个<strong>记号</strong>（就是一系列不包含特定分隔字符的字符）。调用<code>strtok(s1, s2)</code>它会在<code>s1</code>中搜索不包含在<code>s2</code>中的非空字符序列。<code>strtok</code>函数会在记号末尾的字符后面存储一个空字符作为<strong>标记</strong>，然后返回一个指针指向记号的首字符。</p><p>strtok函数最有用的特点是以后可以调用strtok函数在同一字符串中搜索更多的记号。调用<code>strtok(NULL, s2)</code>就可以继续上一次的strtok函数调用。和上一次调用一样，strtok函数会用一个空字符来标记新的记号的末尾，然后返回一个指向新记号的首字符的指针。这个过程可以持续进行，直到strtock函数返回空指针，这表明找不到符合要求的记号。</p><p>一个提取年月日的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> <span class="token operator">*</span>month<span class="token punctuation">,</span> <span class="token operator">*</span>day<span class="token punctuation">,</span> <span class="token operator">*</span>year<span class="token punctuation">;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" April  28,1998"</span><span class="token punctuation">;</span> <span class="token comment">/* 月与日之间以空格或制表符分隔，逗号之前可能有空格或制表符 */</span>        month <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    day <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" \t,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    year <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"month = %s, day = %s, year = %s\n"</span><span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str = %s\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">month <span class="token operator">=</span> April<span class="token punctuation">,</span> day <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">,</span> year <span class="token operator">=</span> <span class="token number">1998</span>str <span class="token operator">=</span> April<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、内存操作函数"><a href="#三、内存操作函数" class="headerlink" title="三、内存操作函数"></a>三、内存操作函数</h2><ul><li> <code>void *memcpy(void *dest, const void *src, size_t n);</code></li></ul><p>函数<code>memcpy</code>从src的起始位置复制n个字节到dest的内存起始位置。可以用该函数复制任何类型的值，如果src和dest内存出现了重叠则结果是未定义的。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>         <span class="token function">memcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> a <span class="token operator">+</span> SIZE<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>void *memmove(void *dest, const void *src, size_t n);</code></li></ul><p>函数memmove功能与memcpy相同，但它能够正确处理源参数和目标参数内存出现重叠的情况。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>         <span class="token function">memmove</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> a <span class="token operator">+</span> SIZE<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>int memcmp(const void *s1, const void *s2, size_t n);</code></li></ul><p>函数memcmp对两段内存的内容进行比较，这两段内存分别起始于s1和s2，共比较n个字节。这些值按照无符号字符逐个字节进行比较，函数返回类型与strcmp一样。由于这些值是根据一串无符号字节进行比较的，所以如果memcmp函数用于比较不是单字节的数据（如整数或浮点数）就可能会现出不可预料的结果。</p><ul><li><code>void *memchr(const void *s, int c, size_t n);</code></li></ul><p>函数memchr从s的起始位置开始查找字符c第1次出现的位置，并返回一个指向该位置的指针，它共查找n个字节。</p><ul><li><code>void *memset(void *s, int c, size_t n);</code></li></ul><p>函数memset函数把s开始的n个字节都设置为字符c。</p><p>例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>         <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> a <span class="token operator">+</span> SIZE<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言中数组并非指针</title>
      <link href="/2021/12/09/c-yu-yan-zhong-shu-zu-bing-fei-zhi-zhen/"/>
      <url>/2021/12/09/c-yu-yan-zhong-shu-zu-bing-fei-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="数组并非指针"><a href="#数组并非指针" class="headerlink" title="数组并非指针"></a>数组并非指针</h1><hr><h2 id="一、什么是声明，什么是定义"><a href="#一、什么是声明，什么是定义" class="headerlink" title="一、什么是声明，什么是定义"></a>一、什么是声明，什么是定义</h2><p>首先我们回顾下<code>C</code>语言中的声明和定义概念。</p><ul><li>定义</li></ul><p>只能出现在一个地方。定义它确定对象的类型并分配内存，用于创建新的对象。例如：<code>int a[100];</code></p><ul><li>声明</li></ul><p>可以出现多次。声明它描述了对象的类型，用于指代其他地方定义的对象（例如在其它文件里）。例如：<code>extern int a[];</code></p><p>记住C语言中的对象（比如函数和变量）必须有且只有一个定义，但它可以有多个<strong>extern</strong>声明。</p><p>extern对象的声明告诉编译器对象的类型和名字，对象的内存分配则在别处进行。由于并未在声明中为数组分配内存，所以并不需要提供关于数组长度的信息。对于多维数组，需要提供除左边一维之外其它维的长度。 </p><p>指针的外部声明与数组定义不匹配会导致出错，例如下面的示例：</p><p>文件 a.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件 b.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"a.c"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译并运行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[dendi875@localhost Temp]$ gcc -g b.c -o bb.c: 在函数‘main’中:b.c:6: 错误：与‘a’类型冲突a.c:1: 附注：‘a’的上一个定义在此<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实要修正这个错误很容易，只要使声明与定义保持一致就行。</p><p>修改后的 b.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"a.c"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件 a.c 中 <code>int a[100]</code> 表示定义了 a 数组并分配了100个<code>int</code>的空间，而 <code>int *p</code> 则表示申请一个地址来装该指针。指针的名字是 p，它可以指向任何一个 <code>int</code>变量（或int型数组）。指针变量 p 本身始终位于同一个地址，但它的内容在任何时候都可以不同，指向不同地址的 int 变量。这些不同的 int 变量可以有不同的值。<code>int a[100]</code>中数组a的地址并不能改变，在不同的时候它的内容可以不同，但它总是表示100个连续的内存空间。</p><h2 id="二、数组并非指针"><a href="#二、数组并非指针" class="headerlink" title="二、数组并非指针"></a>二、数组并非指针</h2><p>我们经常听到过<strong>数组和指针是相同的</strong>这种说法，但其实这种说明并非完全正确，确实存在一种指针和数组的定义完全相同的上下文环境，但这只是数组的一种极为普通的用法，并非所有情况下都是如此。但是，人们却自然而然地归纳并假定在所有的情况下数组和指针都是等同的。我们分析下面两个小例子</p><p>a.c</p><pre class="line-numbers language-a.c" data-language="a.c"><code class="language-a.c">#include &lt;stdio.h&gt;int main(int argc, char **argv){char p[] = "abcd";printf("%c\n", p[0]);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译并运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[dendi875@localhost Temp]$ gcc -g a.c -o a[dendi875@localhost Temp]$ ./aa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>p.c</p><pre class="line-numbers language-p.c" data-language="p.c"><code class="language-p.c">#include &lt;stdio.h&gt;int main(int argc, char **argv){char *p = "abcd";printf("%c\n", p[0]);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译并运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[dendi875@localhost Temp]$ gcc -g p.c -o p[dendi875@localhost Temp]$ ./pa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面两个例子分别对数组和指针使用了下标的访问，它们都能正常运行并结果一致。但就是这种情况让我们错误的认为数组和指针完全相同。</p><p>下面我们分析下数组和指针是如何访问的</p><h3 id="对数组下标的引用"><a href="#对数组下标的引用" class="headerlink" title="对数组下标的引用"></a>对数组下标的引用</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译器编译时为 p 变量分配了一个地址假设为 7321，上面的代码运行时分为两个步骤：</p><ul><li><p>运行时步骤1：取 i 的值，将它与 7321 相加</p></li><li><p>运行时步骤2：取地址（7321 + 1）的内容</p></li></ul><p>数组的这种引用方式是对内存的直接引用</p><h3 id="对指针进行下标的引用"><a href="#对指针进行下标的引用" class="headerlink" title="对指针进行下标的引用"></a>对指针进行下标的引用</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译器编译时为p变量分配了一个地址假设为 1237，上面的代码运行时分为三个步骤：</p><ul><li><p>运行时步骤1：取地址 1237 的内容，假设为 8352</p></li><li><p>运行时步骤2：取得i的值，并将它与 8352 相加</p></li><li><p>运行时步骤3：取地址（8352 + 1）的内容</p></li></ul><p>指针的这种引用方式是对内存间接的引用</p><h2 id="三、数组和指针的其它区别"><a href="#三、数组和指针的其它区别" class="headerlink" title="三、数组和指针的其它区别"></a>三、数组和指针的其它区别</h2><table><thead><tr><th>指针</th><th align="center">数组</th></tr></thead><tbody><tr><td>保存数据的地址</td><td align="center">保存数据</td></tr><tr><td>间接访问数据，首先取得指针的内容，把它作为地址，然后从这个地址提取数据。<br>如果指针有一个下标 p[i] ，就把指针的内容加上 i 作为地址，从中提取数据</td><td align="center">直接访问数据，a[i] 只是简单地以 a + i 为地址取得数据</td></tr><tr><td>通常用于动态数据结构</td><td align="center">通常用于存储固定数目且数据类型相同的元素</td></tr><tr><td>相关的函数 malloc，free等</td><td align="center">隐式分配和删除</td></tr><tr><td>通常指向匿名数据</td><td align="center">自身即为数据名</td></tr></tbody></table><p>数组和指针都可以在它们的定义中用字符串常量进行初始化。尽管看上去一样，底层机制却不相同。</p><p>定义指针</p><pre class="line-numbers language-none"><code class="language-none">char *p;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义数组</p><pre class="line-numbers language-none"><code class="language-none">char buff[4096];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义指针时，编译器并不为指针所指向的对象分配空间，它只是分配指针本身的空间，除非在定义的同时赋给指针一个字符串常量进行初始化。例如，下面的定义创建了一个字符串常量（为其分配了内存）</p><pre class="line-numbers language-none"><code class="language-none">char *p = "abcd";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>只有对字符串常量才能这样，如浮点数就不行</p><pre class="line-numbers language-none"><code class="language-none">float *pi = 3.14; /* 错误，无法通过编译 */<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在ANSI C中，初始化指针时所创建的字符串常量被定义为只读。如果试图通过指针修改这个字符串的值，程序就会出现未定义的行为</li></ul><p>例如文件 p.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span> <span class="token comment">// 运行时会导致段错误 (core dumped)</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span>   <span class="token comment">// 同样的运行时会导致段错误 (core dumped)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>与指针相反，由字符串初始化的数组是可以修改的</li></ul><p>例如文件 a.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s = %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译并运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[dendi875@localhost Temp]$ gcc -g a.c -o a[dendi875@localhost Temp]$ ./as = xbcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数组 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C和指针（二）</title>
      <link href="/2021/12/09/c-he-zhi-zhen-er/"/>
      <url>/2021/12/09/c-he-zhi-zhen-er/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="一、数组指针"><a href="#一、数组指针" class="headerlink" title="一、数组指针"></a>一、数组指针</h2><p>数组指针就是指向数组的指针。首先它是一个指针，这个指针指向的是一个数组。</p><ul><li>例子1</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> calendar<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以把calendar看成是一个有12个元素的数组，每个元素又是一个有着31个整型元素的数组。可以把calendar当作一个二维数组，也可以把它当作一维数组组成的一维数组。</p><ul><li>例子2</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> calendar<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>monthp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> calendar<span class="token punctuation">;</span> <span class="token comment">// 等价于 int (*monthp)[31] = &amp;calendar[0]; </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>monthp是<strong>数组指针</strong>。它是一个指向拥有31个整型元素的数组的指针。monthp指向了数组calendar的第一个元素（保存了数组第一个元素的地址）。<code>*monthp</code>是一个佣有31个整型元素的数组（可以想象为<code>int a[31];</code>中的<code>a</code>）</p><p>比如新的一年开始时，需要对calendar数组进行清空。下面展示几种不同的实现方式。</p><ul><li>calendar.c</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> calendar<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> month<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>month <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> month <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> month<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> day <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> day<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>calendar<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">[</span>day<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// *(calendar[month] + day) = 0;</span><span class="token comment">// *(*(calendar + month) + day) = 0;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是用数组取下标的方式。<code>calendar[month][day] = 0;</code>等价于<code>*(calendar[month] + day) = 0;</code>，也等价于<code>*(*(calendar + month) + day) = 0;</code></p><ul><li>calendar2.c</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> calendar<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>monthp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>monthp <span class="token operator">=</span> calendar<span class="token punctuation">;</span> monthp <span class="token operator">&lt;</span> calendar <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span> monthp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> day <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> day<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>monthp <span class="token operator">+</span> day<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是用<strong>数组指针</strong>的方式来遍历数组calendar。<br>其中<code>for</code>语句中的<code>monthp = calendar; monthp &lt; calendar + 12; monthp++</code>可以换成<code>monthp = &amp;calendar[0]; monthp &lt; &amp;calendar[0] + 12; monthp++</code>。</p><ul><li>calendar3.c</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> calendar<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>monthp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>monthp <span class="token operator">=</span> calendar<span class="token punctuation">;</span> monthp <span class="token operator">&lt;</span> calendar <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span> monthp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token operator">*</span>dayp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>dayp <span class="token operator">=</span> <span class="token operator">*</span>monthp<span class="token punctuation">;</span> dayp <span class="token operator">&lt;</span> <span class="token operator">*</span>monthp <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">;</span> dayp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span>dayp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像用指针的方式遍历一维数组那样，用指针来遍历<code>*monthp</code>。<br>内层的<code>for</code>语句中的<code>dayp = *monthp; dayp &lt; *monthp + 31; dayp++</code>可以换成<code>dayp = &amp;(*monthp)[0]; dayp &lt; &amp;(*monthp)[0] + 31; dayp++</code>，也可以换成<code>dayp = *monthp; dayp &lt; &amp;(*monthp)[31]; dayp++</code></p><h2 id="二、指针数组"><a href="#二、指针数组" class="headerlink" title="二、指针数组"></a>二、指针数组</h2><p>指针数组它的类型是一个数组，数组中每个元素是一个指针。</p><p>我们用一个<strong>二维字符数组</strong>来说明下，C中的字符串可以当作以<code>NULL</code>字符结尾的<strong>一维字符数组</strong>，如下面的例子</p><ul><li>一维字符数组</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两种写法是等价的。但与<code>char *message = "hello";</code>还是有区别的，</p><pre class="line-numbers language-char" data-language="char"><div class="caption"><span>message[]```声明message是一个**数组**，```char *message```声明message是一个**指针**。</span></div><code class="language-char">- 二维字符数组```cconst char keyword[][9] = {{'a', 'u', 't', 'o', '\0',  '\0',  '\0',  '\0', '\0'},{'s', 't', 'a', 't',  'i',   'c',  '\0',  '\0', '\0'},{'e', 'x', 't', 'e',  'r',  'n',  '\0',  '\0', '\0'},{'r', 'e', 'g', 'i',  's',   't',   'e',   'r', '\0'},{'c', 'o', 'n', 's',  't',  '\0',  '\0',  '\0', '\0'},{'r', 'e', 's', 't',  'r',   'i',   'c',   't', '\0'},{'v', 'o', 'l', 'a',  't',   'i',   'l',   'e', '\0'},};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> keyword<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"auto"</span><span class="token punctuation">,</span><span class="token string">"static"</span><span class="token punctuation">,</span><span class="token string">"extern"</span><span class="token punctuation">,</span><span class="token string">"register"</span><span class="token punctuation">,</span><span class="token string">"const"</span><span class="token punctuation">,</span><span class="token string">"restrict"</span><span class="token punctuation">,</span><span class="token string">"volatile"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这两种写法也是等价的，它们都可以当作<strong>二维字符数组</strong>，数组中每个元素是一个一维字符数组，或者每个元素以字符串的方式存储在数组中。</p><ul><li>指针数组</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>keyword<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"auto"</span><span class="token punctuation">,</span><span class="token string">"static"</span><span class="token punctuation">,</span><span class="token string">"extern"</span><span class="token punctuation">,</span><span class="token string">"register"</span><span class="token punctuation">,</span><span class="token string">"const"</span><span class="token punctuation">,</span><span class="token string">"restrict"</span><span class="token punctuation">,</span><span class="token string">"volatile"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>kwp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>kwp <span class="token operator">=</span> keyword<span class="token punctuation">;</span> <span class="token operator">*</span>kwp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> kwp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>kwp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种声明方式表示keyword是个数组，数组中每个元素是一个指向字符的指针。所以keyword是<strong>指针数组</strong>。它比<strong>二维字符数组</strong>声明方式更节约内存，特意数组最后加一个<code>NULL</code>指针，是为了可以在遍历是不需要知道数组的长度。</p><h2 id="三、函数指针"><a href="#三、函数指针" class="headerlink" title="三、函数指针"></a>三、函数指针</h2><p>函数指针就是指向函数的指针。它是一个指针，这个指针指向的是一个函数。</p><ul><li>pf.c</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/* 声明函数指针并初始化 */</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token comment">// 或者 int (*pf)(int, int) = &amp;f;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span>        <span class="token comment">/* 三种方式调用函数 */</span>result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">pf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result = %d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子是<code>pf</code>就是一个函数指针，这个指针指向的是一个函数，这个函数需要满足有两个整型参数，返回值是整型。关于函数指针需要注意：</p><p>1）声明一个函数指针并不意味着它马上可以使用。和其它指针一样，对函数指针执行间接访问之前必须它把初始化为指向某个函数。</p><p>2）在函数指针初始化之前具有<code>f</code>的原型是很重要的，否则编译器就无法检查<code>f</code>的类型是否与<code>pf</code>所指向的类型一致（参数的个数、参数的类型、返回值的类型）</p><p>3）上面三种函数调用方式是等价的，<code>pf</code>是指向函数的指针，<code>(*pf)</code>就是<code>pf</code>所指向的那个函数。<code>(*pf)()</code>调用方式相比于<code>pf()</code>调用方式能提醒程序员<code>pf</code>是个函数指针而不是函数名。</p><p>提示：</p><p>函数它也像变量一样占用内存单元，所以每个函数都有一个地址，就像每个变量都有地址一样。C语言把指向函数的指针当作指向其它数据类型的指针一样对待，可以把它存储到变量中，或者可以当作数组的元素，或者作为结构或联合的成员，或者可以当前函数的参数或返回值。</p><ul><li>函数指针的用途<strong>回调函数</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span><span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token function">add_to_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token function">search_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>compare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">compare_ints</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>first <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> expected_value <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>first <span class="token operator">=</span> <span class="token function">add_to_list</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>first <span class="token operator">=</span> <span class="token function">add_to_list</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>first <span class="token operator">=</span> <span class="token function">add_to_list</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">search_list</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">&amp;</span>expected_value<span class="token punctuation">,</span> compare_ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Node value：%d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Node not found.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 在链表开始处插入一个结点 * * @param  first 指向旧链表首结点的指针 * @param  value    需要存储到新结点的值 * @return new_node 返回指向新结点的指针 */</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token function">add_to_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>new_node<span class="token punctuation">;</span>new_node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>new_node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"malloc error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>new_node<span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>new_node<span class="token operator">-&gt;</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span><span class="token keyword">return</span> new_node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 在一个单向链表中查找一个指定的值，第一个参数是指向链表首结点的指针， * 第二个参数是需要查找的值，第三个参数是函数指针。 * 这个函数查找存在结点中的值与类型无关，可以查找整型，字符串等 */</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span><span class="token function">search_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>compare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> first<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>value<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">compare_ints</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> p <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> p <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、指针函数"><a href="#四、指针函数" class="headerlink" title="四、指针函数"></a>四、指针函数</h2><p>指针函数就是返回值为指针的函数。</p><ul><li>max.c <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>x <span class="token operator">&gt;</span> <span class="token operator">*</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>max函数就是一个指针函数，它返回值的类型是一个指向整型的指针。</li></ul><p>max函数还可以返回指向外部变量的指针</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>z<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>max函数还可以返回指向函数内部声明为<code>static</code>变量的指针。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、typedef定义函数指针类型"><a href="#五、typedef定义函数指针类型" class="headerlink" title="五、typedef定义函数指针类型"></a>五、typedef定义函数指针类型</h2><p>可以用<code>typedef</code>来<strong>定义函数指针</strong>，然后简化一些复杂的定义。比如C中的的信号处理函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用<code>typedef</code>定义函数指针，简化上面的定义</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef void (*sighandler_t)(int);sighandler_t signal(int signum, sighandler_t handler);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>typedef定义函数指针类型的一个例子</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;typedef double (*ptrfun)(double, double);double add(double x, double y);int main(void){ptrfun pf = add;printf("%f\n", (*pf)(3.1415, 1.1111));return 0;}double add(double x, double y){return x + y;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ptrfun```是自定义的数据类型，可以像其它数据类型一样用来定义变量，或定义函数的返回值，或定义函数参数等，只不过```ptrfun```定义的变量是**指向函数的指针类型**。可以理解为像```int" data-language="ptrfun```是自定义的数据类型，可以像其它数据类型一样用来定义变量，或定义函数的返回值，或定义函数参数等，只不过```ptrfun```定义的变量是**指向函数的指针类型**。可以理解为像```int"><div class="caption"><span>*```定义的变量是指向整型的指针类型一样。</span></div><code class="language-ptrfun```是自定义的数据类型，可以像其它数据类型一样用来定义变量，或定义函数的返回值，或定义函数参数等，只不过```ptrfun```定义的变量是**指向函数的指针类型**。可以理解为像```int">```cint *p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ptrfun```和```int" data-language="ptrfun```和```int"><div class="caption"><span>*```类似都是指向某种类型的指针。一个是指向函数的指针，一个是指针整型的指针。</span></div><code class="language-ptrfun```和```int">## 六、typedef定义函数类型可以用typedef来**定义函数**，然后简化一些复杂的定义。比如C中的信号处理函数```signal``````cvoid (*signal(int signum, void (*func)(int)))(int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>typedef</code>定义函数，来简化上面的定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">Sigfunc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sigfunc <span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> Sigfunc <span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>typedef定义函数类型的一个例子</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">double</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Fun <span class="token operator">*</span>pf <span class="token operator">=</span> add<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> <span class="token function">pf</span><span class="token punctuation">(</span><span class="token number">3.1415</span><span class="token punctuation">,</span> <span class="token number">1.1111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>Fun pf = add;</code>这是错误的，因为<code>add</code>是<strong>函数指针</strong>，而Fun的类型是<strong>函数</strong>;</p><p>使用<code>typedef</code>定义的Fun是函数。可以把它理解成像定义了整型一样：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token class-name">int_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用<code>Fun</code>来定义指针变量和用<code>int_t</code>来定义指针变量一样都要加<code>*</code>号。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">int_t</span> <span class="token operator">*</span>pi<span class="token punctuation">;</span>Func <span class="token operator">*</span>pf<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数组 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C和指针（一）</title>
      <link href="/2021/12/09/c-he-zhi-zhen-yi/"/>
      <url>/2021/12/09/c-he-zhi-zhen-yi/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="一、声明指针"><a href="#一、声明指针" class="headerlink" title="一、声明指针"></a>一、声明指针</h2><ul><li>例子1</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面语句的意思是声明i为一个整型变量，声明p为一个指向整型的指针，并且取i的地址对该指针进行初始化。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">&amp;</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的意思是把值2赋值给变量i与<code>i=2;</code>作用相同。我们来分析下，首先<code>&amp;</code>操作符产生i的地址，它是一个指针常量（我们并不需要知道这个指针常量的实际值）。接着，<code>*</code>操作符对其操作数执行间接访问操作，这个操作数就是i的地址。所以值2就存储于i中。</p><p><strong>注意</strong>：这里需要说明的是<code>*</code>号根据所处的上下文环境不同，它表示的含义也不一样。在声明中<code>int *p = &amp;i;</code>，其<code>*</code>号作用是指明p的类型以便告诉编译器p是一个指向int类型的变量指针，而在语句中（比如<code>*&amp;i = 2;</code>），<code>*</code>号会执行间接访问操作。</p><ul><li>例子2</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span>    b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>人们会很自然的认为这条语句把所有三个变量声明为指向整型的指针，但其实<code>*</code>号只对b有用。b是一个整型指针，其余两个只是普通的整型。要声明三个指针正确的应该是这样：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token operator">*</span>d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例子3</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>message <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条语句把message声明为一个指向字符的指针，并用字符串常量中第1个字符的地址对该指针进行初始化。<br><strong>注意</strong>：千万不要误认为是对<code>*message</code>赋值，事实上它是赋值给<code>message</code>本身。等价于下面的声明</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>message<span class="token punctuation">;</span>message <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>例子4</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>ptr_to_char<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条语句意思是把变量ptr_to_char声明为一个指向字符的指针。但添加<code>typedef</code>声明变为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr_to_char<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个声明把ptr_to_char作为<strong>指向字符的指针类型</strong>的新名字，可以像其它预定义类型的名字一样用它来声明变量。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ptr_to_char a <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：没有<code>typedef</code>时ptr_to_char是一个变量，有<code>typedef</code>时ptr_to_char是一种新的数据类型名字，像<code>int</code>，<code>char</code> 一样可以用来声明变量。<code>ptr_to_char</code>声明的变量是指向字符的指针。</p><ul><li>例子5</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">/* 错误的 */</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>j<span class="token punctuation">;</span> <span class="token comment">/*合法的 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为函数<code>f</code>有<code>const</code>进行了限定（只读不能修改），不能改变指针p所指向的对象，但是可以改变p本身。</p><ul><li>例子6</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">/* 合法的 */</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>j<span class="token punctuation">;</span> <span class="token comment">/* 错误的 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>const</code>放到了参数名的前面，那么不能改变p本身，但可以改变p所指向的对象。这个特性不经常用到。</p><h2 id="二、NULL指针"><a href="#二、NULL指针" class="headerlink" title="二、NULL指针"></a>二、NULL指针</h2><p>NULL是一个特殊的指针变量，表示不指向任何东西。<code>NULL</code>指针的概念是非常有用的，它可以赋值给一个任何类型的指针，用于表示那个指针目前并未指向任何东西。</p><p>对指针进行间接访问操作（<code>*</code>）可以获得它所指向的值。但从定义上看，NULL指针并未指向任何东西。因此对一个<code>NULL</code>指针进行间接访问操作是非法的。<strong>在对指针进行间接访问操作之前，必须确保它并非NULL指针</strong>。</p><p>良好的编程习惯就是，如果你已经知道指针将被初始化为什么地址，就把它初始化为该地址，否则就把它初始化为<code>NULL</code>。</p><h2 id="三、指针常量"><a href="#三、指针常量" class="headerlink" title="三、指针常量"></a>三、指针常量</h2><p>指针常量与非指针常量在本质上是不同的，因为编译器负责把变量赋值给计算机内存中的位置，程序员事先无法知道某个特定的变量将存储到内存中的哪个位置。因此，可以通过取地址操作符<code>&amp;</code>获取一个变量的地址，而不是直接把它地址写成字面值常量的形式。</p><p>在极少见的情况下，我们偶尔需要使用指针常量，这时我们可以通过把一个整型值强制转换为指针类型来创建它。<br>比如：假设我们知道了整型变量a存储在内存的地址为100，那么可以这样赋值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">100</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把100从“整型”转换为“指向整型的指针”，再对它进行间接访问就是合法的。<br>但是很少有机会需要使用这种技巧。</p><p>再看一个示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的数组名<code>a</code>是个<strong>指针常量</strong>而不是指针变量，它保存了数组第1个元素的地址（a指向了数组第一个元素）。<strong>你不能修改常量的值</strong>。</p><p>只有在两种场合下，数组名并不用指针常量来表示（数组名并不保存数组第一个元素的地址）：</p><p>1）数组名作为<code>sizeof</code>操作符时<code>sizeof</code>返回整个数组的长度，而不是指针常量的长度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size = %lu\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）数组名作为<code>&amp;</code>操作符时对一个数组名使用取地址操作符产生的是一个指向数组的指针</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> calendar<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>monthp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>monthp <span class="token operator">=</span> calendar<span class="token punctuation">;</span> <span class="token comment">// 等价于 monthp = &amp;calendar[0];</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>monthp是一个指向拥有31个整型元素的数组的指针。如果把calendar当作一个一维数组元素组成的一维数组，那么可以把monthp当作是指向calendar第一个元素的指针。而<code>*monthp</code>就是一个一维数组，它可以像普通的一维数组名那样用下标取元素，<code>(*monthp)[0]</code>等价于<code>*((*monthp) + 0)</code>，还等价于<code>calendar[0][0]</code>，如果把calendar看成是一个二维数组的话，这三种方式都是取calendar第0行第0列的元素。</p><h2 id="四、指向指针的指什"><a href="#四、指向指针的指什" class="headerlink" title="四、指向指针的指什"></a>四、指向指针的指什</h2><ul><li>例子1</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pi<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ppi<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>pppi<span class="token punctuation">;</span>pi <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>ppi <span class="token operator">=</span> <span class="token operator">&amp;</span>pi<span class="token punctuation">;</span>pppi <span class="token operator">=</span> <span class="token operator">&amp;</span>ppi<span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>ppi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>pppi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码14-17行都具有相同的效果，都是对变量i进行赋值为1。<br>i是一个整型。<br>pi是一个指向整型的指针。<br>ppi是一个指向整型的指针的指针。<br>pppi是一个指向整型的指针的指针的指针。</p><p>上面代码10-12行还可以换成下面这样：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pppi <span class="token operator">=</span> <span class="token operator">&amp;</span>ppi<span class="token punctuation">;</span><span class="token operator">*</span>pppi <span class="token operator">=</span> <span class="token operator">&amp;</span>pi<span class="token punctuation">;</span><span class="token operator">*</span>ppi  <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span> <span class="token comment">// **pppi = &amp;i;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="五、void-通用型指针"><a href="#五、void-通用型指针" class="headerlink" title="五、void *通用型指针"></a>五、<code>void *</code>通用型指针</h2><p>看一个示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage：concat &lt;s1&gt; &lt;s2&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"r = %s\n"</span><span class="token punctuation">,</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>argv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>argv <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"malloc failed in concat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">strcpy</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>zq@localhost Temp<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>concat abc defr <span class="token operator">=</span> abcdef<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的示例中<code>malloc</code>函数返回值类型是<code>void *</code>，这种返回值类型我们称为<strong>通用类型指针</strong>，当调用内存分配函数时，<br>函数无法知道计划存储在内存块中的数据类型是什么类型的，所以它不能返回<code>int</code>类型指针，也不能返回<code>char</code>类型指针等普通类型的指针。取而代之的，函数就返回<code>void *</code>类型指针。<br>*<em>通常情况下，不需要强制转换，可以把void <em>类型值赋值给任何指针类型的变量</em></em></p><p>上面的代码中<code>printf("r = %s\n", concat(*(argv + 1), *(argv + 2)));</code>也可以写成<code>printf("r = %s\n", concat(argv[1], argv[2]));</code></p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ul><li>指针是Ｃ语言的灵魂，它很强大但也很容易出错，必须掌握<strong>指针编程</strong>的知识和技巧</li><li>指针就是地址，指针变量就是保存内存地址的变量，指针变量的值就是一个数字</li><li>一般我们说p指向了i，意思是指针p保存了i的地址</li><li>使用<code>&amp;</code>获取变量的地址</li><li>间接访问操作<code>*</code>只能作用于指针类型的表达式且非<code>NULL</code></li><li>数组取下标与指针间接访问的互相转换可以记住一个公式：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">array<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>array <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>array</strong>是代表数组名，<strong>s</strong>是表达式</p><ul><li>声明一个指针变量并不会自动分配任何内存。在对指针执行间接访问前，指针必须进行初始化或者使它指向现有的内存或者给它分配动态内存。对未初始化的指针变量执行间接访问操作是非法的，而且这种错误常常难于验证检测。其结果常常是一个不相关的值被修改。这种错误是很难被调试发现的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autotools简介（autoconf, automake）</title>
      <link href="/2021/12/09/autotools-jian-jie-autoconf-automake/"/>
      <url>/2021/12/09/autotools-jian-jie-autoconf-automake/</url>
      
        <content type="html"><![CDATA[<h1 id="Autotools简介（autoconf-automake）"><a href="#Autotools简介（autoconf-automake）" class="headerlink" title="Autotools简介（autoconf, automake）"></a>Autotools简介（autoconf, automake）</h1><hr><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>无论是在Linux还是在Unix环境中，make都是一个非常重要的编译命令。不管是自己进行项目开发还是安装应用软件，我们都经常要用到make或 make install。利用make工具，我们可以将大型的开发项目分解成为多个更易于管理的模块，对于一个包括几百个源文件的应用程序，使用make和 makefile工具就可以轻而易举的理顺各个源文件之间纷繁复杂的相互关系。</p><p>但是如果通过查阅make的帮助文档来手工编写Makefile,对任何程序员都是一场挑战。幸而有GNU 提供的Autoconf及Automake这两套工具使得编写makefile不再是一个难题。</p><p>本文将介绍如何利用 GNU Autoconf 及 Automake 这两套工具来协助我们自动产生 Makefile文件，并且让开发出来的软件可以像大多数源码包那样，只需”./configure”, “make”,”make install” 就可以把程序安装到系统中。</p><h2 id="二、从epoch程序开始"><a href="#二、从epoch程序开始" class="headerlink" title="二、从epoch程序开始"></a>二、从epoch程序开始</h2><p>我们从一个获取系统时间的程序为例开始讲解。</p><p>1）新建目录</p><p>在你的工作目录下新建一个epoch目录，我们用它来存放epoch程序及相关文件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mkdir epoch$ cd epoch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）epoch.c</p><p>编写一个epoch.c程序，内容如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"config.h"</span></span><span class="token keyword">double</span> <span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> sec<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HAVE_GETTIMEOFDAY</span></span>    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">;</span>    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sec <span class="token operator">=</span> tv<span class="token punctuation">.</span>tv_sec<span class="token punctuation">;</span>    sec <span class="token operator">+=</span> tv<span class="token punctuation">.</span>tv_usec <span class="token operator">/</span> <span class="token number">1000000.0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>    sec <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> sec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> <span class="token function">get_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）生成configure</p><p>我们使用autoscan命令来帮助我们根据目录下的源代码生成一个configure.ac的模板文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ autoscan$ lsautoscan.log  configure.scan  epoch.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行后在epoch目录下会生成一个文件configure.scan，我们可以拿它作为configure.ac的模板。现在将configure.scan改名为configure.ac，并且编辑它，修改成下面的内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mv configure.scan configure.ac<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#                                               -*- Autoconf -*-# Process this file with autoconf to produce a configure script.AC_PREREQ([2.63])AC_INIT(epoch, 1.0, quanzhang875@gmail.com)AM_INIT_AUTOMAKE(epoch, 1.0)AC_CONFIG_SRCDIR([epoch.c])AC_CONFIG_HEADERS([config.h])# Checks for programs.AC_PROG_CC# Checks for libraries.# Checks for header files.AC_CHECK_HEADERS([sys/time.h])# Checks for typedefs, structures, and compiler characteristics.# Checks for library functions.AC_CHECK_FUNCS([gettimeofday])AC_OUTPUT(Makefile)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行命令<strong>aclocal</strong>和<strong>autoconf</strong>及<strong>autoheader</strong>，就会分别生成<strong>aclocal.m4</strong>和<strong>configure</strong>及<strong>config.h.in</strong>文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ aclocal$ lsaclocal.m4  autom4te.cache  autoscan.log  configure.ac  epoch.c$ autoconf$ lsaclocal.m4  autom4te.cache  autoscan.log  configure  configure.ac  epoch.c$ autoheader$ lsaclocal.m4  autom4te.cache  autoscan.log  config.h.in  configure  configure.ac  epoch.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）新建 Makefile.am</p><p>Makefile.am文件内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vi Makefile.am<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">AUTOMAKE_OPTIONS=foreignbin_PROGRAMS=epochepoch_SOURCES=epoch.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>automake会根据你写的Makefile.am来自动生成Makefile.in。</p><p>Makefile.am中定义的宏和目标，会指导automake生成指定的代码。例如，宏bin_PROGRAMS将导致编译和连接的目标被生成。</p><p>5）运行automake</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ automake --add-missingconfigure.ac:6: installing `./install-sh'configure.ac:6: installing `./missing'Makefile.am: installing `./depcomp'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6）运行configure生成Makefile和config.h</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./configurechecking for a BSD-compatible install... /usr/bin/install -cchecking whether build environment is sane... yeschecking for a thread-safe mkdir -p... /bin/mkdir -pchecking for gawk... gawkchecking whether make sets $(MAKE)... yeschecking for gcc... gccchecking for C compiler default output file name... a.outchecking whether the C compiler works... yeschecking whether we are cross compiling... nochecking for suffix of executables...checking for suffix of object files... ochecking whether we are using the GNU C compiler... yeschecking whether gcc accepts -g... yeschecking for gcc option to accept ISO C89... none neededchecking for style of include used by make... GNUchecking dependency style of gcc... gcc3checking how to run the C preprocessor... gcc -Echecking for grep that handles long lines and -e... /bin/grepchecking for egrep... /bin/grep -Echecking for ANSI C header files... yeschecking for sys/types.h... yeschecking for sys/stat.h... yeschecking for stdlib.h... yeschecking for string.h... yeschecking for memory.h... yeschecking for strings.h... yeschecking for inttypes.h... yeschecking for stdint.h... yeschecking for unistd.h... yeschecking sys/time.h usability... yeschecking sys/time.h presence... yeschecking for sys/time.h... yeschecking for gettimeofday... yesconfigure: creating ./config.statusconfig.status: creating Makefileconfig.status: creating config.hconfig.status: executing depfiles commands<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lsaclocal.m4      autoscan.log  config.h.in  config.status  configure.ac  epoch.c     Makefile     Makefile.in  stamp-h1autom4te.cache  config.h      config.log   configure      depcomp       install-sh  Makefile.am  missing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到此时<strong>Makefile</strong>和<strong>config.h</strong>已经产生出来了。</p><p>7）使用Makefile编译代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ makemake  all-ammake[1]: Entering directory `/home/dendi875/auto/epoch'gcc -DHAVE_CONFIG_H -I.     -g -O2 -MT epoch.o -MD -MP -MF .deps/epoch.Tpo -c -o epoch.o epoch.cmv -f .deps/epoch.Tpo .deps/epoch.Pogcc  -g -O2   -o epoch epoch.omake[1]: Leaving directory `/home/dendi875/auto/epoch'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）运行epoch</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./epoch1561952071.857380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样epoch就编译出来了，你还可以试着使用一些其它的make命令，如<strong>make clean</strong>，<strong>make install</strong>，<strong>make dist</strong>。</p><h2 id="三、流程图"><a href="#三、流程图" class="headerlink" title="三、流程图"></a>三、流程图</h2><p>我们用一张图来表示产生<strong>Makefile</strong>和<strong>config.h</strong>的流程</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/afp2.png"></p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ul><li><a href="http://www.laruence.com/2009/11/18/1154.html">automake，autoconf使用详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makefile </tag>
            
            <tag> Autoconf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch-PHP API 的使用</title>
      <link href="/2021/12/05/elasticsearch-php-api-de-shi-yong/"/>
      <url>/2021/12/05/elasticsearch-php-api-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在<a href="https://zhangquan.me/2021/06/29/elasticsearch-xue-xi-yan-jiu/">elasticsearch研究学习</a>文章中，详细的介绍了<code>ES</code>的重要概念、安装和配置、<strong>ik</strong> 中文分词插件的使用、基本的 <strong>Elasticsearch APIs</strong> 的使用。<code>ES</code>的官方客户端在<code>PHP</code>、<code>Java</code>、<code>Go</code>、<code>Python</code>等其他许多语言中都是可用的。</p><p>本篇我们就来学习下<code>PHP</code>作为<code>ES</code>客户端的基本操作。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 <code>composer.json</code> 文件中增加 elasticsearch-php：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">{    "require": {        "elasticsearch/elasticsearch": "~5.0"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>composer install</code>命令来安装客户端：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">composer install --no-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后加载 autoload.php，并实例化一个客户端对象：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ES_SERVER'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'es.servers.dev.ofc:9200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'vendor/autoload.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Elasticsearch<span class="token punctuation">\</span>ClientBuilder</span><span class="token punctuation">;</span><span class="token variable">$client</span> <span class="token operator">=</span> <span class="token class-name static-context">ClientBuilder</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">-&gt;</span><span class="token function">setHosts</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token constant">ES_SERVER</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token operator">-&gt;</span><span class="token function">setRetries</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                            <span class="token operator">-&gt;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="API-的使用"><a href="#API-的使用" class="headerlink" title="API 的使用"></a>API 的使用</h2><h3 id="索引的操作"><a href="#索引的操作" class="headerlink" title="索引的操作"></a>索引的操作</h3><p>索引管理操作可以使你管理<code>ES</code>集群中的索引，例如：创建、删除、更新索引以及索引的设置和索引的映射。</p><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>创建索引使用的是<code>create</code>函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'index'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'orders'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以在创建索引时把所需要的请求正文放到<code>body</code>参数中：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$params = [    'index' =&gt; 'userdoor',// 索引名字，类比数据库    'body' =&gt; [        'settings' =&gt; [            'number_of_replicas' =&gt; 1,            'number_of_shards'=&gt;  5,            'max_result_window' =&gt; 1000,        ],        'mappings' =&gt; [            'person' =&gt; [ // 类型名字，类比数据表                '_source' =&gt; ['enabled' =&gt; true],                'properties' =&gt; [ // 下面是包括字段名称，类比数据表中的字段                    'name' =&gt; ['type' =&gt; 'string', 'analyzer' =&gt; 'ik_max_word'], // 姓名                    'title' =&gt; ['type' =&gt; 'string', 'analyzer' =&gt; 'ik_max_word'], // 头衔                    'desc' =&gt; ['type' =&gt; 'string', 'analyzer' =&gt; 'ik_max_word'], // 备注                ]            ]        ]    ]];$response = $client-&gt;indices()-&gt;create($params);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以验证是否索引是否创建成功：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X GET 'http://localhost:9200/userdoor?pretty' -d ''{  "userdoor" : {    "aliases" : { },    "mappings" : {      "person" : {        "properties" : {          "desc" : {            "type" : "text",            "analyzer" : "ik_max_word"          },          "name" : {            "type" : "text",            "analyzer" : "ik_max_word"          },          "title" : {            "type" : "text",            "analyzer" : "ik_max_word"          }        }      }    },    "settings" : {      "index" : {        "number_of_shards" : "5",        "provided_name" : "userdoor",        "max_result_window" : "1000",        "creation_date" : "1576396958776",        "number_of_replicas" : "1",        "uuid" : "kvwBns5gThOTB2qX2TIwbA",        "version" : {          "created" : "5050399"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调整索引映射设置"><a href="#调整索引映射设置" class="headerlink" title="调整索引映射设置"></a>调整索引映射设置</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/php-api/5.0/_index_management_operations.html#_put_mappings_api">Put Mappings API</a> 允许你修改现有索引的映射，或添加新的映射</p><p>比如我们可以再加两个字段<code>age</code>和<code>timeCreated</code>：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$params = [    'index' =&gt; 'userdoor',    'type' =&gt; 'person',    'body' =&gt; [        'person' =&gt; [            'properties' =&gt; [                'timeCreated' =&gt; [                    'type' =&gt; 'date',                    'format' =&gt; 'yyyy-MM-dd HH:mm:ss'                ],                'age' =&gt; [                    'type' =&gt; 'integer'                ]            ]        ]    ]];// Update the index mapping$client-&gt;indices()-&gt;putMapping($params);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以验证是否更新成功：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X GET 'http://localhost:9200/userdoor?pretty' -d ''{  "userdoor" : {    "aliases" : { },    "mappings" : {      "person" : {        "properties" : {          "age" : {            "type" : "integer"          },          "desc" : {            "type" : "text",            "analyzer" : "ik_max_word"          },          "name" : {            "type" : "text",            "analyzer" : "ik_max_word"          },          "timeCreated" : {            "type" : "date",            "format" : "yyyy-MM-dd HH:mm:ss"          },          "title" : {            "type" : "text",            "analyzer" : "ik_max_word"          }        }      }    },    "settings" : {      "index" : {        "number_of_shards" : "5",        "provided_name" : "userdoor",        "max_result_window" : "1000",        "creation_date" : "1576396958776",        "number_of_replicas" : "1",        "uuid" : "kvwBns5gThOTB2qX2TIwbA",        "version" : {          "created" : "5050399"        }      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p>使用<code>delete</code>函数来删除索引</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$params = ['index' =&gt; 'userdoor'];$response = $client-&gt;indices()-&gt;delete($params);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="文档的操作"><a href="#文档的操作" class="headerlink" title="文档的操作"></a>文档的操作</h3><h4 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h4><p>使用<code>index</code>函数来新增文档</p><ul><li>单条文档的新增</li></ul><p>提供<code>ID</code>值：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'index'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'userdoor'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'type'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'person'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'body'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'张三'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'title'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'架构师'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'desc'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'系统架构师'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'age'</span> <span class="token operator">=&gt;</span> <span class="token number">28</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'timeCreated'</span> <span class="token operator">=&gt;</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Document will be indexed to userdoor/person/1</span><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让<code>ES</code>自已生成<code>ID</code>：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$params = [    'index' =&gt; 'userdoor',    'type' =&gt; 'person',    'body' =&gt; [        'name' =&gt; '李四',        'title' =&gt; '程序员',        'desc' =&gt; '前端开发',        'age' =&gt; 28,        'timeCreated' =&gt; date('Y-m-d H:i:s'),    ]];// Document will be indexed to userdoor/person/&lt;autogenerated ID&gt;$response = $client-&gt;index($params);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>批量文档的新增</li></ul><p>使用<code>bulk</code>来批量增加文档。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'index'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'_index'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'userdoor'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'_type'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'person'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'王五'</span><span class="token operator">.</span><span class="token variable">$i</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'title'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'测试'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'desc'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'自动化测试'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'age'</span> <span class="token operator">=&gt;</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'timeCreated'</span> <span class="token operator">=&gt;</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$responses</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">bulk</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h4><p>使用<code>get</code>函数来查看文档</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$params = [    'index' =&gt; 'userdoor',    'type' =&gt; 'person',    'id' =&gt; '1'];// Get doc at /userdoor/person/1$response = $client-&gt;get($params);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>使用<code>update</code>函数来更新文档：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$params = [    'index' =&gt; 'userdoor',    'type' =&gt; 'person',    'id' =&gt; '1',    'body' =&gt; [        'doc' =&gt; [            'desc' =&gt; '系统架构师，业务架构师'        ]    ]];// Update doc at /userdoor/person/1$response = $client-&gt;update($params);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p>使用<code>delete</code>函数来删除文档：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$params = [    'index' =&gt; 'userdoor',    'type' =&gt; 'person',    'id' =&gt; 1];// Delete doc at /userdoor/person/1$response = $client-&gt;delete($params);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索的操作"><a href="#搜索的操作" class="headerlink" title="搜索的操作"></a>搜索的操作</h3><ul><li>Match 查询</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'index'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'userdoor'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'type'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'person'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'body'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'query'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'match'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>                <span class="token string single-quoted-string">'desc'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'架构师'</span>            <span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上示例输出：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ php es.phpArray(    [took] =&gt; 9    [timed_out] =&gt;    [_shards] =&gt; Array        (            [total] =&gt; 5            [successful] =&gt; 5            [failed] =&gt; 0        )    [hits] =&gt; Array        (            [total] =&gt; 1            [max_score] =&gt; 1.1000589            [hits] =&gt; Array                (                    [0] =&gt; Array                        (                            [_index] =&gt; userdoor                            [_type] =&gt; person                            [_id] =&gt; 1                            [_score] =&gt; 1.1000589                            [_source] =&gt; Array                                (                                    [name] =&gt; 张三                                    [title] =&gt; 架构师                                    [desc] =&gt; 系统架构师，业务架构师                                    [age] =&gt; 28                                    [timeCreated] =&gt; 2019-12-15 08:44:01                                )                        )                )        ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用原生<code>json</code>来代替数组：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$json = '{"query": {"match": {"desc": "架构师"}}}';$params = [    'index' =&gt; 'userdoor',    'type' =&gt; 'person',    'body' =&gt; $json];$results = $client-&gt;search($params);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Bool 查询</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'index'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'userdoor'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'type'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'person'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'body'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'query'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'bool'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>                <span class="token string single-quoted-string">'must'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>                    <span class="token punctuation">[</span><span class="token string single-quoted-string">'match'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token string single-quoted-string">'match'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'age'</span> <span class="token operator">=&gt;</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$results</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhangquan.me/2021/06/29/elasticsearch-xue-xi-yan-jiu/">elasticsearch研究学习</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/php-api/5.0/index.html">官方 Elasticsearch-PHP API 文档</a></li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/php/current/_quickstart.html">官方 Elasticsearch-PHP API 中文文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Elasticsearch - 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 集成 CAT 全链路监控</title>
      <link href="/2021/11/26/spring-boot-ji-cheng-cat-quan-lian-lu-jian-kong/"/>
      <url>/2021/11/26/spring-boot-ji-cheng-cat-quan-lian-lu-jian-kong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、编写一个-springboot-与-cat-整合的案例"><a href="#一、编写一个-springboot-与-cat-整合的案例" class="headerlink" title="一、编写一个 springboot 与 cat 整合的案例"></a>一、编写一个 springboot 与 cat 整合的案例</h2><h3 id="将-cat-client-通过源码安装到本地仓库"><a href="#将-cat-client-通过源码安装到本地仓库" class="headerlink" title="将 cat-client 通过源码安装到本地仓库"></a>将 cat-client 通过源码安装到本地仓库</h3><ul><li>cat-client的源码路径：cat/lib/java</li><li>进入源码路径后，执行命令：<pre class="line-numbers language-none"><code class="language-none">mvn clean install -DskipTests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>安装成功后，在本地仓库就存在 cat-client-3.0.0.jar 包了</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-10.png"></p><h3 id="CAT客户端-Demo"><a href="#CAT客户端-Demo" class="headerlink" title="CAT客户端 Demo"></a>CAT客户端 Demo</h3><h4 id="maven-引入-cat-客户端包，在-pom-xml-加入"><a href="#maven-引入-cat-客户端包，在-pom-xml-加入" class="headerlink" title="maven 引入 cat 客户端包，在 pom.xml 加入"></a>maven 引入 cat 客户端包，在 pom.xml 加入</h4><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;com.dianping.cat&lt;/groupId&gt;    &lt;artifactId&gt;cat-client&lt;/artifactId&gt;    &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置domain"><a href="#配置domain" class="headerlink" title="配置domain"></a>配置domain</h4><ul><li>在资源文件中新建app.properties文件</li></ul><p>在resources资源文件META-INF下，注意是src/main/resources/META-INF/文件夹，加上domain配置，如：app.name=spring-boot-cat-simple</p><ul><li>接着我们以一个简单的接口测试演练下，项目结构如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-dashboard-5.png"></p><p>HelloController 类</p><pre class="line-numbers language-none"><code class="language-none">package com.zq.controller;import com.zq.service.CatService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;// @RestController 的意思是 Controller 里面的方法都以 json 格式输出@RestControllerpublic class HelloController {    @Autowired    private CatService catServiceImpl;    @RequestMapping("/hello")    public String index(HttpServletRequest request) {        String url = request.getRequestURL().toString();        return catServiceImpl.hello(url);    }    @RequestMapping("/error")    public String error(HttpServletRequest request) {        String url = request.getRequestURL().toString();        return catServiceImpl.error(url);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Service 类</p><pre class="line-numbers language-none"><code class="language-none">package com.zq.service.impl;import com.dianping.cat.Cat;import com.dianping.cat.message.Transaction;import com.zq.service.CatService;import org.springframework.stereotype.Service;@Servicepublic class CatServiceImpl implements CatService {    @Override    public String hello(String url) {        // 创建一个 Transaction        Transaction transaction = Cat.newTransaction("URL", url);        try {            // 处理业务            myBusiness();            // 设置成功状态            transaction.setStatus(Transaction.SUCCESS);        } catch (Exception e) {            // 设置错误状态            transaction.setStatus(e);            // 记录错误信息            Cat.logError(e);        } finally {            // 结束 Transaction            transaction.complete();        }        return "hello";    }    @Override    public String error(String url) {        // 创建一个 Transaction        Transaction transaction = Cat.newTransaction("URL", url);        try {            // 处理业务            int i = 1 / 0;            // 设置成功状态            transaction.setStatus(Transaction.SUCCESS);        } catch (Exception e) {            // 设置错误状态            transaction.setStatus(e);            // 记录错误信息            Cat.logError(e);        } finally {            // 结束 Transaction            transaction.complete();        }        return "error";    }    private void myBusiness() {        // 模拟业务处理时间        try {            Thread.sleep(500);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>请求：<a href="http://localhost:8900/hello">http://localhost:8900/hello</a></p></li><li><p>请求：<a href="http://localhost:8900/hello/error">http://localhost:8900/hello/error</a></p></li></ul><h2 id="二、查看监控信息"><a href="#二、查看监控信息" class="headerlink" title="二、查看监控信息"></a>二、查看监控信息</h2><p>进入 cat 控制台，点击 Transaction 按钮 ，之后点击全部，会看到有哪些客户端，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-dashboard-1.png"></p><p>点击客户端 spring-boot-cat-simple ，出现如图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-dashboard-2.png"></p><p>接着再点击 URL 的 Type </p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-dashboard-3.png"></p><p>如上图，可以清晰的看到 请求的 总个数（tatal）、均值（avg）、最大/最小（max/min)、标准差（std）等，其他都比较直观</p><p>点击 “log View” 可以查看 错误信息，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-dashboard-4.png"></p><h2 id="三、源码"><a href="#三、源码" class="headerlink" title="三、源码"></a>三、源码</h2><ul><li><a href="https://github.com/dendi875/spring-boot-study/tree/main/spring-boot-cat-simple">spring-boot-cat-simple</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> CAT </tag>
            
            <tag> JAVA </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAT服务端安装</title>
      <link href="/2021/11/26/cat-fu-wu-duan-an-zhuang/"/>
      <url>/2021/11/26/cat-fu-wu-duan-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="我的本地开发环境"><a href="#我的本地开发环境" class="headerlink" title="我的本地开发环境"></a>我的本地开发环境</h2><ul><li>操作系统： macOS Catalina 10.15.6</li><li>IDE： Intelij IDEA</li><li>JDK版本：1.8</li><li>Mysql： 5.7.21</li><li>Maven： 3.6.3</li><li>Server version: Apache Tomcat/8.5.70</li></ul><h2 id="一、Cat-源代码下载"><a href="#一、Cat-源代码下载" class="headerlink" title="一、Cat 源代码下载"></a>一、Cat 源代码下载</h2><p>下载地址：<a href="https://github.com/dianping/cat">https://github.com/dianping/cat</a></p><ul><li>cat源码：下载 master 分支代码 </li><li>cat依赖包：下载 mvn-repo 分支代码</li></ul><h2 id="二、在本地打-cat-的-war-包"><a href="#二、在本地打-cat-的-war-包" class="headerlink" title="二、在本地打 cat 的 war 包"></a>二、在本地打 cat 的 war 包</h2><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/20211126145728.png"></p><h3 id="在cat工程执行编译命令"><a href="#在cat工程执行编译命令" class="headerlink" title="在cat工程执行编译命令"></a>在cat工程执行编译命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># zhangquan @ MacBook-Pro in ~/docker-php-dev/www/github/cat on git:master x [20:29:15] C:1$ mvn clean compile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>报错1：Could not find artifact org.unidal.framework:foundation-service:jar:2.5.0</li></ul><pre class="line-numbers language-none"><code class="language-none">[ERROR] Failed to execute goal on project cat-core: Could not resolve dependencies for project com.dianping.cat:cat-core:jar:3.0.0: The following artifacts could not be resolved: org.unidal.framework:foundation-service:jar:2.5.0, org.unidal.framework:web-framework:jar:2.4.0, org.unidal.framework:dal-jdbc:jar:2.4.0: Could not find artifact org.unidal.framework:foundation-service:jar:2.5.0 in alimaven (http://maven.aliyun.com/nexus/content/groups/public) -&gt; [Help 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解决：将下载的mvn-repo分支解压，放入到本地的.m2仓库中；</p><p>本地 mvn-repo 分支解压，解压出org目录，并将org目录拷贝到本地的.m2仓库中</p><pre class="line-numbers language-none"><code class="language-none">$ ll ~/.m2/repository/org/unidal drwxrwxr-x@  3 zhangquan  180847186    96B 11 14  2017 eunitdrwxrwxr-x@ 11 zhangquan  180847186   352B 11 14  2017 frameworkdrwxrwxr-x@  4 zhangquan  180847186   128B 11 23 20:31 mavendrwxrwxr-x@  9 zhangquan  180847186   288B 11 14  2017 webres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再执行编译命令：</p><ul><li>报错2：Could not find artifact org.codehaus.plexus:plexus-container-default:jar:3.1.0</li></ul><pre class="line-numbers language-none"><code class="language-none">[ERROR] Failed to execute goal org.unidal.maven.plugins:codegen-maven-plugin:2.5.8:dal-model (generate data model) on project cat-client: Execution generate data model of goal org.unidal.maven.plugins:codegen-maven-plugin:2.5.8:dal-model failed: Plugin org.unidal.maven.plugins:codegen-maven-plugin:2.5.8 or one of its dependencies could not be resolved: Could not find artifact org.codehaus.plexus:plexus-container-default:jar:3.1.0 in unidal (http://unidal.org/nexus/content/repositories/releases/) -&gt; [Help 1]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决：在.m2仓库找到org.unidal.maven.plugins:codegen-maven-plugin:2.5.8版本的pom文件codegen-maven-plugin-2.5.8.pom用idea打开，点击父引用的default，跳转到default-2.5.8.pom文件中，将文件中foundation-service.version从3.1.0版本修改为4.0.0版本；</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-2.png"></p><p>再执行编译命令：编译即可成功</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-3.png"></p><h3 id="在cat根目录执行install命令"><a href="#在cat根目录执行install命令" class="headerlink" title="在cat根目录执行install命令"></a>在cat根目录执行install命令</h3><pre class="line-numbers language-none"><code class="language-none"># zhangquan @ MacBook-Pro in ~/docker-php-dev/www/github/cat on git:master x [20:49:13] C:130$ mvn clean install -DskipTests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>报错：Failure to find org.unidal.framework:test-framework:jar:2.4.0</p><pre class="line-numbers language-none"><code class="language-none">[ERROR] Failed to execute goal on project cat-client: Could not resolve dependencies for project com.dianping.cat:cat-client:jar:3.0.0: Failure to find org.unidal.framework:test-framework:jar:2.4.0 in http://unidal.org/nexus/content/repositories/releases/ was cached in the local repository, resolution will not be reattempted until the update interval of unidal has elapsed or updates are forced -&gt; [Help 1]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决：修改cat根目录的pom.xml文件中test-framework的版本，改为2.5.0</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-4.png"></p><p>再执行install命令：安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-5.png"></p><p>install成功后，将cat-home-3.0.0.war修改为cat.war</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/20211126151958.png"></p><h3 id="查看每个module具体生效的pom信息"><a href="#查看每个module具体生效的pom信息" class="headerlink" title="查看每个module具体生效的pom信息"></a>查看每个module具体生效的pom信息</h3><p>在cat根目录执行命令：打开cat.txt，即可看到cat-home定义的version</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mvn help:effective-pom &gt; cat.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、服务端安装和配置"><a href="#三、服务端安装和配置" class="headerlink" title="三、服务端安装和配置"></a>三、服务端安装和配置</h2><h3 id="安装CAT的数据库"><a href="#安装CAT的数据库" class="headerlink" title="安装CAT的数据库"></a>安装CAT的数据库</h3><ul><li>创建数据库，数据库名cat，数据库编码使用utf8mb4，否则可能造成中文乱码等问题；</li></ul><pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE `cat` DEFAULT CHARACTER SET utf8mb4 ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将 cat工程中，script目录中的 sql 拷贝到cat数据库运行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/20211126152613.png"></p><p>sql拷贝到cat数据库运行，初始化数据表；</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/20211126152731.png"></p><p>由于MySQL的系统参数max_allowed_packet默认配置较小，可能会限制server接受的数据包大小，有时候大的插入和更新会被max_allowed_packet 参数限制掉，导致失败，所以要修改max_allowed_packet的值，修改后需要重启mysql；</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-9.png"></p><h3 id="Cat配置文件"><a href="#Cat配置文件" class="headerlink" title="Cat配置文件"></a>Cat配置文件</h3><p>创建以下两个目录：</p><ul><li>/data/appdatas/cat</li><li>/data/applogs/cat </li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-6.png"></p><p>在 /data/appdatas/cat 目录中，添加 client.xml，datasources.xml 配置文件</p><p>client.xml配置</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;config mode="client"&gt;    &lt;servers&gt;          &lt;!-- 服务端地址, 端口固定--&gt;  &lt;!-- 如果有多个Server, 就继续增加相应的节点配置 --&gt;  &lt;!-- 这是告诉客户端应该去链接哪个服务端，从哪个服务端里获取配置信息 ，相关源码也在 DefaultClientConfigManager中 --&gt;  &lt;!--将172.16.48.114修改为部署CAT的内网IP,请不要写127.0.0.1和外网IP --&gt; &lt;server ip="172.16.48.114" port="2280" http-port="8080" /&gt;    &lt;/servers&gt;&lt;/config&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>datasources.xml配置文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;data-sources&gt;    &lt;data-source id="cat"&gt;        &lt;maximum-pool-size&gt;3&lt;/maximum-pool-size&gt;        &lt;connection-timeout&gt;1s&lt;/connection-timeout&gt;        &lt;idle-timeout&gt;10m&lt;/idle-timeout&gt;        &lt;statement-cache-size&gt;1000&lt;/statement-cache-size&gt;        &lt;properties&gt;            &lt;driver&gt;com.mysql.jdbc.Driver&lt;/driver&gt;            &lt;url&gt;&lt;![CDATA[jdbc:mysql://www.myvbox.com:3306/cat]]&gt;&lt;/url&gt;  &lt;!-- 请替换为真实数据库URL及Port  --&gt;            &lt;user&gt;root&lt;/user&gt;  &lt;!-- 请替换为真实数据库用户名  --&gt;            &lt;password&gt;123456&lt;/password&gt;  &lt;!-- 请替换为真实数据库密码  --&gt;            &lt;connectionProperties&gt;&lt;![CDATA[useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;socketTimeout=120000]]&gt;&lt;/connectionProperties&gt;        &lt;/properties&gt;    &lt;/data-source&gt;&lt;/data-sources&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tomcat启动cat项目"><a href="#tomcat启动cat项目" class="headerlink" title="tomcat启动cat项目"></a>tomcat启动cat项目</h3><p>将cat.war拷贝到tomcat的webapps目录，再启动tomcat；</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-7.png"></p><p>运行命令启动 tomcat</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/cat-8.png"></p><p>启动成功后，访问：<a href="http://localhost:8080/cat/r">http://localhost:8080/cat/r</a></p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/20211126153830.png"></p><h3 id="按照实际需要，修改服务端配置和客户端路由"><a href="#按照实际需要，修改服务端配置和客户端路由" class="headerlink" title="按照实际需要，修改服务端配置和客户端路由"></a>按照实际需要，修改服务端配置和客户端路由</h3><p>使用admin/admin登录</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/20211126154013.png"></p><p>进入【服务端配置】页面修改IP地址：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;server-config&gt;   &lt;server id="default"&gt;      &lt;properties&gt;         &lt;property name="local-mode" value="true"/&gt;         &lt;property name="job-machine" value="true"/&gt;         &lt;property name="send-machine" value="false"/&gt;         &lt;property name="alarm-machine" value="false"/&gt;         &lt;property name="hdfs-enabled" value="false"/&gt;         &lt;property name="remote-servers" value="172.16.48.114:8080"/&gt;      &lt;/properties&gt;      &lt;storage local-base-dir="/data/appdatas/cat/bucket/" max-hdfs-storage-time="15" local-report-storage-time="2" local-logivew-storage-time="1" har-mode="true" upload-thread="5"&gt;         &lt;hdfs id="dump" max-size="128M" server-uri="hdfs://127.0.0.1/" base-dir="/user/cat/dump"/&gt;         &lt;harfs id="dump" max-size="128M" server-uri="har://127.0.0.1/" base-dir="/user/cat/dump"/&gt;         &lt;properties&gt;            &lt;property name="hadoop.security.authentication" value="false"/&gt;            &lt;property name="dfs.namenode.kerberos.principal" value="hadoop/dev80.hadoop@testserver.com"/&gt;            &lt;property name="dfs.cat.kerberos.principal" value="cat@testserver.com"/&gt;            &lt;property name="dfs.cat.keytab.file" value="/data/appdatas/cat/cat.keytab"/&gt;            &lt;property name="java.security.krb5.realm" value="value1"/&gt;            &lt;property name="java.security.krb5.kdc" value="value2"/&gt;         &lt;/properties&gt;      &lt;/storage&gt;      &lt;consumer&gt;         &lt;long-config default-url-threshold="1000" default-sql-threshold="100" default-service-threshold="50"&gt;            &lt;domain name="cat" url-threshold="500" sql-threshold="500"/&gt;            &lt;domain name="OpenPlatformWeb" url-threshold="100" sql-threshold="500"/&gt;         &lt;/long-config&gt;      &lt;/consumer&gt;   &lt;/server&gt;   &lt;server id="172.16.48.114"&gt;      &lt;properties&gt;         &lt;property name="job-machine" value="true"/&gt;         &lt;property name="send-machine" value="false"/&gt;         &lt;property name="alarm-machine" value="true"/&gt;      &lt;/properties&gt;   &lt;/server&gt;&lt;/server-config&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入【客户端路由】页面修改IP地址：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/20211126154551.png"></p>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> CAT </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 系统在根目录创建文件夹</title>
      <link href="/2021/11/26/mac-xi-tong-zai-gen-mu-lu-chuang-jian-wen-jian-jia/"/>
      <url>/2021/11/26/mac-xi-tong-zai-gen-mu-lu-chuang-jian-wen-jian-jia/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>Mac 操作系统挺适合开发者进行写代码，最近碰到了一个问题，问题是如何在 macOS 根目录创建文件夹。不同的 macOS 版本处理方式不同，下面我们展开讲一下</p><h3 id="二、为什么要在-Mac-根目录创建文件夹"><a href="#二、为什么要在-Mac-根目录创建文件夹" class="headerlink" title="二、为什么要在 Mac 根目录创建文件夹"></a>二、为什么要在 Mac 根目录创建文件夹</h3><p>有些场景程序需要访问根目录的特定文件夹，所以需要在 macOS 根目录创建文件夹。</p><p>比如 <code>Spring Boot</code> 工程在 Mac 操作系统本地运行时，公司会默指定 <code>/data0/log-data/</code> 类似的目录，来存储工程运行的日志。</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/mac-1.png"></p><p>那怎么如何在 macOS 根目录创建文件夹，下面分不同的 macOS 版本来解决：</p><ul><li>macOS@Catalina 版本</li><li>macOS@Big Sur 版本</li></ul><h3 id="三、macOS-Catalina-版本的创建文件夹方法"><a href="#三、macOS-Catalina-版本的创建文件夹方法" class="headerlink" title="三、macOS@Catalina 版本的创建文件夹方法"></a>三、macOS@Catalina 版本的创建文件夹方法</h3><p>第一步：关闭电脑然后重启，重启时长按 command + R 键，启动内建的 macOS 恢复系统</p><p>第二步：从菜单栏找到终端工具，运行下面命令，然后重启：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">csrutil disable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令目的是关闭 SIP，SIP 全称为「System Integrity Protection」即「系统完整性保护」。可以通过 <code>csrutil status</code> 查看其 SIP 状态。</p><p>第三步：重启完后，先重新挂载根目录，打开终端工具运行下面命令即可：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo mount -uw /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四步：创建对应的 <code>/Users/zhangquan/data</code>、<code>/Users/zhangquan/data0</code> 文件夹，然后将对应的文件目录软链接到根目录。运行下面命令即可：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir  /Users/zhangquan/datamkdir  /Users/zhangquan/data0sudo ln -s /Users/zhangquan/data /datasudo ln -s /Users/zhangquan/data0 /data0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：需要用软链接来解决，是因为在根目录直接创建文件夹的话，一旦重启电脑，之前创建的目录又是只读权限了。</p><p>最后，重新重启 command + R 键，启动内建的 macOS 恢复系统，重新打开 SIP：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">csrutil enable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、macOS-Big-Sur-版本的创建文件夹方法"><a href="#四、macOS-Big-Sur-版本的创建文件夹方法" class="headerlink" title="四、macOS@Big Sur 版本的创建文件夹方法"></a>四、macOS@Big Sur 版本的创建文件夹方法</h3><p>第一步：启动内建的 macOS 恢复系统，关闭 SIP<br>第二步：运行下面命令，修改 synthetic.conf 文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo vi /etc/synthetic.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三步：编辑该文件，输入下面内容，将对应的文件夹映射到根目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">data    /Users/zhangquan/datadata0   /Users/zhangquan/data0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：</p><ul><li>提前创建被映射的文件夹</li><li>中间是 Tab，不是空格<br>最后重启系统后，系统根目录就会出现了对应的文件夹，实现方式也是一个软链接的形式</li></ul><h3 id="五、小结"><a href="#五、小结" class="headerlink" title="五、小结"></a>五、小结</h3><ul><li>尽量不要再 mac 根目录操作一些命令，比如 chmod 等</li><li>SIP 打开后，及时关闭</li><li>mac 支持文件软链接形式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作积累 </tag>
            
            <tag> MAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-结构型模式-外观模式 (Facade Pattern)</title>
      <link href="/2021/07/09/she-ji-mo-shi-zhi-jie-gou-xing-mo-shi-wai-guan-mo-shi-facade-pattern/"/>
      <url>/2021/07/09/she-ji-mo-shi-zhi-jie-gou-xing-mo-shi-wai-guan-mo-shi-facade-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式 (Facade Pattern)"></a>外观模式 (Facade Pattern)</h1><hr><h3 id="0-外观模式概述"><a href="#0-外观模式概述" class="headerlink" title="0. 外观模式概述"></a>0. 外观模式概述</h3><p>不知道大家有没有比较过自己泡茶和去茶馆喝茶的区别，如果是自己泡茶需要自行准备茶叶、茶具和开水，如图(A)所示，而去茶馆喝茶，最简单的方式就是跟茶馆服务员说想要一杯什么样的茶，是铁观音、碧螺春还是西湖龙井？正因为茶馆有服务员，顾客无须直接和茶叶、茶具、开水等交互，整个泡茶过程由服务员来完成，顾客只需与服务员交互即可，整个过程非常简单省事，如图(B)所示。</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/tea.jpg" alt="tea"></p><p>在软件开发中，有时候为了完成一项较为复杂的功能，一个客户端类需要和多个业务类交互，而这些需要交互的业务类经常会作为一个整体出现，由于涉及到的类比较多，导致使用时代码较为复杂，此时，特别需要一个类似服务员一样的角色，由它来负责和多个业务类进行交互，而客户端类只需与该类交互。外观模式通过引入一个新的外观类(Facade)来实现该功能，外观类充当了软件系统中的“服务员”，它为多个业务类的调用提供了一个统一的入口，简化了类与类之间的交互。在外观模式中，那些需要交互的业务类被称为子系统(Subsystem)。如果没有外观类，那么每个客户端类需要和多个子系统之间进行复杂的交互，系统的耦合度将很大；而引入外观类之后，客户端类只需要直接与外观类交互，客户端类与子系统之间原有的复杂引用关系由外观类来实现，从而降低了系统的耦合度。</p><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><blockquote><p>外观模式 (Facade Pattern)：为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p></blockquote><p>外观模式又称为门面模式，它是一种<strong>对象结构型模式</strong>。</p><p>外观模式是<strong>迪米特法则</strong>的一种具体实现，通过引入一个新的外观角色可以降低原有系统的复杂度，同时降低客户端类与子系统的耦合度。</p><h3 id="2-模式结构"><a href="#2-模式结构" class="headerlink" title="2. 模式结构"></a>2. 模式结构</h3><p>外观模式包含如下角色：</p><ul><li><p><code>Facade</code>：<strong>外观</strong></p><ul><li>客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。</li></ul></li><li><p><code>SubSystem</code>：<strong>子系统</strong></p><ul><li>在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/FacadePattern-0.png" alt="FacadePattern-0"></p><h3 id="3-模式实现"><a href="#3-模式实现" class="headerlink" title="3. 模式实现"></a>3. 模式实现</h3><ul><li><p>外观模式的主要目的在于降低系统的复杂程度，在面向对象软件系统中，类与类之间的关系越多，不能表示系统设计得越好，反而表示系统中类之间的耦合度太大，这样的系统在维护和修改时都缺乏灵活性，因为一个类的改动会导致多个类发生变化，而外观模式的引入在很大程度上降低了类与类之间的耦合关系。引入外观模式之后，增加新的子系统或者移除子系统都非常方便，客户端类无须进行修改（或者极少的修改），只需要在外观类中增加或移除对子系统的引用即可。从这一点来说，外观模式在一定程度上并不符合开闭原则，增加新的子系统需要对原有系统进行一定的修改，虽然这个修改工作量不大。</p></li><li><p>外观模式中所指的子系统是一个广义的概念，它可以是一个类、一个功能模块、系统的一个组成部分或者一个完整的系统。子系统类通常是一些业务类，实现了一些具体的、独立的业务功能。</p></li></ul><h3 id="4-外观模式应用实例"><a href="#4-外观模式应用实例" class="headerlink" title="4. 外观模式应用实例"></a>4. 外观模式应用实例</h3><p>下面通过一个实例进一步学习和理解外观模式。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><p>现在需要开发一个文件加密功能，该功能可以对文件中的数据进行加密并将加密之后的数据存储在一个新文件中，具体的流程包括三个部分，分别是读取源文件、加密、保存加密之后的文件。这三个操作相对独立，为了实现代码的独立重用，让设计更符合<strong>单一职责原则</strong>，这三个操作的业务代码封装在三个不同的类中。</p><p>现使用外观模式设计该文件加密功能。</p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><ul><li>EncryptFacade：<code>外观类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * EncryptFacade 加密外观类。 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-05 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">EncryptFacade</span><span class="token punctuation">{</span>    <span class="token comment">/**     * @var FileReader     */</span>    <span class="token keyword">private</span> <span class="token variable">$fileReader</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @var CipherMachine     */</span>    <span class="token keyword">private</span> <span class="token variable">$cipherMachine</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @var FileWriter     */</span>    <span class="token keyword">private</span> <span class="token variable">$fileWriter</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fileReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">cipherMachine</span> <span class="token operator">=</span> <span class="token class-name static-context">CipherMachine</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fileWriter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fileEncrypt</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$fileNameSrc</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fileNameDes</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token comment">/* 读取文件，获取明文 */</span>        <span class="token variable">$plainStr</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fileReader</span><span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token variable">$fileNameSrc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 数据加密，将明文转换为密文 */</span>        <span class="token variable">$encryptStr</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">cipherMachine</span><span class="token operator">-&gt;</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token variable">$plainStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 保存密文，写入文件 */</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fileWriter</span><span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$encryptStr</span><span class="token punctuation">,</span> <span class="token variable">$fileNameDes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>FileReader、CipherMachine、FileWriter： <code>子系统类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * FileReader 文件读取类，充当子系统类。 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-05 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileReader</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$fileNameSrc</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stream</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$fileNameSrc</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">stream_get_contents</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$stream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * CipherMachine 数据加密类，充当子系统类。 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-05 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CipherMachine</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$iv</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$ivlen</span> <span class="token operator">=</span> <span class="token function">openssl_cipher_iv_length</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'aes-256-ctr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$iv</span> <span class="token operator">=</span> <span class="token function">openssl_random_pseudo_bytes</span><span class="token punctuation">(</span><span class="token variable">$ivlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">iv</span> <span class="token operator">=</span> <span class="token variable">$iv</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">self</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span> <span class="token keyword">instanceof</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">encrypt</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$plainText</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">openssl_encrypt</span><span class="token punctuation">(</span><span class="token variable">$plainText</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'aes-256-ctr'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'secret'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">iv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">decrypt</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$ciphertext</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">openssl_decrypt</span><span class="token punctuation">(</span><span class="token variable">$ciphertext</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'aes-256-ctr'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'secret'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">iv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * FileWriter 文件保存类，充当子系统类。 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-05 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileWriter</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$ciphertext</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$fileNameDes</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$fileNameDes</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">,</span> <span class="token variable">$ciphertext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加密文件<code>src.txt</code>内容为</li></ul><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost Facade-Pattern]# echo 'hello,world!' &gt;  src.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>客户端测试</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$encryptFacade</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncryptFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$encryptFacade</span><span class="token operator">-&gt;</span><span class="token function">fileEncrypt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'src.txt'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'des.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>加密后的<code>des.txt</code>内容为</li></ul><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost Facade-Pattern]# cat des.txtpw2x3UEeO8GVjum36A==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-UML类图"><a href="#5-UML类图" class="headerlink" title="5. UML类图"></a>5. UML类图</h3><p>示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/FacadePattern-1.png" alt="FacadePattern-1"></p><h3 id="6-外观模式的优点"><a href="#6-外观模式的优点" class="headerlink" title="6. 外观模式的优点"></a>6. 外观模式的优点</h3><p>外观模式的主要优点如下：</p><p>(1)它对客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。通过引入外观模式，客户端代码将变得很简单，与之关联的对象也很少。</p><p>(2)它实现了子系统与客户端之间的松耦合关系，这使得子系统的变化不会影响到调用它的客户端，只需要调整外观类即可。</p><p>(3)一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。</p><h3 id="7-外观模式的缺点"><a href="#7-外观模式的缺点" class="headerlink" title="7. 外观模式的缺点"></a>7. 外观模式的缺点</h3><p>外观模式的主要缺点如下：</p><p>(1)不能很好地限制客户端直接使用子系统类，如果对客户端访问子系统类做太多的限制则减少了可变性和灵活性。</p><p>(2)增加新的子系统可能需要修改外观类的源代码，违背了<strong>开闭原则</strong>。</p><h3 id="8-外观模式适用场景"><a href="#8-外观模式适用场景" class="headerlink" title="8. 外观模式适用场景"></a>8. 外观模式适用场景</h3><p>在以下情况下可以考虑使用外观模式：</p><p>(1)当要为访问一系列复杂的子系统提供一个简单入口时可以使用外观模式。</p><p>(2)客户端程序与多个子系统之间存在很大的依赖性。引入外观类可以将子系统与客户端解耦，从而提高子系统的独立性和可移植性。</p><p>(3)在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-结构型模式-组合模式 (Composite Pattern)</title>
      <link href="/2021/07/08/she-ji-mo-shi-zhi-jie-gou-xing-mo-shi-zu-he-mo-shi-composite-pattern/"/>
      <url>/2021/07/08/she-ji-mo-shi-zhi-jie-gou-xing-mo-shi-zu-he-mo-shi-composite-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="组合模式-Composite-Pattern"><a href="#组合模式-Composite-Pattern" class="headerlink" title="组合模式 (Composite Pattern)"></a>组合模式 (Composite Pattern)</h1><hr><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>树形结构在软件中随处可见，例如操作系统中的目录结构、应用软件中的菜单、办公系统中的公司组织结构等等，如何运用面向对象的方式来处理这种树形结构是组合模式需要解决的问题，组合模式通过一种巧妙的设计方案使得用户可以一致性地处理整个树形结构或者树形结构的一部分，也可以一致性地处理树形结构中的叶子节点（不包含子节点的节点）和树枝节点（包含子节点的节点）。</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/tree.png" alt="tree"></p><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><blockquote><p>组合模式 (Composite Pattern)：组合多个对象形成树形结构以表示具有“整体—部分”关系的层次结构。组合模式对单个对象（即叶子对象）和组合对象（即树枝对象）的使用具有一致性，组合模式又可以称为“整体—部分”(Part-Whole)模式。</p></blockquote><p>组合模式是一种<strong>对象结构型模式</strong>。</p><h3 id="2-组合模式结构"><a href="#2-组合模式结构" class="headerlink" title="2. 组合模式结构"></a>2. 组合模式结构</h3><p>组合模式包含如下角色：</p><ul><li><p><code>Component</code>：<strong>抽象构件</strong></p><ul><li>它可以是接口或抽象类，为树叶构件和树枝构件对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现。在抽象构件中定义了访问及管理它的子构件的方法，如增加子构件、删除子构件、获取子构件等。</li></ul></li><li><p><code>Leaf</code>：<strong>树叶构件</strong></p><ul><li>它在组合结构中表示叶子节点对象，叶子节点没有子节点，它实现了在抽象构件中定义的行为。对于那些访问及管理子构件的方法，可以通过异常等方式进行处理。</li></ul></li><li><p><code>Composite</code>：<strong>树枝构件</strong></p><ul><li>它在组合结构中表示树枝节点对象，树枝节点包含子节点，其子节点可以是叶子节点，也可以是树枝节点，它提供一个集合用于存储子节点，实现了在抽象构件中定义的行为，包括那些访问及管理子构件的方法，在其业务方法中可以递归调用其子节点的业务方法。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/Composite-Pattern-0.jpg" alt="Composite-Pattern-0.jpg"></p><h3 id="3-组合模式应用实例"><a href="#3-组合模式应用实例" class="headerlink" title="3. 组合模式应用实例"></a>3. 组合模式应用实例</h3><p>下面通过一个实例进一步学习和理解组合模式。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><p>在Dendi软件公司的内部办公系统OA系统中，有一个与公司组织结构对应的树形菜单，行政人员可以给各级单位下发通知，这些单位可以是总公司的一个部门，也可以是一个分公司，还可以是分公司的一个部门。用户只需要选择一个根节点即可实现通知的下发操作，而无须关心具体的实现细节。</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">└── Dendi公司北京总部    ├── 上海分公司    │&nbsp;&nbsp; ├── 上海分公司财务部    │&nbsp;&nbsp; ├── 上海分公司人力资源部    │&nbsp;&nbsp; └── 上海分公司研发部    ├── 深圳分公司    │&nbsp;&nbsp; ├── 深圳分公司财务部    │&nbsp;&nbsp; ├── 深圳分公司人力资源部    │&nbsp;&nbsp; └── 深圳分公司研发部    ├── 总公司财务部    ├── 总公司人力资源部    └── 总公司研发部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><ul><li>Units：<code>抽象构件</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 抽象单位类：抽象构件 * 这里单位即可以是某个部门，也可以某个公司 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-07-22 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Units</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 下发通知 */</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sendNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Company： <code>树枝构件角色</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 公司类：树枝构件角色 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-07-22 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Company</span> <span class="token keyword">extends</span> <span class="token class-name">Units</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 单位的集合，用于存储Units类型的成员     *     * @var array     */</span>    <span class="token keyword">private</span> <span class="token variable">$unitList</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Units</span> <span class="token variable">$u</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">unitList</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$u</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">remove</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Units</span> <span class="token variable">$u</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">unitList</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">unitList</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getChild</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$i</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">unitList</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sendNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"*****%s收到通知*****\n"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 递归调用子构件的sendNotify()方法 */</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">unitList</span> <span class="token keyword">as</span> <span class="token variable">$unit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$unit</span><span class="token operator">-&gt;</span><span class="token function">sendNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ResearchDepartment、FinanceDepartment、HRDepartment： <code>树叶构件角色</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 研发部：树叶构件角色 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-07-22 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ResearchDepartment</span> <span class="token keyword">extends</span> <span class="token class-name">Units</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sendNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"-----%s收到通知-----\n"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 财务部：树叶构件角色 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-07-22 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FinanceDepartment</span> <span class="token keyword">extends</span> <span class="token class-name">Units</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sendNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"-----%s收到通知-----\n"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 人力资源部：树叶构件角色 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-07-22 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HRDepartment</span> <span class="token keyword">extends</span> <span class="token class-name">Units</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sendNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"-----%s收到通知-----\n"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端测试代码</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 客户端测试代码 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-07-22 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Client</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$rootCompany</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Dendi公司北京总部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shangHaiCompany</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"上海分公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shenZhenCompany</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"深圳分公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rootRD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResearchDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"总公司研发部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rootFD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinanceDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"总公司财务部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rootHRD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HRDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"总公司人力资源部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shangHaiRD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResearchDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"上海分公司研发部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shangHaiFD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinanceDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"上海分公司财务部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shangHaiHRD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HRDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"上海分公司人力资源部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shenZhenRD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResearchDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"深圳分公司研发部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shenZhenFD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinanceDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"深圳分公司财务部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shenZhenHRD</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HRDepartment</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"深圳分公司人力资源部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shangHaiCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$shangHaiRD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shangHaiCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$shangHaiFD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shangHaiCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$shangHaiHRD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shenZhenCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$shenZhenRD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shenZhenCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$shenZhenFD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$shenZhenCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$shenZhenHRD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rootCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$rootRD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rootCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$rootFD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rootCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$rootHRD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rootCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$shangHaiCompany</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rootCompany</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$shenZhenCompany</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从"北京总部"节点开始下发通知</span>        <span class="token variable">$rootCompany</span><span class="token operator">-&gt;</span><span class="token function">sendNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>以上例程会输出：<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>Dendi公司北京总部收到通知<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>总公司研发部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>总公司财务部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>总公司人力资源部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>上海分公司收到通知<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>上海分公司研发部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>上海分公司财务部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>上海分公司人力资源部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>深圳分公司收到通知<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>深圳分公司研发部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>深圳分公司财务部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>深圳分公司人力资源部收到通知<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-UML类图"><a href="#4-UML类图" class="headerlink" title="4. UML类图"></a>4. UML类图</h3><p>示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/Composite-Pattern-1.png" alt="Composite-Pattern-1"></p><h3 id="5-组合模式总结"><a href="#5-组合模式总结" class="headerlink" title="5. 组合模式总结"></a>5. 组合模式总结</h3><ul><li><p>组合模式的关键是定义了一个抽象构件类，它既可以代表叶子，又可以代表树枝，而客户端针对该抽象构件类进行编程，无须知道它到底表示的是叶子还是树枝，可以对其进行统一处理。同时树枝对象与抽象构件类之间还建立一个聚合关联关系，在树枝对象中既可以包含叶子，也可以包含树枝，以此实现递归组合，形成一个树形结构。</p></li><li><p>在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式两种形式：</p></li></ul><p>(1)透明组合模式<br>透明组合模式中，抽象构件Component中声明了所有用于管理成员对象的方法，包括add()、remove()以及getChild()等方法，这样做的好处是确保所有的构件类都有相同的接口。在客户端看来，叶子对象与树枝对象所提供的方法是一致的，客户端可以相同地对待所有的对象。透明组合模式也是组合模式的标准形式，因为在叶子构件中需要实现在抽象构件类中声明的所有方法，包括业务方法以及管理和访问子构件的方法，但是叶子构件不能再包含子构件，因此在叶子构件中实现子构件管理和访问方法时需要提供异常处理或错误提示。</p><p>(2)安全组合模式<br>安全组合模式中，在抽象构件Component中没有声明任何用于管理成员对象的方法，而是在Composite类中声明并实现这些方法。这种做法是安全的，因为根本不向叶子对象提供这些管理成员对象的方法，对于叶子对象，客户端不可能调用到这些方法。</p><p>安全组合模式的缺点是不够透明，因为叶子构件和树枝构件具有不同的方法，且树枝构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和树枝构件。在实际应用中，安全组合模式的使用频率也非常高。</p><h3 id="6-组合模式的优点"><a href="#6-组合模式的优点" class="headerlink" title="6. 组合模式的优点"></a>6. 组合模式的优点</h3><p>组合模式的主要优点如下：</p><p>(1)组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。</p><p>(2)客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。</p><p>(3)在组合模式中增加新的树枝构件和叶子构件都很方便，无须对现有类库进行任何修改，符合“开闭原则”。</p><p>(4)组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子对象和树枝对象的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</p><h3 id="7-组合模式的缺点"><a href="#7-组合模式的缺点" class="headerlink" title="7. 组合模式的缺点"></a>7. 组合模式的缺点</h3><p>组合模式的主要缺点如下：</p><p>在增加新构件时很难对树枝构件中的构件类型进行限制。有时候我们希望一个树枝构件中只能有某些特定类型的对象，例如在某个文件夹中只能包含文本文件，使用组合模式时，不能依赖类型系统来施加这些约束，因为它们都来自于相同的抽象层，在这种情况下，必须通过在运行时进行类型检查来实现，这个实现过程较为复杂。</p><h3 id="8-组合模式适用场景"><a href="#8-组合模式适用场景" class="headerlink" title="8.组合模式适用场景"></a>8.组合模式适用场景</h3><p>在以下情况下可以考虑使用组合模式：</p><p>(1)在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，客户端可以一致地对待它们。</p><p>(2)在一个使用面向对象语言开发的系统中需要处理一个树形结构。</p><p>(3)在一个系统中能够分离出叶子对象和树枝对象，而且它们的类型不固定，需要增加一些新的类型。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-结构型模式-装饰模式 (Decorator Pattern)</title>
      <link href="/2021/07/06/she-ji-mo-shi-zhi-jie-gou-xing-mo-shi-zhuang-shi-mo-shi-decorator-pattern/"/>
      <url>/2021/07/06/she-ji-mo-shi-zhi-jie-gou-xing-mo-shi-zhuang-shi-mo-shi-decorator-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰模式-Decorator-Pattern"><a href="#装饰模式-Decorator-Pattern" class="headerlink" title="装饰模式 (Decorator Pattern)"></a>装饰模式 (Decorator Pattern)</h1><hr><h3 id="0、早餐店的故事"><a href="#0、早餐店的故事" class="headerlink" title="0、早餐店的故事"></a>0、早餐店的故事</h3><ul><li>我们借助早餐店的故事来认识一下装饰模式。小张刚创业一个人开了一家早餐店提供煎饼、手抓饼出售，现在需要实现一个制作面饼的系统。</li></ul><blockquote><ul><li>实现方案</li></ul></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 一个各种面饼的制作接口 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-30 13:55:28 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">Pie</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 煎饼套餐：加鸡蛋、香肠、番茄酱 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-30 14:16:40 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">JianBing</span> <span class="token keyword">implements</span> <span class="token class-name">Pie</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"普通的煎饼"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">attachEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token operator">-&gt;</span><span class="token function">attachSausage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token operator">-&gt;</span><span class="token function">attachKetchup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+鸡蛋"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachSausage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+香肠"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachKetchup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+番茄酱"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 手抓饼套餐：加鸡蛋、油条、辣椒酱 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-30 13:58:45 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ShouZhuaBing</span> <span class="token keyword">implements</span> <span class="token class-name">Pie</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"普通的手抓饼"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">attachEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token operator">-&gt;</span><span class="token function">attachCruller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token operator">-&gt;</span><span class="token function">attachChiliPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+鸡蛋"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachCruller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+油条"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachChiliPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+辣椒酱"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 早餐类，出售各种面饼 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-30 14:03:50 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Breakfast</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$pie</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Pie</span> <span class="token variable">$pie</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pie</span> <span class="token operator">=</span> <span class="token variable">$pie</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pie</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//Client 调用</span><span class="token variable">$breakfastOne</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Breakfast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JianBing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$breakfastOne</span><span class="token operator">-&gt;</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//普通的煎饼+鸡蛋+香肠+番茄酱</span><span class="token variable">$breakfastTwo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Breakfast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShouZhuaBing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$breakfastTwo</span><span class="token operator">-&gt;</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//普通的手抓饼+鸡蛋+油条+辣椒酱</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li><p>由于小张每天起早贪黑的努力工作生意越来越好，娶上了媳妇现在多了一个帮手，小张想要扩张一下出售面饼的各类，还想要出售鸡蛋灌饼、葱花鸡蛋饼等。原来的面饼系统就出现了一些问题</p><ul><li>每增加一种面饼种类就要增加一个该面饼的实现类。</li><li>随着面饼种类越来越多类的数量也就越多，类的维护成本就很大。</li><li>面饼的制作不够灵活，制作方法里硬编码了制作的配料。</li><li>公用的配料制作方法没有得到复用，比如鸡蛋配料方法。</li></ul></li><li><p>问：那小张该如何做？</p><ul><li>答：请看下面的<strong>装饰模式</strong></li></ul></li></ul><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><p>装饰模式 (Decorator Pattern)：它属于对象<strong>结构型模式</strong>。动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更加灵活。</p><h3 id="2-模式结构"><a href="#2-模式结构" class="headerlink" title="2. 模式结构"></a>2. 模式结构</h3><p>装饰模式包含如下角色：</p><ul><li><p><code>Component</code>：抽象构件类</p><ul><li>定义一个对象接口，可以给这些对象动态地添加职责（方法）。</li></ul></li><li><p><code>ConcreteComponent</code>：具体构件类</p><ul><li>定义了具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）。</li></ul></li><li><p><code>Decorator</code>：抽象装饰类</p><ul><li>抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。</li></ul></li><li><p><code>ConcreteDecorator</code>：具体装饰类</p><ul><li>具体装饰类是抽象装饰类的子类，负责向构件中添加新的职责。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/DecoratorPattern-0.png" alt="DecoratorPattern-0.png"></p><h3 id="3-装饰模式实现的面饼系统代码示例"><a href="#3-装饰模式实现的面饼系统代码示例" class="headerlink" title="3. 装饰模式实现的面饼系统代码示例"></a>3. 装饰模式实现的面饼系统代码示例</h3><ul><li>Grain：抽象构件类</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 一个制作杂粮的接口 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 12:14:38 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">Grain</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JianBing、ShouZhuaBing：具体构件类</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 煎饼类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 12:14:38 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">JianBing</span> <span class="token keyword">implements</span> <span class="token class-name">Grain</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"普通的煎饼"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 手抓饼类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 12:14:38 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ShouZhuaBing</span> <span class="token keyword">implements</span> <span class="token class-name">Grain</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"普通的手抓饼"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>GrainDecorator：抽象装饰类</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 面饼装饰抽象类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 13:14:42 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">GrainDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">Grain</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$grain</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Grain</span> <span class="token variable">$grain</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">grain</span> <span class="token operator">=</span> <span class="token variable">$grain</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">grain</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Egg、Sausage、Ketchup、Cruller、ChiliPaste：具体装饰类</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">**</span> <span class="token operator">*</span> 鸡蛋装饰类 <span class="token operator">*</span> <span class="token operator">*</span> @author     <span class="token operator">&lt;</span>dendi875@<span class="token number">163.</span>com<span class="token operator">&gt;</span> <span class="token operator">*</span> @createDate <span class="token number">2018</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">31</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">42</span> <span class="token operator">*</span> @copyright  <span class="token function">Copyright</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2018</span> dendi875@<span class="token number">163.</span>com <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Egg</span> <span class="token keyword">extends</span> <span class="token class-name">GrainDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Grain</span> <span class="token variable">$grain</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$grain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">attachEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachEgg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+鸡蛋"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 香肠装饰类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 13:15:54 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sausage</span> <span class="token keyword">extends</span> <span class="token class-name">GrainDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Grain</span> <span class="token variable">$grain</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$grain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">attachSausage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachSausage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+香肠"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 番茄酱装饰类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 13:16:36 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Ketchup</span> <span class="token keyword">extends</span> <span class="token class-name">GrainDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Grain</span> <span class="token variable">$grain</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$grain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">attachKetchup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachKetchup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+番茄酱"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 油条装饰类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 13:16:55 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Cruller</span> <span class="token keyword">extends</span> <span class="token class-name">GrainDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Grain</span> <span class="token variable">$grain</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$grain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">attachCruller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachCruller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+油条"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 辣椒酱装饰类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 13:17:17 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ChiliPaste</span> <span class="token keyword">extends</span> <span class="token class-name">GrainDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Grain</span> <span class="token variable">$grain</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$grain</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">attachChiliPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">attachChiliPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"+辣椒酱"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-客户端的使用"><a href="#4-客户端的使用" class="headerlink" title="4. 客户端的使用"></a>4. 客户端的使用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 早餐类，出售各种面饼 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-31 13:22:19 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Breakfast</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$grain</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Grain</span> <span class="token variable">$grain</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">grain</span> <span class="token operator">=</span> <span class="token variable">$grain</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">grain</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//Client 调用</span><span class="token comment">//制作一套煎饼</span><span class="token variable">$pie</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ketchup</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sausage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Egg</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JianBing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$breakfast</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Breakfast</span><span class="token punctuation">(</span><span class="token variable">$pie</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$breakfast</span><span class="token operator">-&gt;</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//普通的煎饼+鸡蛋+香肠+番茄酱</span><span class="token comment">//Client 调用</span><span class="token comment">//制作一套手抓饼</span><span class="token variable">$pie</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChiliPaste</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cruller</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Egg</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShouZhuaBing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$breakfast</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Breakfast</span><span class="token punctuation">(</span><span class="token variable">$pie</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$breakfast</span><span class="token operator">-&gt;</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//普通的手抓饼+鸡蛋+油条+辣椒酱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-UML类图"><a href="#5-UML类图" class="headerlink" title="5. UML类图"></a>5. UML类图</h3><p>装饰模式实现的面饼系统示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/DecoratorPattern-1.png" alt="DecoratorPattern-1.png"></p><p>现在的面饼系统就变得强大了许多，可以按照顾客的需求用各种配料来装饰面饼而且装饰的顺序也很灵活，各种配料也能得以<strong>复用</strong>（同种配料可以被不同种类面饼利用），系统也很容易维护。</p><h3 id="6-模式分析"><a href="#6-模式分析" class="headerlink" title="6. 模式分析"></a>6. 模式分析</h3><ul><li>与继承关系相比，关联关系的主要优势在于不会破坏类的封装性，而且继承是一种耦合度较大的静态关系，无法在程序运行时动态扩展。在软件开发阶段，关联关系虽然不会比继承关系减少编码量，但是到了软件维护阶段，由于关联关系使系统具有较好的松耦合性，因此使得系统更加容易维护。</li><li>装饰模式把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象，因此，当需要执行特殊行为时，客户端代码就可以在运行时根据需要有选择地、按顺序地使用装饰功能包装对象。</li></ul><h3 id="7-装饰模式的优点"><a href="#7-装饰模式的优点" class="headerlink" title="7. 装饰模式的优点"></a>7. 装饰模式的优点</h3><ul><li>装饰模式与继承关系的目的都是要扩展对象的功能，但是装饰模式可以提供比继承更多的灵活性。</li><li>通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合。可以使用多个具体装饰类来装饰同一对象，得到功能更为强大的对象。</li><li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，在使用时再对其进行组合，原有代码无须改变，符合<strong>开闭原则</strong>。</li><li>有效地把类的核心职责和装饰功能区分开了。而且可以去除相关类中重复的装饰逻辑。</li></ul><h3 id="8-装饰模式的缺点"><a href="#8-装饰模式的缺点" class="headerlink" title="8. 装饰模式的缺点"></a>8. 装饰模式的缺点</h3><ul><li>使用装饰模式进行系统设计时将产生很多具体装饰类，将增加系统的复杂度，加大学习与理解的难度。</li><li>这种比继承更加灵活机动的特性，也同时意味着装饰模式比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐。</li></ul><h3 id="9-适用场景"><a href="#9-适用场景" class="headerlink" title="9. 适用场景"></a>9. 适用场景</h3><p>以下情况可以使用装饰模式：</p><ul><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li><li>需要动态地给一个对象增加功能，这些功能也可以动态地被撤销。</li><li>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。不能采用继承的情况主要有两类：第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因为类定义不能继承（如final类）。</li></ul><h3 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h3><ul><li>一个装饰类的接口必须与被装饰类的接口保持相同，对于客户端来说无论是装饰之前的对象还是装饰之后的对象都可以一致对待。</li><li>尽量保持具体构件类<code>Component</code>作为一个“轻”类，也就是说不要把太多的逻辑和状态放在具体构件类中，可以通过装饰。</li><li>如果只有一个具体构件类而没有抽象构件类，那么抽象装饰类可以作为具体构件类的直接子类。</li><li>如果只有一个具体装饰类，那么就没有必要建立一个单独的<code>Decorator</code>，可以把<code>Decorator</code>和<code>ConcreteDecorator</code>的责任合并成一个类。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-结构型模式-适配器模式 (Adapter Pattern)</title>
      <link href="/2021/07/01/she-ji-mo-shi-zhi-jie-gou-xing-mo-shi-gua-pei-qi-mo-shi-adapter-pattern/"/>
      <url>/2021/07/01/she-ji-mo-shi-zhi-jie-gou-xing-mo-shi-gua-pei-qi-mo-shi-adapter-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式-Adapter-Pattern"><a href="#适配器模式-Adapter-Pattern" class="headerlink" title="适配器模式 (Adapter Pattern)"></a>适配器模式 (Adapter Pattern)</h1><hr><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>我的笔记本电脑的工作电压是20V，而我国的家庭用电是220V，如何让20V的笔记本电脑能够在220V的电压下工作？答案是引入一个电源适配器(AC Adapter)，俗称充电器或变压器，有了这个电源适配器，生活用电和笔记本电脑即可兼容，如图1所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/ac.jpg" alt="ac"></p><p>图1 电源适配器示意图</p><p>在软件开发中，有时也存在类似这种不兼容的情况，我们也可以像引入一个电源适配器一样引入一个称之为适配器的角色来协调这些存在不兼容的结构，这种设计方案即为适配器模式。</p><p>与电源适配器相似，在适配器模式中引入了一个被称为适配器(Adapter)的包装类，而它所包装的对象称为适配者(Adaptee)，即被适配的类。适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器让那些由于接口不兼容而不能交互的类可以一起工作。</p><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><blockquote><p>适配器模式 (Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。</p></blockquote><p>适配器模式既可以作为<strong>类结构型模式</strong>，也可以作为<strong>对象结构型模式</strong>。</p><ul><li>适配器模式可以将一个类的接口和另一个类的接口匹配起来，而无须修改原来的适配者接口和抽象目标类接口。</li><li>在适配器模式定义中所提及的接口是指广义的接口，它可以表示一个方法或者方法的集合。</li><li>在适配器模式中，我们通过增加一个新的适配器类来解决接口不兼容的问题，使得原本没有任何关系的类可以协同工作。根据适配器类与适配者类的关系不同，适配器模式可分为对象适配器和类适配器两种，在对象适配器模式中，适配器与适配者之间是关联关系；在类适配器模式中，适配器与适配者之间是继承（或实现）关系。在实际开发中，对象适配器的使用频率更高。</li></ul><h3 id="2-对象适配器模式结构"><a href="#2-对象适配器模式结构" class="headerlink" title="2. 对象适配器模式结构"></a>2. 对象适配器模式结构</h3><p>对象适配器模式包含如下角色：</p><ul><li><p><code>Target</code>：<strong>目标抽象类</strong></p><ul><li>目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</li></ul></li><li><p><code>Adaptee</code>：<strong>适配者类</strong></p><ul><li>适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体的类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</li></ul></li><li><p><code>Adapter</code>：<strong>适配器类</strong></p><ul><li>适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Targe并关联一个Adaptee对象使二者产生联系。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/Adapter-Pattern-0.jpg" alt="Adapter-Pattern-0"></p><p>根据对象适配器模式结构图，在对象适配器中，客户端需要调用request()方法，而适配者类Adaptee没有该方法，但是它所提供的specificRequest()方法却是客户端所需要的。为了使客户端能够使用适配者类，需要提供一个包装类Adapter，即适配器类。这个包装类包装了一个适配者的实例，从而将客户端与适配者衔接起来，在适配器的request()方法中调用适配者的specificRequest()方法。因为适配器类与适配者类是关联关系（也可称之为委派关系），所以这种适配器模式称为对象适配器模式。</p><h3 id="3-适配器模式应用实例"><a href="#3-适配器模式应用实例" class="headerlink" title="3. 适配器模式应用实例"></a>3. 适配器模式应用实例</h3><p>下面通过一个实例进一步学习和理解适配器模式。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><blockquote><p>Sunny软件公司在很久以前曾开发了一个算法库，里面包含了一些常用的算法，例如排序算法和查找算法，在进行各类软件开发时经常需要重用该算法库中的算法。在为某学校开发教务管理系统时，开发人员发现需要对学生成绩进行排序和查找，该系统的设计人员已经开发了一个成绩操作接口ScoreOperation，在该接口中声明了排序方法<code>arraySort(array $list): array</code>和查找方法<code>arraySearch(int $needle, array $haystack): int</code>，为了提高排序和查找的效率，开发人员决定重用算法库中的快速排序算法类QuickSort和二分查找算法类BinarySearch，其中QuickSort的<code>qSort(array $list): array</code>方法实现了快速排序，BinarySearch的<code>binsearch(array $arr, int $start, int $end, int $needle): int</code>方法实现了二分查找。</p></blockquote><p>由于某些原因，现在Sunny公司开发人员已经找不到该算法库的源代码，无法直接通过复制和粘贴操作来重用其中的代码；部分开发人员已经针对ScoreOperation接口编程，如果再要求对该接口进行修改或要求大家直接使用QuickSort类和BinarySearch类将导致大量代码需要修改。</p><p>Sunny软件公司开发人员面对这个没有源码的算法库，遇到一个幸福而又烦恼的问题：如何在既不修改现有接口又不需要任何算法库代码的基础上能够实现算法库的重用？</p><p>通过分析，我们不难得知，现在Sunny软件公司面对的问题有点类似本章最开始所提到的电压问题，成绩操作接口ScoreOperation好比只支持20V电压的笔记本，而算法库好比220V的家庭用电，这两部分都没有办法再进行修改，而且它们原本是两个完全不相关的结构，如图2所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/algorithm.jpg" alt="algorithm"></p><p>图2 需协调的两个系统的结构示意图</p><p>解决方案：我们需要ScoreOperation接口能够和已有算法库一起工作，让它们在同一个系统中能够兼容，最好的实现方法是增加一个类似电源适配器一样的适配器角色，通过适配器来协调这两个原本不兼容的结构。</p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><ul><li>ScoreOperation：<code>目标抽象类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 抽象成绩操作类：目标抽象类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-06-25 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">ScoreOperation</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">arraySort</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">arraySearch</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$needle</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$haystack</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>QuickSort、BinarySearch： <code>适配者类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 快速排序类：适配者 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-06-25 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">QuickSort</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">qSort</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$list</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$baseValue</span> <span class="token operator">=</span> <span class="token variable">$list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$leftArray</span> <span class="token operator">=</span> <span class="token variable">$rightArray</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$value</span> <span class="token operator">&lt;</span> <span class="token variable">$baseValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$leftArray</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$rightArray</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$leftArray</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">qSort</span><span class="token punctuation">(</span><span class="token variable">$leftArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rightArray</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">qSort</span><span class="token punctuation">(</span><span class="token variable">$rightArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$leftArray</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$baseValue</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$rightArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 二分查找类：适配者 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-06-25 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">BinarySearch</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">binsearch</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$start</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$end</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$needle</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$start</span> <span class="token operator">&gt;</span> <span class="token variable">$end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$mid</span> <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$end</span> <span class="token operator">+</span> <span class="token variable">$start</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$mid</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token variable">$needle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">binsearch</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$start</span><span class="token punctuation">,</span> <span class="token variable">$end</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$needle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$mid</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$needle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">binsearch</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$start</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$end</span><span class="token punctuation">,</span> <span class="token variable">$needle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$mid</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>OperationAdapter： <code>适配器类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 操作适配器：适配器类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-06-25 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ScoreOperation</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$sortObj</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$searchObj</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sortObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">searchObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">arraySort</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sortObj</span><span class="token operator">-&gt;</span><span class="token function">qSort</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">arraySearch</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$needle</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$haystack</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">searchObj</span><span class="token operator">-&gt;</span><span class="token function">binsearch</span><span class="token punctuation">(</span><span class="token variable">$haystack</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$haystack</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$needle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端测试代码</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/* 定义成绩数组 */</span><span class="token variable">$scores</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$operation</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$operation</span><span class="token operator">-&gt;</span><span class="token function">arraySort</span><span class="token punctuation">(</span><span class="token variable">$scores</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"成绩排序结果："</span><span class="token operator">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//output：成绩排序结果：50,69,76,84,88,90,90,91,96</span><span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token variable">$operation</span><span class="token operator">-&gt;</span><span class="token function">arraySearch</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token variable">$operation</span><span class="token operator">-&gt;</span><span class="token function">arraySearch</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$key3</span> <span class="token operator">=</span> <span class="token variable">$operation</span><span class="token operator">-&gt;</span><span class="token function">arraySearch</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"查找成绩为90的索引位置："</span><span class="token operator">.</span><span class="token variable">$key1</span><span class="token punctuation">;</span>   <span class="token comment">//output：查找成绩为90的索引位置：5</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"查找成绩84的索引位置："</span><span class="token operator">.</span><span class="token variable">$key2</span><span class="token punctuation">;</span>   <span class="token comment">//output：查查找成绩84的索引位置：3</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"查找成绩100的索引位置："</span><span class="token operator">.</span><span class="token variable">$key3</span><span class="token punctuation">;</span>  <span class="token comment">//output：查找成绩100的索引位置：-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-UML类图"><a href="#4-UML类图" class="headerlink" title="4. UML类图"></a>4. UML类图</h3><p>示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/AdapterPattern-1.png" alt="AdapterPattern-1"></p><h3 id="5-适配器模式的优点"><a href="#5-适配器模式的优点" class="headerlink" title="5. 适配器模式的优点"></a>5. 适配器模式的优点</h3><p>适配器模式的主要优点如下：</p><p>(1)将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。</p><p>(2)增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用。</p><p>(3)一个对象适配器可以把多个不同的适配者适配到同一个目标。</p><h3 id="6-适配器模式的缺点"><a href="#6-适配器模式的缺点" class="headerlink" title="6. 适配器模式的缺点"></a>6. 适配器模式的缺点</h3><p>类适配器模式的主要缺点如下：</p><p>(1)PHP不支持多继承，一次最多只能适配一个适配者类，不能同时适配多个适配者；但可以通过<code>Trait</code>来减少单继承的限制。</p><p>(2)适配者类不能为最终类，如在PHP中不能为final类；</p><p>对象适配器模式的缺点如下：</p><p>与类适配器模式相比，要在适配器中置换适配者类的某些方法比较麻烦。如果一定要置换掉适配者类的一个或多个方法，可以先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p><h3 id="7-适配器模式适用场景"><a href="#7-适配器模式适用场景" class="headerlink" title="7.适配器模式适用场景"></a>7.适配器模式适用场景</h3><p>在以下情况下可以考虑使用适配器模式：</p><p>(1)系统需要使用一些现有的类，而这些类的接口（如方法名）不符合系统的需要，甚至没有这些类的源代码。</p><p>(2) 想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-创建型模式-原型模式 (Prototype Pattern)</title>
      <link href="/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-yuan-xing-mo-shi-prototype-pattern/"/>
      <url>/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-yuan-xing-mo-shi-prototype-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="原型模式-Prototype-Pattern"><a href="#原型模式-Prototype-Pattern" class="headerlink" title="原型模式 (Prototype Pattern)"></a>原型模式 (Prototype Pattern)</h1><hr><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>有些时候，我们需要创建多个类似的大对象，如果每次去new，初始化开销很大，这个时候我们先new一个模版对象，然后其它实例都去clone这个模版，这样可以节约不少性能。这个模版就是原型（Prototype）,原型模式比单纯的clone要稍微升级一下。</p><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><p>原型模式 (Prototype Pattern)：它属于对象<strong>创建型模式</strong>。用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><h3 id="2-模式结构"><a href="#2-模式结构" class="headerlink" title="2. 模式结构"></a>2. 模式结构</h3><p>原型模式包含如下角色：</p><ul><li><p><code>Prototype</code>：<strong>抽象原型角色</strong></p><ul><li>声明一个克隆自身的接口。</li></ul></li><li><p><code>ConcretePrototype</code>：<strong>具体原型角色</strong></p><ul><li>实现一个克隆自身的操作。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/PrototypePattern-0.png" alt="PrototypePattern-0"></p><h3 id="3-浅复制和深复制"><a href="#3-浅复制和深复制" class="headerlink" title="3. 浅复制和深复制"></a>3. 浅复制和深复制</h3><p>用示例说明一下PHP中浅复制和深复制</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 员工类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-04-21 14:14:48 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">/**     * @var string     */</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @var Account     */</span>    <span class="token keyword">public</span> <span class="token variable">$account</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Account</span> <span class="token variable">$account</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">account</span> <span class="token operator">=</span> <span class="token variable">$account</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 账户类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-04-21 14:22:04 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Account</span><span class="token punctuation">{</span>    <span class="token comment">/**     * @var float     */</span>    <span class="token keyword">public</span> <span class="token variable">$balance</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">float</span> <span class="token variable">$balance</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">balance</span> <span class="token operator">=</span> <span class="token variable">$balance</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$p1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'小明'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p2</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$p1</span><span class="token punctuation">;</span><span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">account</span><span class="token operator">-&gt;</span><span class="token property">balance</span> <span class="token operator">=</span> <span class="token number">20000.00</span><span class="token punctuation">;</span><span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'小王'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//小王</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">account</span><span class="token operator">-&gt;</span><span class="token property">balance</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//20000</span><span class="token keyword">echo</span> <span class="token variable">$p2</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//小明</span><span class="token keyword">echo</span> <span class="token variable">$p2</span><span class="token operator">-&gt;</span><span class="token property">account</span><span class="token operator">-&gt;</span><span class="token property">balance</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//20000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例结果可以看出<code>$p2</code>对象是<code>$p1</code>clone后的一个副本，修改了<code>$p1</code>对象<code>name</code>值后<code>$p2</code>的<code>name</code>值并未改变（是我们所期望的），但<code>$p1</code>中的<code>account</code>属性是一个指向<code>Account</code>对象的引用，clone后<code>$p2</code>和原来的<code>$p1</code>的<code>account</code>还是指向同一个对象（这显然不是我们所期望的），这就是<strong>浅复制</strong></li></ul><p>改造<code>Person</code>类后的<strong>深复制</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 员工类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-04-21 14:14:48 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">/**     * @var string     */</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @var Account     */</span>    <span class="token keyword">public</span> <span class="token variable">$account</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Account</span> <span class="token variable">$account</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">account</span> <span class="token operator">=</span> <span class="token variable">$account</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">account</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">account</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$p1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'小明'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$p2</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$p1</span><span class="token punctuation">;</span><span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">account</span><span class="token operator">-&gt;</span><span class="token property">balance</span> <span class="token operator">=</span> <span class="token number">20000.00</span><span class="token punctuation">;</span><span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'小王'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//小王</span><span class="token keyword">echo</span> <span class="token variable">$p1</span><span class="token operator">-&gt;</span><span class="token property">account</span><span class="token operator">-&gt;</span><span class="token property">balance</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//20000</span><span class="token keyword">echo</span> <span class="token variable">$p2</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//小明</span><span class="token keyword">echo</span> <span class="token variable">$p2</span><span class="token operator">-&gt;</span><span class="token property">account</span><span class="token operator">-&gt;</span><span class="token property">balance</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-基于深复制的原型模式示例"><a href="#4-基于深复制的原型模式示例" class="headerlink" title="4. 基于深复制的原型模式示例"></a>4. 基于深复制的原型模式示例</h3><p>我们现在正开发一个游戏，有不同的地图，地图大小都是一样的，并且都有海洋，但是不同的地图温度不一样。</p><ul><li>MapPrototype：抽象原型类</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 抽象地图原型类，地图有长、宽、海洋 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-04-21 13:45:27 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MapPrototype</span><span class="token punctuation">{</span>    <span class="token comment">/**     * @var int     */</span>    <span class="token keyword">public</span> <span class="token variable">$width</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @var int     */</span>    <span class="token keyword">public</span> <span class="token variable">$height</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @var Sea     */</span>    <span class="token keyword">public</span> <span class="token variable">$sea</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @param array $attributes     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setAttribute</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$attributes</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=&gt;</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @return void     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Map：具体原型类</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 具体原型类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-04-21 13:50:40 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Map</span> <span class="token keyword">extends</span> <span class="token class-name">MapPrototype</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sea</span>  <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sea</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Sea：海洋类</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 海洋类 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-04-21 13:52:16 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sea</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'蓝色'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-客户端的使用"><a href="#5-客户端的使用" class="headerlink" title="5. 客户端的使用"></a>5. 客户端的使用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//先创建一个原型对象</span><span class="token variable">$mapPrototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token variable">$mapPrototype</span><span class="token operator">-&gt;</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'width'</span><span class="token operator">=&gt;</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'height'</span><span class="token operator">=&gt;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sea'</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sea</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原型对象已经有了（模版已经有了），如果我们需要一个新的map对象只需要克隆一下模版就行</span><span class="token variable">$newMap1</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$mapPrototype</span><span class="token punctuation">;</span><span class="token variable">$newMap1</span><span class="token operator">-&gt;</span><span class="token property">sea</span><span class="token operator">-&gt;</span><span class="token property">color</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'深蓝'</span><span class="token punctuation">;</span> <span class="token comment">//给第一张地图的海洋换个颜色</span><span class="token keyword">echo</span> <span class="token variable">$newMap1</span><span class="token operator">-&gt;</span><span class="token property">sea</span><span class="token operator">-&gt;</span><span class="token property">color</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//深蓝</span><span class="token comment">//需要第二张地图只需再克隆一下模版</span><span class="token variable">$newMap2</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$mapPrototype</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$newMap2</span><span class="token operator">-&gt;</span><span class="token property">sea</span><span class="token operator">-&gt;</span><span class="token property">color</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token comment">//蓝色，可以看出修改地图1海洋颜色并不影响地图2的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们可以发现利用原型模式，只需要实例并初始化一个地图原型对象。以后如果需要生产一个新的地图对象，都可以直接通过clone原型对象产生。省去了重新初始化的过程。</li></ul><h3 id="6-UML类图"><a href="#6-UML类图" class="headerlink" title="6. UML类图"></a>6. UML类图</h3><p>原型模式实现的地图示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/PrototypePattern-1.png" alt="PrototypePattern-1"></p><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><ul><li>原型模式是创建型模式的一种，其特点在于通过<strong>复制</strong>一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的<strong>原型</strong>，这个原型是可定制的。</li><li>原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-创建型模式-建造者模式 (Builder Pattern)</title>
      <link href="/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-jian-zao-zhe-mo-shi-builder-pattern/"/>
      <url>/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-jian-zao-zhe-mo-shi-builder-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="建造者模式-Builder-Pattern"><a href="#建造者模式-Builder-Pattern" class="headerlink" title="建造者模式 (Builder Pattern)"></a>建造者模式 (Builder Pattern)</h1><hr><h3 id="0-建造者模式概述"><a href="#0-建造者模式概述" class="headerlink" title="0. 建造者模式概述"></a>0. 建造者模式概述</h3><p>无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发动机等各种部件。而对于大多数用户而言，无须知道这些部件的装配细节，也几乎不会使用单独某个部件，而是使用一辆完整的汽车，可以通过建造者模式对其进行设计与描述，建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</p><p>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。</p><p>复杂对象相当于一辆有待建造的汽车，而对象的属性相当于汽车的部件，建造产品的过程就相当于组合部件的过程。由于组合部件的过程很复杂，因此，这些部件的组合过程往往被“外部化”到一个称作建造者的对象里，建造者返还给客户端的是一个已经建造完毕的完整产品对象，而用户无须关心该对象所包含的属性以及它们的组装方式，这就是建造者模式的模式动机。</p><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><blockquote><p>建造者模式 (Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p></blockquote><p>建造者模式又称为生成器模式，它是一种<strong>对象创建型模式</strong>。</p><h3 id="2-模式结构"><a href="#2-模式结构" class="headerlink" title="2. 模式结构"></a>2. 模式结构</h3><p>建造者模式包含如下角色：</p><ul><li><p><code>Builder</code>：<strong>抽象建造者</strong></p><ul><li>它为创建一个产品Product对象的各个部件指定抽象接口，在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是getResult()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。</li></ul></li><li><p><code>ConcreteBuilder</code>：<strong>具体建造者</strong></p><ul><li>它实现了Builder接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。</li></ul></li><li><p><code>Product</code>：<strong>产品角色</strong></p><ul><li>它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程。</li></ul></li><li><p><code>Director</code>：<strong>指挥者</strong></p><ul><li>指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象，然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者类中。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/BuilderPattern-0.png" alt="BuilderPattern-0"></p><h3 id="3-模式实现"><a href="#3-模式实现" class="headerlink" title="3. 模式实现"></a>3. 模式实现</h3><ul><li><p>建造者模式是较为复杂的创建型模式，它将客户端与包含多个组成部分（或部件）的复杂对象的创建过程分离，客户端无须知道复杂对象的内部组成部分与装配方式，只需要知道所需建造者的类型即可。它关注如何一步一步创建一个的复杂对象，不同的具体建造者定义了不同的创建过程，且具体建造者相互独立，增加新的建造者非常方便，无须修改已有代码，系统具有较好的扩展性。</p></li><li><p>在建造者模式的结构中引入了一个指挥者类Director，该类主要有两个作用：一方面它隔离了客户端与产品创建的过程；另一方面它控制产品的创建过程，包括某个buildPartX()方法是否被调用以及多个buildPartX()方法调用的先后次序等。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</p></li></ul><h3 id="4-建造者模式应用实例"><a href="#4-建造者模式应用实例" class="headerlink" title="4. 建造者模式应用实例"></a>4. 建造者模式应用实例</h3><p>下面通过一个实例进一步学习和理解建造者模式。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><p>现在需要开发一个创建RPG游戏角色的功能，像大多数RPG游戏一样不同类型的游戏角色，其性别、脸型、服装、发型等外部特性都有所差异，例如“天使”拥有美丽的面容和披肩的长发，并身穿一袭白裙；而“恶魔”极其丑陋，留着光头并穿一件刺眼的黑衣。</p><p>现使用建造者模式来实现游戏角色的创建。</p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><ul><li>Actor：<code>产品角色类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 游戏角色类(复杂产品类)，本例子成员属性(部件或零件)都是很简单的string，真实情况下 *可能会存在多个成员属性是其它类的对象，所以才构成一个复杂对象 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-12 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Actor</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 角色类型     * @var string     */</span>    <span class="token keyword">private</span> <span class="token variable">$type</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 角色性别     * @var string     */</span>    <span class="token keyword">private</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 角色脸形     * @var string     */</span>    <span class="token keyword">private</span> <span class="token variable">$face</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 角色服装     * @var string     */</span>    <span class="token keyword">private</span> <span class="token variable">$constume</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 角色发型     * @var string     */</span>    <span class="token keyword">private</span> <span class="token variable">$hairstype</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setType</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">type</span> <span class="token operator">=</span> <span class="token variable">$type</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setSex</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$sex</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sex</span> <span class="token operator">=</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setFace</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$face</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">face</span> <span class="token operator">=</span> <span class="token variable">$face</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setConstume</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$constume</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">constume</span> <span class="token operator">=</span> <span class="token variable">$constume</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setHairstype</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$hairstype</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">hairstype</span> <span class="token operator">=</span> <span class="token variable">$hairstype</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">type</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sex</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">face</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getConstume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">constume</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getHairstype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">hairstype</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ActorBuilder： <code>抽象建造者类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 角色建造器：抽象建造者 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-12 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">ActorBuilder</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 游戏角色产品对象     * @var Actor     */</span>    <span class="token keyword">protected</span> <span class="token variable">$actor</span><span class="token punctuation">;</span>    <span class="token comment">/**     *+-----------------------------------------------------------     *| 这里ActorBuilder 与 Actor 表现为组合关系。     *|----------------------------------------------------------     *| ActorBuilder为整体对象，Actor为成员对象。     *|-----------------------------------------------------------     *| 组合关系表示类之间整体和部分的关系，成员对象与整体对象之间     *| 具有同生共死的关系，一旦整体对象不存在，成员对象也将不存在。     *+-----------------------------------------------------------     *| 组合关系通常通过在整体类的构造方法中直接实例化成员类。     *+-----------------------------------------------------------     *     * @return Actor     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildConstume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 返回一个构建好的完整的游戏角色对象     *     * @return Actor     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Actor</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HeroBuilder、AngelBuilder、DevilBuilder： <code>具体建造类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 英雄角色建造器：具体建造者 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-12 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HeroBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">ActorBuilder</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'英雄'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setFace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'英俊'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildConstume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setConstume</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'盔甲'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setHairstype</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'飘逸'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 天使角色建造器：具体建造者 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-12 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">AngelBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">ActorBuilder</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'天使'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setFace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'漂亮'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildConstume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setConstume</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'白裙'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setHairstype</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'披肩长发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 恶魔角色建造器：具体建造者 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-12 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">DevilBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">ActorBuilder</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'恶魔'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'妖'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setFace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'丑陋'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildConstume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setConstume</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'黑衣'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">actor</span><span class="token operator">-&gt;</span><span class="token function">setHairstype</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'光头'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ActorDirector： <code>指挥者类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 游戏角色创建者：指挥者 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-12 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ActorDirector</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 逐步构建复杂产品对象     *+-----------------------------------------------------------     *| 这里ActorDirector 与 ActorBuilder 表现为是依赖关系。     *+-----------------------------------------------------------     *|依赖关系通常有三种方式来实现     *|1.将一个类的对象作为另一个类中方法的参数     *|2.一个类的方法中将另一个类的对象作为其局部变量     *|3.在一个类的方法中调用另一个类的静态方法     *+-----------------------------------------------------------     *     * @return Actor     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">build</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ActorBuilder</span> <span class="token variable">$actorBuilder</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Actor</span>    <span class="token punctuation">{</span>        <span class="token variable">$actorBuilder</span><span class="token operator">-&gt;</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$actorBuilder</span><span class="token operator">-&gt;</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$actorBuilder</span><span class="token operator">-&gt;</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$actorBuilder</span><span class="token operator">-&gt;</span><span class="token function">buildConstume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$actorBuilder</span><span class="token operator">-&gt;</span><span class="token function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$actorBuilder</span><span class="token operator">-&gt;</span><span class="token function">createActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端测试代码</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/* 指明要创造的具体建造者 */</span><span class="token variable">$builder</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 实例化指挥者类 */</span><span class="token variable">$actorDirector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActorDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 通过指挥者创建完整的产品 */</span><span class="token variable">$actor</span> <span class="token operator">=</span> <span class="token variable">$actorDirector</span><span class="token operator">-&gt;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token variable">$builder</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"类型："</span><span class="token operator">.</span><span class="token variable">$actor</span><span class="token operator">-&gt;</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token operator">.</span>     <span class="token string double-quoted-string">"性别："</span><span class="token operator">.</span><span class="token variable">$actor</span><span class="token operator">-&gt;</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token operator">.</span>     <span class="token string double-quoted-string">"面容："</span><span class="token operator">.</span><span class="token variable">$actor</span><span class="token operator">-&gt;</span><span class="token function">getFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token operator">.</span>     <span class="token string double-quoted-string">"服装："</span><span class="token operator">.</span><span class="token variable">$actor</span><span class="token operator">-&gt;</span><span class="token function">getConstume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token operator">.</span>     <span class="token string double-quoted-string">"发型："</span><span class="token operator">.</span><span class="token variable">$actor</span><span class="token operator">-&gt;</span><span class="token function">getHairstype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上例程会输出：</p><p>类型：英雄<br>性别：男<br>面容：英俊<br>服装：盔甲<br>发型：飘逸</p><h3 id="5-UML类图"><a href="#5-UML类图" class="headerlink" title="5. UML类图"></a>5. UML类图</h3><p>示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/BuilderPattern-1.png" alt="BuilderPattern-1"></p><h3 id="6-建造者模式的优点"><a href="#6-建造者模式的优点" class="headerlink" title="6. 建造者模式的优点"></a>6. 建造者模式的优点</h3><p>建造者模式的主要优点如下：</p><p>(1)在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</p><p>(2)每一个具体建造者都相对独立，而与其他的具体建造者无关，因些可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。</p><p>(3)可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</p><p>(4)由于指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方便，符合“开闭原则”</p><h3 id="7-建造者模式的缺点"><a href="#7-建造者模式的缺点" class="headerlink" title="7. 建造者模式的缺点"></a>7. 建造者模式的缺点</h3><p>建造者模式的主要缺点如下：</p><p>(1)建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制。</p><p>(2)如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加系统的理解难度和运行成本。</p><h3 id="8-建造者模式适用场景"><a href="#8-建造者模式适用场景" class="headerlink" title="8. 建造者模式适用场景"></a>8. 建造者模式适用场景</h3><p>在以下情况下可以考虑使用建造者模式：</p><p>(1)需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</p><p>(2)需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</p><p>(3)对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类和客户类中。</p><p>(4)隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-创建型模式-抽象工厂模式 (Abstract Factory Pattern)</title>
      <link href="/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-chou-xiang-gong-han-mo-shi-abstract-factory-pattern/"/>
      <url>/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-chou-xiang-gong-han-mo-shi-abstract-factory-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式-Abstract-Factory-Pattern"><a href="#抽象工厂模式-Abstract-Factory-Pattern" class="headerlink" title="抽象工厂模式 (Abstract Factory Pattern)"></a>抽象工厂模式 (Abstract Factory Pattern)</h1><hr><h3 id="0-抽象工厂模式概述"><a href="#0-抽象工厂模式概述" class="headerlink" title="0. 抽象工厂模式概述"></a>0. 抽象工厂模式概述</h3><p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法具有唯一性，一般情况下，一个具体工厂中只有一个或者一组重载的工厂方法。但是有时候我们希望一个工厂可以提供多个产品对象，而不是单一的产品对象，如一个电器工厂，它可以生产电视机、电冰箱、空调等多种电器，而不是只生产某一种电器。为了更好地理解抽象工厂模式，我们先引入两个概念：</p><p>(1)产品等级结构：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</p><p>(2)产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中，海尔电视机、海尔电冰箱构成了一个产品族。</p><p>产品等级结构与产品族示意图如图1所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/1.jpg" alt="1"></p><p>图1 产品族与产品等级结构示意图</p><p>在图1中，不同颜色的多个正方形、圆形和椭圆形分别构成了三个不同的产品等级结构，而相同颜色的正方形、圆形和椭圆形构成了一个产品族，每一个形状对象都位于某个产品族，并属于某个产品等级结构。图1中一共有五个产品族，分属于三个不同的产品等级结构。我们只要指明一个产品所处的产品族以及它所属的等级结构，就可以唯一确定这个产品。</p><p>当系统所提供的工厂生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构、属于不同类型的具体产品时就可以使用抽象工厂模式。抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形式。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、更有效率。抽象工厂模式示意图如图2所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/2.jpg" alt="2"></p><p>图2 抽象工厂模式示意图</p><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><blockquote><p>抽象工厂模式 (Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。</p></blockquote><p>抽象工厂模式是一种<strong>对象创建型模式</strong>。</p><ul><li><p>抽象工厂模式为创建一组对象提供了一种解决方案。与工厂方法模式相比，抽象工厂模式中的具体工厂不只是创建一种产品，它负责创建一族产品。</p></li><li><p>在抽象工厂模式中，每一个具体工厂都提供了多个工厂方法用于产生多种不同类型的产品，这些产品构成了一个产品族。</p></li></ul><h3 id="2-模式结构"><a href="#2-模式结构" class="headerlink" title="2. 模式结构"></a>2. 模式结构</h3><p>抽象工厂模式包含如下角色：</p><ul><li><p><code>AbstractFactory</code>：<strong>抽象工厂</strong></p><ul><li>它声明了一组用于创建一族产品的方法，每一个方法对应一种产品。</li></ul></li><li><p><code>ConcreteFactory</code>：<strong>具体工厂</strong></p><ul><li>它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。</li></ul></li><li><p><code>AbstractProduct</code>：<strong>抽象产品</strong></p><ul><li>它为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。</li></ul></li><li><p><code>ConcreteProduct</code>：<strong>具体产品</strong></p><ul><li>它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/AbstractFactoryPattern-0.jpg" alt="AbstractFactoryPattern-0"></p><h3 id="3-抽象工厂模式应用实例"><a href="#3-抽象工厂模式应用实例" class="headerlink" title="3. 抽象工厂模式应用实例"></a>3. 抽象工厂模式应用实例</h3><p>下面通过一个实例进一步学习和理解抽象工厂模式。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><p>我们就以生产家用电器的例子来学习下抽象工厂模式，现有多个工厂，每个工厂都生产自己品牌电视机、冰箱、洗衣机；客户端可以很灵活的选择某个工厂生产的一系列产品，也能方便的增加新的工厂。</p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><ul><li>HomeAppliancesFactory：<code>抽象工厂类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 家用电器工厂接口：抽象工厂 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">HomeAppliancesFactory</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createIceBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createWasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HaierFactory、MideaFactory： <code>具体工厂</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Haier工厂：具体工厂 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HaierFactory</span> <span class="token keyword">extends</span> <span class="token class-name">HomeAppliancesFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">HaierTv</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HaierTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createIceBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">HaierIceBox</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HaierIceBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createWasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">HaierWasher</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HaierWasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Midea工厂：具体工厂 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">MideaFactory</span> <span class="token keyword">extends</span> <span class="token class-name">HomeAppliancesFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">MideaTv</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MideaTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createIceBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">MideaIceBox</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MideaIceBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createWasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">MideaWasher</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MideaWasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Tv： <code>抽象产品类</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 电视机接口：抽象产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">Tv</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HaierTv、MideaTv： <code>具体产品</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Haier电视机类：具体产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HaierTv</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Haier电视"</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Midea电视机类：具体产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">MideaTv</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Midea电视"</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>IceBox： <code>抽象产品</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 冰箱接口：抽象产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">IceBox</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HaierIceBox、MideaIceBox： <code>具体产品</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Haier冰箱类：具体产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HaierIceBox</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Haier冰箱"</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Midea冰箱类：具体产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">MideaIceBox</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Midea冰箱"</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Washer： <code>抽象产品</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 洗衣机接口：抽象产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">Washer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HaierWasher、MideaWasher： <code>具体产品</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Haier洗衣机类：具体产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HaierWasher</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Haier洗衣机"</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Midea洗衣机类：具体产品 * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-05-26 * @copyright  Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">MideaWasher</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Midea洗衣机"</span><span class="token operator">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端测试代码</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//$factory = new HaierFactory();</span><span class="token variable">$factory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MideaFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tv</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">createTv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iceBox</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">createIceBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$washer</span> <span class="token operator">=</span> <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">createWasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tv</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$iceBox</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$washer</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上例程会输出：</p><p>Midea电视<br><br>Midea冰箱<br><br>Midea洗衣机<br></p><p>如果需要更换成Haier生产的电器则只需把 <code>new MideaFactory()</code>变为<code>new HaierFactory() </code></p><h3 id="4-UML类图"><a href="#4-UML类图" class="headerlink" title="4. UML类图"></a>4. UML类图</h3><p>示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/AbstractFactoryPattern-1.png" alt="AbstractFactoryPattern-1"></p><h3 id="5-抽象工厂模式分析"><a href="#5-抽象工厂模式分析" class="headerlink" title="5. 抽象工厂模式分析"></a>5. 抽象工厂模式分析</h3><p>在抽象工厂模式中，增加新的产品族很方便，但是增加新的产品等级结构很麻烦，抽象工厂模式的这种性质称为“开闭原则”的倾斜性。“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的，对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：</p><p>(1)增加产品族：对于增加新的产品族，抽象工厂模式很好地支持了“开闭原则”，只需要增加具体产品并对应增加一个新的具体工厂，对已有代码无须做任何修改。</p><p>(2)增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，违背了“开闭原则”。</p><p>正因为抽象工厂模式存在“开闭原则”的倾斜性，它以一种倾斜的方式来满足“开闭原则”，为增加新产品族提供方便，但不能为增加新产品结构提供这样的方便，因此要求设计人员在设计之初就能够全面考虑，不会在设计完成之后向系统中增加新的产品等级结构，也不会删除已有的产品等级结构，否则将会导致系统出现较大的修改，为后续维护工作带来诸多麻烦。</p><h3 id="6-抽象工厂模式的优点"><a href="#6-抽象工厂模式的优点" class="headerlink" title="6. 抽象工厂模式的优点"></a>6. 抽象工厂模式的优点</h3><p>抽象工厂模式的主要优点如下：</p><p>(1)抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。</p><p>(2)当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。</p><p>(3)增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。</p><h3 id="7-抽象工厂模式的缺点"><a href="#7-抽象工厂模式的缺点" class="headerlink" title="7. 抽象工厂模式的缺点"></a>7. 抽象工厂模式的缺点</h3><p>抽象工厂模式的主要缺点如下：</p><p>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</p><h3 id="8-抽象工厂模式适用场景"><a href="#8-抽象工厂模式适用场景" class="headerlink" title="8. 抽象工厂模式适用场景"></a>8. 抽象工厂模式适用场景</h3><p>在以下情况下可以考虑使用抽象工厂模式：</p><p>(1)一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是很重要的，用户无须关心对象的创建过程，将对象的创建和使用解耦。</p><p>(2)系统中有多于一个的产品族，而每次只使用其中某一产品族。用户可以动态改变产品族，也可以很方便地增加新的产品族。</p><p>(3)属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。同一个产品族中的产品可以是没有任何关系的对象，但是它们都具有一些共同的约束，如同一品牌的电视机和冰箱，电视机与冰箱之间没有直接关系，但它们都是属于某一品牌的，此时具有一个共同的约束条件：品牌的类型。</p><p>(4)产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-创建型模式-工厂方法模式 (Factory Method Pattern)</title>
      <link href="/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-gong-han-fang-fa-mo-shi-factory-method-pattern/"/>
      <url>/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-gong-han-fang-fa-mo-shi-factory-method-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂方法模式-Factory-Method-Pattern"><a href="#工厂方法模式-Factory-Method-Pattern" class="headerlink" title="工厂方法模式 (Factory Method Pattern)"></a>工厂方法模式 (Factory Method Pattern)</h1><hr><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><p>工厂方法模式 (Factory Method Pattern)：它属于类创建型模式。定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法模式使一个类的实例化延迟到其子类中完成。</p><h3 id="2-模式结构"><a href="#2-模式结构" class="headerlink" title="2. 模式结构"></a>2. 模式结构</h3><p>工厂方法模式包含如下角色：</p><ul><li><p>AbstractProduct: 抽象产品</p><ul><li>抽象产品角色是所有需要实例化产品类的父类</li></ul></li><li><p>ConcreteProduct：具体产品</p><ul><li>具体的产品，继承了抽象产品</li></ul></li><li><p>Factory：抽象工厂</p><ul><li>声明工厂方法，该方法返回一个AbstractProduct类型的对象</li></ul></li><li><p>ConcreteFactory：具体工厂</p><ul><li>重新定义工厂方法以返回一个ConcreteProduct类型的对象</li></ul></li></ul><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>以一个简单的计算器功能来说明下各角色的应用：</p><ul><li>Operation.php：抽象产品</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 运算抽象类 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-17 14:52:15 * @copyright Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Operation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$numberA</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$numberB</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setNumberA</span><span class="token punctuation">(</span><span class="token variable">$numberA</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberA</span> <span class="token operator">=</span> <span class="token variable">$numberA</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberA</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setNumberB</span><span class="token punctuation">(</span><span class="token variable">$numberB</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberB</span> <span class="token operator">=</span> <span class="token variable">$numberB</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberB</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>OperationAdd.php、OperationSub.php：具体产品</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 加法运算类 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-17 14:54:10 * @copyright Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationAdd</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">bcadd</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberA</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberB</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 减法运算类 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-17 14:54:26 * @copyright Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationSub</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">bcsub</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberA</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberB</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>FactoryInterface.php：抽象工厂</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 运算工厂接口类 * 定义了一个用于创建对象的接口，让其子类决定实例化哪一个类 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-17 14:56:24 * @copyright Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">FactoryInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createOperate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>AddFactory.php、SubFactory.php：具体工厂</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 加法类工厂 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-17 15:01:27 * @copyright Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">AddFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createOperate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OperationAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 减法类工厂 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-17 17:21:41 * @copyright Copyright (c) 2018 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">SubFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">createOperate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OperationSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-客户端的使用"><a href="#4-客户端的使用" class="headerlink" title="4. 客户端的使用"></a>4. 客户端的使用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$addFactory</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$addOperation</span> <span class="token operator">=</span> <span class="token variable">$addFactory</span><span class="token operator">-&gt;</span><span class="token function">createOperate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$addOperation</span><span class="token operator">-&gt;</span><span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token number">2000.30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$addOperation</span><span class="token operator">-&gt;</span><span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token number">299.40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$addOperation</span><span class="token operator">-&gt;</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-UML类图"><a href="#5-UML类图" class="headerlink" title="5. UML类图"></a>5. UML类图</h3><p>工厂方法模式实现的简单计算器示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/FactoryMethodPattern.png" alt="FactoryMethodPattern"></p><h3 id="6-工厂方法模式的优点"><a href="#6-工厂方法模式的优点" class="headerlink" title="6. 工厂方法模式的优点"></a>6. 工厂方法模式的优点</h3><ul><li>基于抽象工厂和抽象产品的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。</li><li>工厂方法模式是简单工厂模式的进一步抽象和推广，使得在系统中加入新产品时，无须修改抽象工厂和抽象产品，也无须修改具体工厂和具体产品，而只要添加一个具体工厂和具体产品就行。这样，系统的可扩展性也就变得非常好，完全符合“开放－封闭原则”。</li></ul><h3 id="7-工厂方法模式的缺点"><a href="#7-工厂方法模式的缺点" class="headerlink" title="7. 工厂方法模式的缺点"></a>7. 工厂方法模式的缺点</h3><ul><li>在添加新产品时，需要编写新的具体工厂类和具体产品类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度和额外的开放量，有更多的类需要加载和解析，会给系统带来一些额外的开销。</li><li>由于引入了抽象工厂类和抽象产品类，增加了系统的抽象性和理解难度。</li></ul><h3 id="8-适用场景"><a href="#8-适用场景" class="headerlink" title="8. 适用场景"></a>8. 适用场景</h3><p>以下情况可以使用简单工厂方法模式：</p><ul><li>客户端不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道其所对应的工厂即可，具体的产品由具体工厂类创建，客户端需要知道创建具体产品的工厂类。</li><li>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类将覆盖父类的方法，从而使得系统更容易扩展。</li></ul><h3 id="9-模式扩展"><a href="#9-模式扩展" class="headerlink" title="9. 模式扩展"></a>9. 模式扩展</h3><ul><li>多态性的丧失和模式的退化：一般来说，具体工厂类应当有一个抽象工厂父类，如果只有一个具体工厂类的话，抽象工厂父类就可以省略，也将发生退化。当只有一个具体工厂类时，在具体工厂类中可以创建所有的具体产品对象，并且具体工厂类中的方法设计为静态方法时，工厂模式就退化成简单工厂模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-创建型模式-简单工厂模式 (Simple Factory Pattern)</title>
      <link href="/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-jian-dan-gong-han-mo-shi-simple-factory-pattern/"/>
      <url>/2021/06/30/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-jian-dan-gong-han-mo-shi-simple-factory-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="简单工厂模式-Simple-Factory-Pattern"><a href="#简单工厂模式-Simple-Factory-Pattern" class="headerlink" title="简单工厂模式 (Simple Factory Pattern)"></a>简单工厂模式 (Simple Factory Pattern)</h1><hr><h3 id="1-模式定义"><a href="#1-模式定义" class="headerlink" title="1. 模式定义"></a>1. 模式定义</h3><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有相同的接口或父类。</p><h3 id="2-模式结构"><a href="#2-模式结构" class="headerlink" title="2. 模式结构"></a>2. 模式结构</h3><p>简单工厂模式包含如下角色：</p><ul><li><p>Factory：工厂</p><ul><li>工厂负责实现创建所需类的实例</li></ul></li><li><p>AbstractProduct: 抽象产品</p><ul><li>抽象产品是所有具体产品类的父类</li></ul></li><li><p>ConcreteProduct：具体产品</p><ul><li>具体产品是创建目标</li></ul></li></ul><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>以一个简单的计算器功能来说明下各角色的应用：</p><ul><li>OperationFactory.php：工厂</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 运算工厂类 * 一、根据不同的参数来创建加法、减法类等实例。 * 二、通常createOperate方法为公开的静态方法。 * 三、通常createOperate方法中包含简单的switch...case判断逻辑。 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-08 20:03:21 * @copyright Copyright (c) 2017 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">createOperate</span><span class="token punctuation">(</span><span class="token variable">$operate</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$operation</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$operate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string single-quoted-string">'+'</span><span class="token punctuation">:</span>                <span class="token variable">$operation</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string single-quoted-string">'-'</span><span class="token punctuation">:</span>                <span class="token variable">$operation</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$operation</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Operation.php：抽象产品</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 运算抽象类 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-08 20:00:07 * @copyright Copyright (c) 2017 dendi875@163.com */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Operation</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$numberA</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$numberB</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setNumberA</span><span class="token punctuation">(</span><span class="token variable">$numberA</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberA</span> <span class="token operator">=</span> <span class="token variable">$numberA</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getNumberA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberA</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setNumberB</span><span class="token punctuation">(</span><span class="token variable">$numberB</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberB</span> <span class="token operator">=</span> <span class="token variable">$numberB</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getNumberB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberB</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>OperationAdd.php、OperationSub.php：具体产品</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 加法运算类 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-08 20:02:42 * @copyright Copyright (c) 2017 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationAdd</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">bcadd</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberA</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberB</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 减法运算类 * * @author    &lt;dendi875@163.com&gt; * @createDate 2018-03-08 20:03:01 * @copyright Copyright (c) 2017 dendi875@163.com */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">OperationSub</span> <span class="token keyword">extends</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">bcsub</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberA</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">numberB</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-客户端的使用"><a href="#4-客户端的使用" class="headerlink" title="4. 客户端的使用"></a>4. 客户端的使用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$operation</span> <span class="token operator">=</span> <span class="token class-name static-context">OperationFactory</span><span class="token operator">::</span><span class="token function">createOperate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$operation</span><span class="token operator">-&gt;</span><span class="token function">setNumberA</span><span class="token punctuation">(</span><span class="token number">2000.30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$operation</span><span class="token operator">-&gt;</span><span class="token function">setNumberB</span><span class="token punctuation">(</span><span class="token number">299.40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$operation</span><span class="token operator">-&gt;</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-UML类图"><a href="#5-UML类图" class="headerlink" title="5. UML类图"></a>5. UML类图</h3><p>简单工厂模式实现的计算器示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/SimpleFactoryPattern-0.png" alt="SimpleFactoryPattern-0"></p><h3 id="6-简单工厂模式的优点"><a href="#6-简单工厂模式的优点" class="headerlink" title="6. 简单工厂模式的优点"></a>6. 简单工厂模式的优点</h3><ul><li>简单工厂模式的最大优点在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</li><li>客户端无须知道所创建产品类的类名，只需要知道具体产品类所对应的参数，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量</li></ul><h3 id="7-简单工厂模式的缺点"><a href="#7-简单工厂模式的缺点" class="headerlink" title="7. 简单工厂模式的缺点"></a>7. 简单工厂模式的缺点</h3><ul><li>使用简单工厂模式将会增加系统中类的个数，在一定程度上增加了系统的复杂度和理解难度。</li><li>在产品类型较多时，有可能造成工厂类逻辑过于复杂，不利于系统的扩展和维护。</li><li>一旦添加新的产品就不得不修改工厂类逻辑，在工厂类的方法中增加“Case”条件分支，修改了原生的类，这就违背了开放－封闭原则</li></ul><h3 id="8-适用场景"><a href="#8-适用场景" class="headerlink" title="8. 适用场景"></a>8. 适用场景</h3><p>以下情况可以使用简单工厂模式：</p><ul><li>工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li><li>客户端只关心传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道各产品类所对应的参数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之-创建型模式-单例模式（Singleton Pattern）</title>
      <link href="/2021/06/29/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-dan-li-mo-shi-singleton-pattern/"/>
      <url>/2021/06/29/she-ji-mo-shi-zhi-chuang-jian-xing-mo-shi-dan-li-mo-shi-singleton-pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之-单例模式（Singleton-Pattern）"><a href="#设计模式之-单例模式（Singleton-Pattern）" class="headerlink" title="设计模式之-单例模式（Singleton Pattern）"></a>设计模式之-单例模式（Singleton Pattern）</h1><hr><h3 id="1-模式动机"><a href="#1-模式动机" class="headerlink" title="1. 模式动机"></a>1. 模式动机</h3><p>对于系统中的某些类来说，只有一个实例很重要，例如，一个系统只能有一个计时工具或ID（序号）生成器；一个系统中只能有一个锁定应用程序的文件。</p><p>如何保证一个类只有一个实例并且这个实例易于被访问呢？定义一个全局变量可以确保对象随时都可以被访问，但不能防止我们实例化多个对象。</p><p>一个更好的解决办法是让类自身负责保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。这就是单例模式的模式动机。</p><h3 id="2-模式定义"><a href="#2-模式定义" class="headerlink" title="2. 模式定义"></a>2. 模式定义</h3><p>单例模式（Singleton Pattern）：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：</p><ul><li><p>一是某个类只能有一个实例</p></li><li><p>二是它必须自行创建这个实例</p></li><li><p>三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式</p></li></ul><h3 id="3-代码示例"><a href="#3-代码示例" class="headerlink" title="3. 代码示例"></a>3. 代码示例</h3><ul><li>Singleton.php</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * Singleton * * @author     &lt;dendi875@163.com&gt; * @createDate 2018-03-02 14:12:28 * @copyright  Copyright (c) 2019 dendi875@163.com */</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 提供一个公有的静态方法     *     * @return Singleton     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Singleton</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token variable">$instance</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">static</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 不允许从外部调用，以防止创建多个实例，     * 要使用单例，必须从 Singleton::getInstance() 获取实例     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 防止实例被克隆（这将创建它的第二个实例）     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 防止被反序列化（这将创建它的第二个实例）     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-模式分析"><a href="#4-模式分析" class="headerlink" title="4. 模式分析"></a>4. 模式分析</h3><p>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式包含的角色只有一个，就是单例类——<strong>Singleton</strong>。单例类拥有一个私有构造函数，确保用户无法通过<code>new</code>关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的方法，该方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</p><p>在单例模式的实现过程中，需要注意如下三点：</p><ul><li><p>单例类的构造函数为私有</p></li><li><p>提供一个自身的静态私有成员变量</p></li><li><p>提供一个公有的静态方法</p></li></ul><h3 id="5-UML类图"><a href="#5-UML类图" class="headerlink" title="5. UML类图"></a>5. UML类图</h3><p>简单工厂模式实现的计算器示例代码UML图：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/singleton.png" alt="singleton"></p><h3 id="6-优点"><a href="#6-优点" class="headerlink" title="6. 优点"></a>6. 优点</h3><ul><li><p>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。</p></li><li><p>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。</p></li></ul><h3 id="7-缺点"><a href="#7-缺点" class="headerlink" title="7. 缺点"></a>7. 缺点</h3><ul><li><p>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难</p></li><li><p>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、PHP)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</p></li></ul><h3 id="8-适用场景"><a href="#8-适用场景" class="headerlink" title="8. 适用场景"></a>8. 适用场景</h3><p>以下情况可以使用单例模式：</p><ul><li><p>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象</p></li><li><p>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例</p></li><li><p>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式</p></li></ul><h3 id="9-模式应用"><a href="#9-模式应用" class="headerlink" title="9. 模式应用"></a>9. 模式应用</h3><ul><li><p>数据库连接器</p></li><li><p>一个具有自动编号主键的表可以有多个用户同时使用，但数据库中只能有一个地方分配下一个主键编号，否则会出现主键重复，因此该主键编号生成器必须具备唯一性，可以通过单例模式来实现</p></li></ul><h3 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h3><ul><li><p>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</p></li><li><p>单例模式只包含一个单例角色：在单例类的内部实现只生成一个实例，同时它提供一个静态的方法，让客户可以使用它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有。</p></li><li><p>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例类拥有一个私有构造函数，确保用户无法通过<code>new</code>关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的方法。该方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beanstalkd 学习研究</title>
      <link href="/2021/06/29/beanstalkd-xue-xi-yan-jiu/"/>
      <url>/2021/06/29/beanstalkd-xue-xi-yan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="Beanstalkd-学习研究"><a href="#Beanstalkd-学习研究" class="headerlink" title="Beanstalkd 学习研究"></a>Beanstalkd 学习研究</h1><hr><h2 id="1-Beanstalkd-介绍"><a href="#1-Beanstalkd-介绍" class="headerlink" title="1. Beanstalkd 介绍"></a>1. Beanstalkd 介绍</h2><p>Beanstalkd是一个简单、高效的工作队列系统，其最初设计目的是通过后台异步执行耗时任务方式降低高容量Web应用的页面延时。而其简单、轻量、易用等特点，和对<code>任务优先级（priority）</code>、<code>任务延时（delay）</code>、<code>任务超时重发（time-to-run）</code>和<code>任务预留（buired）</code>等控制，以及众多语言版本的客户端的良好支持，使其能够很好的支持分布式的后台任务和定时任务处理。</p><p>beanstalkd还提供了<code>binlog</code>机制，当重启beanstalkd，当前任务的状态能够从记录的本地<code>binlog</code>中恢复。</p><h2 id="2-Beanstalkd-中的重要概念"><a href="#2-Beanstalkd-中的重要概念" class="headerlink" title="2. Beanstalkd 中的重要概念"></a>2. Beanstalkd 中的重要概念</h2><h3 id="2-1-核心概念"><a href="#2-1-核心概念" class="headerlink" title="2.1 核心概念"></a>2.1 核心概念</h3><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/beanstalkd-architecture.png" alt="beanstalkd-architecture"></p><p><code>Beanstalkd</code> 使用 <code>Producer-Consumer</code>设计模式，无论是其协议结构还是使用方式都是类似<code>Memcached</code>风格的。以下是<code>Beanstalkd</code>设计思想中核心概念：</p><h4 id="job-任务"><a href="#job-任务" class="headerlink" title="job - 任务"></a>job - 任务</h4><p><code>job</code>是一个需要异步处理的处理，是 <code>Beanstalkd</code>中的基本单元，每个<code>job</code>都会有一个id和优先级，<code>job</code>需要放在一个<code>tube</code>中。 <code>Beanstalkd</code>中的任务（<code>job</code>）类似于其消息队列中的消息（<code>message</code>）的概念。</p><h4 id="tube-管道"><a href="#tube-管道" class="headerlink" title="tube - 管道"></a>tube - 管道</h4><p>管道即某一种类型的任务队列，其类似于消息的主题（<code>topic</code>），是<code>Producer</code>和<code>Consumer</code>的操作对象。一个<code>Beanstalkd</code>中可以有多个管道，每个管道都有自己的生产者（<code>Producer</code>）和消费者（<code>Consumer</code>），管道之间互相不影响。</p><h4 id="producer-生产者"><a href="#producer-生产者" class="headerlink" title="producer - 生产者"></a>producer - 生产者</h4><p>任务（<code>job</code>）的生产者，通过<code>put</code>命令来将一个<code>job</code>放到一个<code>tube</code>中。</p><h4 id="consumer-消费者"><a href="#consumer-消费者" class="headerlink" title="consumer - 消费者"></a>consumer - 消费者</h4><p>任务（<code>job</code>）的消费者，通过<code>reserve</code>来获取<code>job</code>，通过<code>delete</code>、<code>release</code>、<code>bury</code>来改变<code>job</code>的状态。</p><h3 id="2-2-任务生命周期"><a href="#2-2-任务生命周期" class="headerlink" title="2.2 任务生命周期"></a>2.2 任务生命周期</h3><p><code>Beanstalkd</code>中的任务（<code>job</code>）替代了消息（<code>message</code>）的概念，任务会有一系列状态。任务的生命周期如下：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/beanstalkd-job-status.png" alt="beanstalkd-job-status"></p><p>一个 <code>Beanstalkd</code>任务可能会包含以下状态：</p><ul><li><strong>READY</strong> - 需要立即处理的任务。当<code>producter</code>直接<code>put</code>一个任务时，任务就处理<code>READY</code>状态，以等待<code>consumer</code>来处理。当延时（<code>DELAYED</code>）任务到期后会自动成为当前<code>READY</code>状态的任务</li><li><strong>RESERVED</strong> - 已经被消费者获取，正在执行的任务。当<code>consumer</code>获取了当前<code>READY</code>的任务后，该任务的状态就会迁移到<code>RESERVED</code>状态，这时其它的<code>consumer</code>就不能再操作该任务。<code>Beanstalkd</code>会检查任务是否在<code>TTR</code>（<code>time-to-run</code>）内完成</li><li><strong>DELETED</strong> - 消息被删除，<code>Beanstalkd</code>不再维持这些消息。即任务生命周期结束</li><li><strong>DELAYED</strong> - 延迟执行的任务。当任务被延时<code>put</code>时，任务就处理<code>DELAYED</code>状态。等待时间过后，任务会被迁移到<code>READY</code>状态。当消费者处理任务后，可以将任务再次放回<code>DELAYED</code>队列延迟执行</li><li><strong>BURIED</strong> - 埋葬的任务，这时任务不会被执行，也不会消失。当<code>consumer</code>完成该任务后，可以选择<code>delete</code>或<code>release</code>或<code>bury</code>操作<ul><li><code>delete</code>后，任务被删除，生命周期结束</li><li><code>release</code>操作可以把任务状态迁移回<code>READY</code>状态或<code>DELAYED</code>状态，使其它<code>consumer</code>可以继续获取和执行该任务</li><li><code>bury</code>操作会埋葬任务，等需要该任务时，再将埋葬的任务<code>kick</code>回<code>READY</code>，也可以通过<code>delete</code>删除<code>BURIED</code>状态的任务</li></ul></li></ul><h3 id="2-3-Beanstalkd特点"><a href="#2-3-Beanstalkd特点" class="headerlink" title="2.3 Beanstalkd特点"></a>2.3 Beanstalkd特点</h3><ul><li><strong>任务优先级（priority）</strong></li></ul><p>任务（<code>job</code>）可以有<code>0~2^32</code>个优先级，<code>0</code>表示优先级最高。<code>Beanstalkd</code>采用最大最小堆（Minx-max heap）处理任务优先级排序，任何时刻调用<code>reverse</code>命令的消费者总是能拿到当前优先级最高的任务，时间复杂度为<code>O(logn)</code></p><ul><li><strong>任务延时（delay）</strong></li></ul><p><code>Beanstalkd</code>中可以通过两种方式延时执行任务：生产者发布任务时指定延时；或者当任务处理完毕后，消费者再次将任务放入队列延时执行（<code>release with delay</code>）。这种机制可以实现分布式定时任务，这种任务机制的优势是：如果某个消费者节点故障，任务超时重发（<code>time-to-run</code>）以保证任务转移到其它节点执行</p><ul><li><strong>任务超时重发（time-to-run）</strong></li></ul><p><code>Beanstalkd</code>把任务返回给消费者后，消费者必须在预设的<code>TTR</code>(<code>time-to-run</code>)时间内发送<code>delete</code>、或<code>release</code>、或<code>bury</code>命令改变任务的状态；否则<code>Beanstalkd</code>会认为任务处理失败，然后把任务交给另外的消费者节点执行。如果消费者预计在<code>TTR</code>时间内无法完成任务，可以发送<code>touch</code>命令，以使<code>Beanstalkd</code>重新计算<code>TTR</code></p><ul><li><strong>任务预留（buried）</strong></li></ul><p>当<code>RESERVED</code>状态的任务因为某些原因无法执行时，消费者可以使用<code>bury</code>命令将其设置为<code>buried</code>状态，这时<code>Beanstalkd</code>会继续保留这些任务。在具备任务执行条件时，再通过<code>kick</code>将任务迁移回<code>READY</code>状态</p><h2 id="3-beanstalkd安装使用"><a href="#3-beanstalkd安装使用" class="headerlink" title="3. beanstalkd安装使用"></a>3. beanstalkd安装使用</h2><p>Beanstalkd分为服务端和客户端两部分。可以在其官网查找相关安装包及安装方法：</p><ul><li>服务端：<a href="http://kr.github.io/beanstalkd/download.html">http://kr.github.io/beanstalkd/download.html</a></li><li>客户端：<a href="https://github.com/kr/beanstalkd/wiki/client-libraries">https://github.com/kr/beanstalkd/wiki/client-libraries</a></li></ul><h3 id="3-1-服务端"><a href="#3-1-服务端" class="headerlink" title="3.1 服务端"></a>3.1 服务端</h3><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><p>下载、解压并进入源码目录后，执行<code>make</code>或<code>make install</code>命令即可：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ sudo make// 或$ sudo make install// 或$ sudo make install PERFIX=/usr/bin/beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h4><p>在Unbuntu或Debian系统中，可以使用以下命令安装：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ sudo apt-get install beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在CentOS或RHEL系统中，首先需要更新<code>EPEL</code>源，然后再使用<code>yum</code>命令安装。</p><p>小提示：更多关于<code>EPEL</code>的知识可以查阅下面的资料：</p><ul><li><p><a href="https://fedoraproject.org/wiki/EPEL">Information on EPEL</a></p></li><li><p><a href="https://fedoraproject.org/wiki/EPEL/FAQ#howtouse">How to use EPEL</a></p></li></ul><p>在RHEL6/CentOS6中使用以下命令更新源：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ su -c 'rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在RHEL7中：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ su -c 'rpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查<code>EPEL</code>源是否更新成功：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ yum repolist enabled | grep epel * epel: mirrors.yun-idc.comepel                  Extra Packages for Enterprise Linux 6 - i386        10,254<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行安装：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ yum install -y beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加入开启自启动：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ chkconfig beanstalkd  on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加用户组：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ groupadd beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加用户：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ useradd -M -g beanstalkd -s /sbin/nologin beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建<code>binlog</code>存放目录并修改所有者/所属组（有权限写入）：</p><pre class="line-numbers language-none"><code class="language-none">$ mkdir -p /data/beanstalkd/binlog/$ chown -R beanstalkd:beanstalkd  /data/beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改配置文件中存放<code>binlog</code>的目录：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ vi /etc/sysconfig/beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>BEANSTALKD_BINLOG_DIR=/data/beanstalkd/binlog</em></p><h4 id="运行beanstalkd"><a href="#运行beanstalkd" class="headerlink" title="运行beanstalkd"></a>运行beanstalkd</h4><p>Beanstalkd安装后，就可以通过beanstalkd命令来启动或配置Beanstalkd。该命令的使用格式如下：</p><pre class="line-numbers language-none"><code class="language-none">beanstalkd [OPTIONS]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选[OPTIONS]参数有：</p><ul><li>-b DIR - wal目录（开启binlog，断电重启后会自动恢复任务）</li><li>-f MS  - 指定MS毫秒内的 fsync (-f0 为”always fsync”)</li><li>-F - 从不 fsync (默认)</li><li>-l ADDR - 指定监听地址（默认为：0.0.0.0）</li><li>-p PORT - 指定监听端口（默认为：11300）</li><li>-u USER - 用户与用户组</li><li>-z BYTE - 最大的任务大小（默认为：65535）</li><li>-s BYTE - 每个wal文件的大小（默认为：10485760）</li><li>-c - 压缩binlog（默认）</li><li>-n - 不压缩binlog</li><li>-v - 显示版本信息</li><li>-h - 显示帮助</li></ul><p>我们使用<code>nohup</code>和<code>&amp;</code>来配合启动程序，这样能免疫 <strong>Ctrl-C发送的SIGINT信号和关闭session发送的SIGHUP信号</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ nohup beanstalkd -l 0.0.0.0 -p 11300 -b /data/beanstalkd/binlog/ -u beanstalkd &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-客户端"><a href="#3-2-客户端" class="headerlink" title="3.2 客户端"></a>3.2 客户端</h3><p>客户端包含了Beanstalkd设计概念中的任务<code>生产者（Producer）</code>和<code>消费者（Consumer）</code>。Beanstalkd有很多语言版本客户端的实现，点击<a href="https://github.com/beanstalkd/beanstalkd/wiki/Client-Libraries">Beanstalkd 客户端</a>查找自已所需要的版本，如果都不能满足需要，还可以根据<a href="https://github.com/beanstalkd/beanstalkd/blob/v1.3/doc/protocol.txt">Beanstalkd 协议</a>自行实现。</p><p>笔者日常工作中，接触PHP语言较多，以下用一个PHP版本的Beanstalkd 客户端：<a href="https://packagist.org/packages/pda/pheanstalk">pda/pheanstalk</a>为例，简单演示Beanstalkd的任务处理流程。</p><p>安装 pda/pheanstalk</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ composer require pda/pheanstalk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生产-job"><a href="#生产-job" class="headerlink" title="生产 job"></a>生产 job</h4><p>创建一个 producer 来生产 job</p><p>producer.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./vendor/autoload.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Pheanstalk<span class="token punctuation">\</span>Pheanstalk</span><span class="token punctuation">;</span><span class="token variable">$pheanstalk</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pheanstalk</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">11300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tubeName</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'syslog'</span><span class="token punctuation">;</span><span class="token variable">$jobData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'type'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'Debug'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'level'</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// error log</span>    <span class="token string single-quoted-string">'content'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'queue connect failed'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'timestamp'</span> <span class="token operator">=&gt;</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'timeCreated'</span> <span class="token operator">=&gt;</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$pheanstalk</span>    <span class="token operator">-&gt;</span><span class="token function">useTube</span><span class="token punctuation">(</span><span class="token variable">$tubeName</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$jobData</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 producer.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$ php producer<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="消费-job"><a href="#消费-job" class="headerlink" title="消费 job"></a>消费 job</h4><p>创建一个 consumer 来消费 job</p><p>consumer.php</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">&lt;?phpif (PHP_SAPI !== 'cli') {    echo 'Warning: should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;}require_once('./vendor/autoload.php');use Pheanstalk\Pheanstalk;$pheanstalk  = new Pheanstalk('127.0.0.1', 11300);$tubeName = 'syslog';while (true) {    // 从指定队列获取信息，reserve 阻塞获取    $job = $pheanstalk-&gt;useTube($tubeName)-&gt;watch($tubeName)-&gt;ignore('default')-&gt;reserve(60);    if ($job !== false) {        // do stuff        echo $data = $job-&gt;getData();        // 处理完成，删除 job        $pheanstalk-&gt;delete($job);    }    usleep(500000); // 0.5 s}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 consumer.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$ php consumer<span class="token operator">.</span>php<span class="token punctuation">{</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Debug"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"level"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"content"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"queue connect failed"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"timestamp"</span><span class="token punctuation">:</span><span class="token number">1576113851568</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"timeCreated"</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"2019-12-12 01:24:11"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用<strong>deamontools</strong>和<strong>supervisor</strong>等将<code>php consumer.php</code>变为常驻内存的进程。</p><h4 id="监控-beanstalkd-状态"><a href="#监控-beanstalkd-状态" class="headerlink" title="监控 beanstalkd 状态"></a>监控 beanstalkd 状态</h4><p>创建一个 heartbeat 来检查与服务器的连接状态</p><p>heartbeat.php</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">&lt;?php/** * 心跳检查脚本：定期在定时任务系统（crontab、MySQL Event Scheduler、Elastic-Job）上运行并收集与服务器连接状态信息， * 如果连接不是活的状态，则可以发送消息报警（sms、email） */if (PHP_SAPI !== 'cli') {    echo 'Warning: should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;}require_once('./vendor/autoload.php');use Pheanstalk\Pheanstalk;$pheanstalk  = new Pheanstalk('127.0.0.1', 11300);$isAlive = $pheanstalk-&gt;getConnection()-&gt;isServiceListening();var_dump($isAlive);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 heartbeat.php</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ php heartbeat.phpbool(true)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-beanstalkd-管理工具"><a href="#4-beanstalkd-管理工具" class="headerlink" title="4. beanstalkd 管理工具"></a>4. beanstalkd 管理工具</h2><p>Tools：<a href="https://github.com/beanstalkd/beanstalkd/wiki/Tools">https://github.com/beanstalkd/beanstalkd/wiki/Tools</a></p><p>笔者经常使用的两款工具：</p><p>web 界面：<a href="https://github.com/ptrofimov/beanstalk_console">https://github.com/ptrofimov/beanstalk_console</a></p><p>命令行：<a href="https://github.com/src-d/beanstool">https://github.com/src-d/beanstool</a></p><p>对 beanstalkd 的操作也可以使用<code>telnet</code>，比如 <code>telnet 127.0.0.1 11300</code>。然后便可以执行 beanstalkd 的各命令，如 <code>stats</code> 查看信息，<code>use</code>, <code>put</code>, <code>watch</code> 等等。</p><p><code>telnet</code>对beanstalkd的操作：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ telnet 127.0.0.1 11300statsOK 929---current-jobs-urgent: 0current-jobs-ready: 0current-jobs-reserved: 0current-jobs-delayed: 0current-jobs-buried: 0...list-tubesOK 23---- default- syslog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Beanstalkd-使用总结"><a href="#5-Beanstalkd-使用总结" class="headerlink" title="5. Beanstalkd 使用总结"></a>5. Beanstalkd 使用总结</h2><ul><li><p>如果需要对<code>job</code>有<strong>持久化</strong>的需要，在启动beanstalkd时可以使用<code>-b</code>参数来开启<code>binlog</code>（二进制日志）， 通过<code>binlog</code>可以将<code>job</code>及其状态记录到文件里，如果断电，则可以使用相同的选项重新启动beanstalkd，它将读取<code>binlog</code>来恢复之前的<code>job</code>及状态</p></li><li><p><code>put</code>前先要<code>use tube xxxtube</code>，这样<code>put</code>的时候就会把<code>job</code>放到指定名称的<code>tube</code>中，否则会放到一个<code>default</code>的<code>tube</code>中</p></li><li><p><code>reserve</code>或<code>reserve-with-timeout</code>前先要<code>watch xxxtube</code>，可以同时监控多个<code>tube</code>，这样可以同时取几个队列的任务。但是，千万要小心，如果在一个进程中，不小心<code>watch</code>到了多个<code>tube</code>，那么有时候会取错任务，一般取<code>job</code>的步骤为：<code>useTube xxxtube -&gt; watch xxxtube -&gt; ignore default -&gt; reserve</code></p></li><li><p><code>job</code>处理完成，应该<code>delete</code>删除掉，或者<code>release</code>再放回队列，或者<code>bury</code>把它埋葬掉，这个取决于你的设计</p></li></ul><h2 id="6-Beanstalkd-不足"><a href="#6-Beanstalkd-不足" class="headerlink" title="6. Beanstalkd 不足"></a>6. Beanstalkd 不足</h2><ul><li><p>无最大内存控制，如果有消息堆积或者业务使用方式有误，而导致内存暴涨拖垮机器</p></li><li><p>跟<code>Memcached</code>类似，没有<code>master-slave</code>故障切换机制，需要自己解决单点问题</p></li></ul><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a>7. 参考资料</h2><ul><li><a href="https://beanstalkd.github.io/">beanstalkd 官网</a></li><li><a href="https://github.com/beanstalkd/beanstalkd/wiki/Client-Libraries">Beanstalkd 客户端</a></li><li><a href="https://github.com/beanstalkd/beanstalkd/wiki/FAQ">beanstalkd FAQ</a></li><li><a href="https://github.com/beanstalkd/beanstalkd/blob/master/doc/protocol.zh-CN.md">Beanstalkd 中文协议</a></li><li><a href="https://github.com/pheanstalk/pheanstalk">pheanstalk</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 多进程编程</title>
      <link href="/2021/06/29/php-duo-jin-cheng-bian-cheng/"/>
      <url>/2021/06/29/php-duo-jin-cheng-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-多进程编程"><a href="#PHP-多进程编程" class="headerlink" title="PHP 多进程编程"></a>PHP 多进程编程</h1><hr><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>想完成某个耗时的任务，又觉得一个进程太慢，那么，试试用多进程来搞吧。这篇文章将会介绍一下<code>PHP</code>多进程的基本知识，如何创建多进程以及基本的信号控制。</p><h2 id="1-基本概念与环境准备"><a href="#1-基本概念与环境准备" class="headerlink" title="1. 基本概念与环境准备"></a>1. 基本概念与环境准备</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><p>程序和进程</p><blockquote><p>程序（program）是一个存储在磁盘上某个目录中的可执行文件。</p><p>程序的执行实例被称为进程（process）。</p></blockquote></li><li><p>进程相关概念</p></li></ul><p>1）进程ID</p><p>进程标识符（<code>PID</code>）是大多数操作系统的内核用于唯一标识进程的一个数值。这一数值可以作为许多函数调用的参数，以使调整进程优先级、杀死进程之类的进程控制行为成为可能。</p><p>在<code>UNIX</code>里，除了<code>进程0</code>（即PID=0的交换进程，Swapper Process）以外的所有进程都是由其他进程使用系统调用<code>fork</code>创建的，这里调用<code>fork</code>创建新进程的进程即为父进程，而相对应的为其创建出的进程则为子进程，因而除了<code>进程0</code>以外的进程都只有一个父进程，但一个进程可以有多个子进程。</p><p> 0号进程是系统引导时创建的一个特殊进程，在其调用<code> fork</code>创建出一个子进程（即PID=1的进程1，又称 init）后，<code> 进程0</code>就转为交换进程（有时也被称为空闲进程），而<code> 进程1</code>（init进程）就是系统里其他所有进程的祖先。</p><p>2）调用进程的父进程ID</p><p>3）调用进程的实际用户ID</p><p>4）调用进程的有效用户ID</p><p>5）调用进程的实际组ID</p><p>6）调用进程的有效组ID</p><p>7）进程的优先级</p><p>例如修改bash进程的优先级</p><ul><li>获取bash进程的进程ID<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[dendi875@localhost ~]$ echo $$3224<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>top查看进程的优先级</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">top -d -2 -p &lt;pid&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>top状态下按<strong>r</strong>输入进程ID后按回车，然后再输入<code>nice</code>值</li></ul><p>8）进程状态</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/process-status.png" alt="process-status"></p><p>9）进程组</p><ul><li>进程组是一个或多个进程的集合。每个进程组有一个唯一的进程组ID。进程组ID类似进程ID，它是一个正整数。</li><li>每个进程组有一个组长进程。组长进程的进程ID等于其进程ID。</li></ul><p>10）会话</p><ul><li>会话（session）是一个或多个进程组的集合。</li><li>如果调用进程不是一个组长进程则可以使用<code>setsid</code>来创建一个新会话。具体会发生3件事<ul><li>该进程变成新会话的<strong>会话首进程</strong>（会话首进程是创建该会话的进程）。此时，该进程是新会话中的唯一进程。</li><li>该进程成为一个新进程组的组长进程。新进程组ID是该调用进程的进程ID。</li><li>该进程脱离控制终端。</li></ul></li></ul><p>11）控制终端</p><ul><li>一个会话可以有一个<strong>控制终端</strong>。本地终端（例如：tty1）或远程终端（例如：/pts/0）。</li><li>一个会话中的几个进程组可被分成一个前台进程组（foreground process group）以及一个或多个后台进程组（background process group）。</li><li>如果一个会话有一个控制终端，则它有一个前台进程组，其他进程组为后台进程组。</li></ul><p>12）和信号相关的信息</p><ul><li><code>Ctrl+C</code> 发送<code>SIGINT</code>信号，终止进程</li><li><code>Ctrl+\</code> 发送<code>SIGQUIT</code>信号，终止进程并产生<strong>coredump</strong></li><li>关闭<code>session</code>，发送<code>SIGHUP</code>信号</li><li>浮点异常时产生<code>SIGFPE</code>信号，比如除以0</li><li>段错误时产生<code>SIGSEGV</code>信号</li></ul><p>相关的<code>linux</code>命令</p><ul><li>进程相关</li></ul><pre class="line-numbers language-none"><code class="language-none">ps -elfps auxps ajxfpstree -Auptop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>线程相关</p><pre class="line-numbers language-none"><code class="language-none">ps -eLfps -Lw &lt;pid&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>信号相关</p><pre class="line-numbers language-none"><code class="language-none">kill -lman 7 signalulimit -aman 5 coreman 5 limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>和终端终端相关</p><pre class="line-numbers language-none"><code class="language-none">stty --helpbgfgkill -&lt;signo&gt; &lt;%jobid&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><p><code>php</code>多进程主要是在<code>CLI</code>（命令行模式）下应用。</p></li><li><p> <code>php</code>多进程需要安装<code>pcntl</code>（process control）和<code>posix</code>扩展（windows不支持）。</p></li></ul><p>确认扩展是否都有安装：</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ~]# php -m | grep -E 'pcntl|posix'pcntlposix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译时<code>pcntl</code>扩展默认是不安装的，记得编译配置时加上<code>--enable-pcntl</code>参数；<code>posix</code>扩展默认安装，只要你编译时没有加上<code>--disable-posix</code>。</p><h2 id="2-主要函数详解"><a href="#2-主要函数详解" class="headerlink" title="2. 主要函数详解"></a>2. 主要函数详解</h2><h3 id="pcntl-fork-创建子进程"><a href="#pcntl-fork-创建子进程" class="headerlink" title="pcntl_fork() 创建子进程"></a>pcntl_fork() 创建子进程</h3><p>例子1：创建一个子进程 fork1.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"11111111111111111111\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//  返回值为-1,创建失败</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'could not fork'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 子进程中</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I'm child pid：%d ppid：%d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 父进程中</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I'm parent pid：%d ppid：%d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"2222222222222222222\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cli" data-language="cli"><div class="caption"><span>```下运行结果为：</span></div><code class="language-cli">```ssh[dendi875@localhost process]$ php fork1.php11111111111111111111I'm parent pid：7526 ppid：27892222222222222222222I'm child pid：7527 ppid：75262222222222222222222<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码说明<code>pcntl_fork()</code>函数调用成功后，在父进程中会返回子进程的<code>PID</code>，而在子进程中返回的是<code>0</code>。</p><p>例子2：创建多个子进程 fork2.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** *循环创建多个进程 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//  返回值为-1，创建失败</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'could not fork'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 子进程中</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I'm %d child pid：%d ppid：%d\n"</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 父进程中</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I'm %d parent pid：%d ppid：%d\n"</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cli" data-language="cli"><div class="caption"><span>```下运行结果为：</span></div><code class="language-cli">```ssh[dendi875@localhost process]$ php fork2.phpI'm 0 parent pid：7785 ppid：2789I'm 1 parent pid：7785 ppid：2789I'm 2 parent pid：7785 ppid：2789I'm 2 child pid：7788 ppid：7785I'm 1 child pid：7787 ppid：7785I'm 2 parent pid：7787 ppid：7785I'm 0 child pid：7786 ppid：7785I'm 1 parent pid：7786 ppid：7785I'm 2 parent pid：7786 ppid：7785I'm 2 child pid：7789 ppid：7787[dendi875@localhost process]$ I'm 1 child pid：7790 ppid：7786I'm 2 parent pid：7790 ppid：7786I'm 2 child pid：7791 ppid：7786I'm 2 child pid：7792 ppid：7790<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析为什么会出现8个进程，printf了14次？</strong></p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/fork.png" alt="fork"></p><p>例子3：循环创建多个子进程改进版 fork3.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** *循环创建多个进程 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//  返回值为-1，创建失败</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'could not fork'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 子进程中</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I'm %d child pid：%d ppid：%d\n"</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 父进程中</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I'm %d parent pid：%d ppid：%d\n"</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cli" data-language="cli"><div class="caption"><span>```下运行结果为</span></div><code class="language-cli">```shell[dendi875@localhost process]$ php fork3.phpI'm 0 parent pid：7776 ppid：2789I'm 1 parent pid：7776 ppid：2789I'm 2 parent pid：7776 ppid：2789I'm 2 child pid：7779 ppid：7776I'm 1 child pid：7778 ppid：7776I'm 0 child pid：7777 ppid：7776<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在循环中创建子进程需要注意以下两点：</p><p>1）子进程代码中要<code>exit</code>防止子进程再<code>fork</code>子进程，进入子进程的循环把系统的资源耗尽。</p><p>2）父进程代码中不要<code>exit</code>否则会终止多进程。</p><h3 id="pcntl-signal-注册信号处理函数和pcntl-signal-dispatch-检测是否有有信号未处理"><a href="#pcntl-signal-注册信号处理函数和pcntl-signal-dispatch-检测是否有有信号未处理" class="headerlink" title="pcntl_signal 注册信号处理函数和pcntl_signal_dispatch 检测是否有有信号未处理"></a>pcntl_signal 注册信号处理函数和pcntl_signal_dispatch 检测是否有有信号未处理</h3><p>例子：signal.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">signalHandler</span><span class="token punctuation">(</span><span class="token variable">$signo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$signo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token constant">SIGINT</span><span class="token punctuation">:</span>            <span class="token comment">// 处理按`Ctrl-C`时发送的SIGINT（2）信号</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"handle signal SIGINT （%d）\n"</span><span class="token punctuation">,</span> <span class="token variable">$signo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">SIGHUP</span><span class="token punctuation">:</span>            <span class="token comment">// 处理关闭`session`时发送的SIGHUP（1）信号</span>            <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"handle signal SIGHUP （%d）\n"</span><span class="token punctuation">,</span> <span class="token variable">$signo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'t.log'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">SIGTERM</span><span class="token punctuation">:</span>            <span class="token comment">// 处理`kill`命令默认发送的SIGTERM（15）信号</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"handle signal SIGTERM （%d）\n"</span><span class="token punctuation">,</span> <span class="token variable">$signo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token comment">// 处理其它信号</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 注册一个信号处理器，当接收到SIGINT、SIGHUP、SIGTERM信号时调用signalHandler函数</span><span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGINT</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'signalHandler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGHUP</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'signalHandler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGTERM</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'signalHandler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">pcntl_signal_dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检测是否有末决信号待处理，调用相应的信号处理函数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hello, %d\n"</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li><code>pcntl_signal()</code>函数仅仅是注册信号和它的处理方法，检测信号并调用其处理方法的函数是<code>pcntl_signal_dispatch()</code>。</li><li>9号信号（<strong>SIGKILL</strong>）和19号信号（<strong>SIGSTOP</strong>）不能被捕捉、不能被忽略、不能被阻塞。</li></ul><h3 id="孤儿进程与僵尸进程"><a href="#孤儿进程与僵尸进程" class="headerlink" title="孤儿进程与僵尸进程"></a>孤儿进程与僵尸进程</h3><h4 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h4><ul><li><p>所谓孤儿进程，顾名思义，和现实生活中的孤儿有点类似，当一个进程的<strong>父进程结束</strong>时，但是它自己还没有结束，那么这个进程将会成为孤儿进程。最后孤儿进程将会被<code>init进程</code>（进程号为1）的进程收养，当然在子进程结束时也会由init进程完成对它的状态收集工作，因此一般来说，孤儿进程并不会有什么危害。</p></li><li><p>孤儿进程实例：orphan.php</p></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">pr_ids</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%s：pid = %d, ppid = %d, pgid = %d, sid = %d\n"</span><span class="token punctuation">,</span>        <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$pid</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getpgid</span><span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getsid</span><span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">/* 子进程中 */</span>        <span class="token function">pr_ids</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 睡眠3s，保证父进程先退出，子进程成为孤儿进程 */</span>        <span class="token function">pr_ids</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"now child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 父进程睡眠1s，保证子进程先运行     * 在子进程还没有成为孤儿进程前打印父进程ID和子进程成为孤儿进程后打印的父进程ID做对比     */</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pr_ids</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"parent process is exited.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost process]# php orphan.phpchild：pid = 29615, ppid = 29614, pgid = 29614, sid = 7937parent：pid = 29614, ppid = 21998, pgid = 29614, sid = 7937parent process is exited.[root@localhost process]# now child：pid = 29615, ppid = 1, pgid = 29614, sid = 7937<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上例子中，在<code>run</code>函数中，创建子进程，然后让父进程睡眠1s，让子进程先打印出其进程<code> id（pid）</code>以及父进程<code> id（ppid）</code>；随后子进程睡眠3s（此时会调度到父进程运行直结束），目的是让<strong>父进程先于子进程结束</strong>，让子进程有个孤儿的状态；最后子进程再打印出其进程<code>id(pid)</code>以及父进程<code>id(ppid)</code>；观察两次打印 其父进程<code>id(ppid)</code>的区别。</p><p>从运行结果来看：当其父进程结束后，子进程成为了孤儿进程，其父进程<code>id(ppid)</code>为1，也就是说，<code>init进程</code>成为该子进程的父进程了。</p><h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h4><blockquote><p>当一个进程正常或异步终止时，内核就向其父进程发送 <code>SIGCHLD</code>信号。因为子进程终止是个异步事件（这可以在父进程运行的任何时候发生），所以这种信号也是内核向父进程发的异步通知。父进程可以选择忽略该信号，或者提供一个该信号发生时即被调用执行的函数（信号处理程序）。对于这种信号的系统默认动作是忽略它。–APUE</p></blockquote><ul><li>僵尸进程实例：zombie.c</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 僵尸进程实例 */</span><span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">/* 子进程中 */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I am child process pid：%d\tppid：%d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"child process is exited.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/* 子进程正常退出 */</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I am parent process pid：%d\tppid：%d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行查看</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@vultr:/data1/www/test/php/process# php zombie.phpI am parent process pid：25210  ppid：24032I am child process pid：25211   ppid：25210child process is exited.I am parent process pid：25210  ppid：24032I am parent process pid：25210  ppid：24032...（省略）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再打开一个终端查看进程状态</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">root@vultr:~# ps -elf...（省略）0 S root     25312 24032  0  80   0 - 19076 hrtime 03:07 pts/0    00:00:00 php zombie.php1 Z root     25313 25312  0  80   0 -     0 -      03:07 pts/0    00:00:00 [php] &lt;defunct&gt;...（省略）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>僵尸进程是指：一个进程使用<code>fork</code>创建子进程，如果<strong>子进程退出</strong>，而父进程并没有调用<code>wait</code>或<code>waitpid</code>获取子进程的状态信息，那么子进程的某些信息如进程描述符仍然保存在系统中。这种进程称之为僵尸进程。</p><p>我们详细理解下，在<code>UNIX/Linux</code>中，正常情况下，子进程是通过父进程<code>fork</code> 创建的。子进程和父进程的运行是一个异步过程，理论上父进程无法知道子进程的运行状态。但知道子进程运行状态是一个很合理的需求，所以<code>UNIX</code> 提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息，就可以得到。这种机制就是: 在每个进程退出的时候，内核释放该进程的一部分资源，包括<strong>打开的文件</strong>、<strong>占用的内存</strong>等，同时仍然为其保留一定的信息（包括<strong>进程号</strong>，<strong>退出状态</strong>，<strong>运行时间</strong>等）。父进程可以通过<code>wait()/waitpid()</code>来获取这些信息，然后操作系统才释放。</p><p>如果父进程不调用<code>wait()/waitpid()</code> 的话，那么保留的信息就不会释放，其进程号就会一直被占用，就像僵尸一样，所以把这些进程称为僵尸进程。</p><h3 id="pcntl-waitpid-回收僵尸进程"><a href="#pcntl-waitpid-回收僵尸进程" class="headerlink" title="pcntl_waitpid 回收僵尸进程"></a>pcntl_waitpid 回收僵尸进程</h3><p>例子1：<code>waitpid</code> 阻塞/非阻塞回收指定的子进程 waitpid.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 使用waitpid阻塞/非阻塞回收指定的子进程 */</span><span class="token comment">/** * 打印进程退出状态 */</span><span class="token keyword">function</span> <span class="token function-definition function">pr_exit</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifexited</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"normal termination, exit status = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wexitstatus</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifsignaled</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"abnormal termination, signal number = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wtermsig</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifstopped</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"child stoped, signal number = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wstopsig</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">/* 子进程中 */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I am child process pid：%d\tppid：%d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"child process is exited.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I am parent process pid：%d\tppid：%d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//$wid = pcntl_waitpid($pid, $status, 0);</span>        <span class="token variable">$wid</span> <span class="token operator">=</span> <span class="token function">pcntl_waitpid</span><span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">,</span> <span class="token constant">WNOHANG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$wid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"waitpid error：%s\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_strerror</span><span class="token punctuation">(</span><span class="token function">pcntl_errno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$wid</span> <span class="token operator">==</span> <span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">pr_exit</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"wait for child wid = %d\n"</span><span class="token punctuation">,</span> <span class="token variable">$wid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子2：waitpid阻塞/非阻塞回收多个子进程实例 waitpid2.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * waitpid阻塞/非阻塞回收多个子进程实例 */</span><span class="token comment">/** * 打印进程退出状态 */</span><span class="token keyword">function</span> <span class="token function-definition function">pr_exit</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifexited</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"normal termination, exit status = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wexitstatus</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifsignaled</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"abnormal termination, signal number = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wtermsig</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifstopped</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"child stoped, signal number = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wstopsig</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token variable">$childs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">/* 子进程中 */</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I am child process pid：%d\tppid：%d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// sleep($i+1);  /* 非阻塞时打开注释 */</span>            <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">/* 父进程中 */</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I am parent process pid：%d\tppid：%d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">posix_getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$childs</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$pid</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$childs</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$childs</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$wid</span> <span class="token operator">=</span> <span class="token function">pcntl_waitpid</span><span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">/* 阻塞*/</span>            <span class="token comment">// $wid = pcntl_waitpid($pid, $status, WNOHANG);  /* 非阻塞 */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$wid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"waitpid error：%s\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_strerror</span><span class="token punctuation">(</span><span class="token function">pcntl_errno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$wid</span> <span class="token operator">==</span> <span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$childs</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">pr_exit</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"wait for child wid = %d\n"</span><span class="token punctuation">,</span> <span class="token variable">$wid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码输出：</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost process]# ./wait-nohang.phpparent  8288    7870    1542632609.5141wait return is 0parent  8288    7870    1542632609.5142wait return is 0parent  8288    7870    1542632609.5144wait return is 0child   8291    8288    1542632609.5172child   8290    8288    1542632609.5174child   8289    8288    1542632609.5178<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子3：使用信号处理函数来回收僵尸进程 sigchld.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 使用信号处理函数来回收僵尸进程 */</span><span class="token comment">/** * 打印进程退出状态 */</span><span class="token keyword">function</span> <span class="token function-definition function">pr_exit</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifexited</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"normal termination, exit status = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wexitstatus</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifsignaled</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"abnormal termination, signal number = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wtermsig</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_wifstopped</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"child stoped, signal number = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pcntl_wstopsig</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * SIGCHLD 信号处理函数 */</span><span class="token keyword">function</span> <span class="token function-definition function">sig_chld</span><span class="token punctuation">(</span><span class="token variable">$signo</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">,</span> <span class="token constant">WNOHANG</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pr_exit</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">/* 子进程中 */</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/* 10个子进程 */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"child ID %d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//posix_kill(posix_getpid(), SIGABRT);</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* 一个父进程 */</span>        <span class="token comment">// 安装 SIGCHLD 信号处理函数</span>        <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGCHLD</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sig_chld'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">pcntl_signal_dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 检测是否有未处理的信号 */</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"parent ID %d\n"</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>备注：</p><p>1）<code>pcntl_waitpid(-1, $status, 0)</code>行为等价于函数<code>pcntl_wait($status)</code></p><p>2）多理解<code>pcntl_waitpid</code>函数的<code>pid</code>的4种情况（&lt; -1, -1, 0, &gt; 0）及3种返回值（0, &gt; 0, -1）。</p><p>这里要理解多进程程序中父进程阻塞与非阻塞的区别</p><ul><li>阻塞： 父进程一直等待，直到收到一个子进程结束的信号再执行。</li><li>非阻塞：父进程和子进程同时执行，不用等子进程执行完。在子进程退出后，再回收。</li></ul><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><blockquote><p>守护进程（daemon）是一种生存期很长的一种进程。它们通常是在系统开机时启动，在系统关闭时才终止。它们脱离控制终端在后台长期运行为我们提供某种服务。守护进程程序的名称通常以字母“d”结尾，例如<strong>syslogd</strong>就是指管理系统日志的守护进程。</p></blockquote><p>创建一个守护进程实例</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 创建一个守护进程 */</span><span class="token keyword">function</span> <span class="token function-definition function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/**     *重新设置文件权限掩码     */</span>    <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 调用fork创建子进程，父进程退出，保证了子进程不是一个组长进程，这是执行setsid调用的先决条件     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">/* 父进程中 */</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建一个会话，使进程成为会话首进程并脱离控制终端     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">posix_setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"setsid error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 再次fork避免在System V的系统中，重新获取对终端的控制     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 改变当前工作目录     */</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建守护进程步骤：</p><p>1）重新设置文件权限掩码。<strong>umask</strong> 函数，防止使用继承过来的掩码来创建文件可能会被设置为拒绝某些权限</p><p>2）调用<strong>fork</strong>创建子进程，父进程退出。保证了子进程不是一个组长进程，这是执行<strong>setsid</strong>调用的先决条件</p><p>3）调用setsid创建一个新的会话。目的是使调用进程：</p><ul><li><p>成为新会话的首进程</p></li><li><p>成为一个新进程组的组长进程</p></li><li><p>脱离控制终端</p></li></ul><p>4）调用<strong>chdir</strong>更改当前工作目录，一般为根目录。防止占用可卸载的文件系统</p><p>5）关闭所有的文件描述符。从父进程继承过来的文件描述符不会再被用到，如果不关闭就浪费了系统资源</p><p>6）使0、1、2文件描述符指向<code>/dev/null</code>。目的是使任何一个试图从标准输入读、写到标准输出、写到标准错误的程序都不会产生效果，因为守护进程并不与终端设备相关联，所以其输出无处显示，也无处从交互式用户那里接收输入。</p><h2 id="3-如何让挂掉的服务自动启动"><a href="#3-如何让挂掉的服务自动启动" class="headerlink" title="3. 如何让挂掉的服务自动启动"></a>3. 如何让挂掉的服务自动启动</h2><ul><li> <code>nohup</code>与<code>&amp;</code>的区别</li></ul><p>测试代码如下 hello.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hello, %d\n"</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用 <code>php hello.php</code>前台运行，效果如下</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost process]# php hello.phphello, 0hello, 1hello, 2hello, 3^C[root@localhost process]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时键入<code>Ctrl-C</code>，程序会收到一个<code>SIGINT</code>信号，如果不做特殊处理，程序的默认行为是终止。</p></li><li><p>使用<code>php hello.php &amp;</code>后台运行程序，效果如下</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost process]# php hello.php &amp;[2] 31540[root@localhost process]# hello, 0hello, 1^C[root@localhost process]# hello, 2hello, 3^C[root@localhost process]# hello, 4hello, 5hello, 6hello, 7hello, 8^C[root@localhost process]# hello, 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ~]# ps aux | grep helloroot     31540  0.1  0.7  35964  7776 pts/0    S    17:33   0:00 php hello.phproot     31544  0.0  0.0   5976   748 pts/1    S+   17:33   0:00 grep --color=auto hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到首先会在终端显示进程号31540，键入<code>Ctrl-C</code>，发送<code>SIGINT</code>信号，<strong>程序会继续运行</strong>。<code>ps</code>查看进程的确在运行。</p><p>此时关掉<code>session</code>，程序会收到一个<code>SIGHUP</code>信号，此时会怎么样？</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ~]# ps aux | grep helloroot     31792  0.0  0.0   5976   748 pts/1    S+   18:07   0:00 grep --color=auto hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-ps" data-language="ps"><div class="caption"><span>```再次确认，可以看到关闭``` session ```之后，进程号是31540的``` hello.php ```的进程也关闭了。</span></div><code class="language-ps">* 使用``` nohup php hello.php ```效果是怎么样？``` ssh[root@localhost process]# nohup php hello.phpnohup: 忽略输入并把输出追加到"nohup.out"[root@localhost ~]# ps aux | grep hello.phproot     31835  0.1  0.7  35964  7776 pts/0    S+   18:10   0:00 php hello.phproot     31863  0.0  0.0   5976   752 pts/1    S+   18:11   0:00 grep --color=auto hello.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>nohup</code>运行程序后，用<code>ps</code>查看进程号是31835。此时关掉<code>session</code>，程序会收到一个<code>SIGHUP</code>信号，程序会不会关闭呢？</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ~]# ps aux | grep hello.phproot     31835  0.0  0.7  35964  7776 ?        S    18:10   0:00 php hello.phproot     31881  0.0  0.0   5976   756 pts/1    S+   18:13   0:00 grep --color=auto hello.php[root@localhost ~]# ps aux | grep hello.phproot     31835  0.0  0.7  35964  7776 ?        S    18:10   0:00 php hello.phproot     31883  0.0  0.0   5976   752 pts/1    S+   18:13   0:00 grep --color=auto hello.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关掉<code>session</code>后，再次<code>ps</code>查看，<code>PID</code>为31835的进程还在。只能通过<code>kill</code>杀掉。</p><ul><li>测试下<code>nohup php hello.php</code>后按<code>Ctrl-C</code>会发生什么？</li></ul><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost process]# nohup php hello.phpnohup: 忽略输入并把输出追加到"nohup.out"^C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到键入<code>Ctrl-C</code>，程序收到<code>SIGINT</code>信号后，程序关闭了。</p><ul><li>最后测试下<code>nohup</code>和<code>&amp;</code>，同时使用，即<code>nohup php hello.php &amp;</code>会怎么样？</li></ul><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost process]# nohup php hello.php &amp;[1] 32004[root@localhost process]# nohup: 忽略输入并把输出追加到"nohup.out"^C[root@localhost process]# ^C[root@localhost process]# ^C[root@localhost process]# ps aux | grep hello.phproot     32004  0.0  0.7  35964  7776 pts/0    S    18:27   0:00 php hello.phproot     32015  0.0  0.0   5976   780 pts/0    S+   18:28   0:00 grep --color=auto hello.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时键入<code>Ctrl-C</code>，发送<code>SIGINT</code>信号，该进程还在。<br>此时关闭<code>session</code>，发送<code>SIGHUP</code>信号，再来看看进程还在不在？</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ~]# ps aux | grep hello.phproot     32004  0.1  0.7  35964  7776 ?        S    18:27   0:00 php hello.phproot     32053  0.0  0.0   5976   756 pts/1    S+   18:29   0:00 grep --color=auto hello.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到关闭<code>session</code>，后进程还在，现在也只能使用<code>kill</code>来杀掉。</p><p>结论<br>使用<code>&amp;</code>后台运行程序：</p><blockquote><p>使用<code>Ctrl-C</code>发送<code>SIGINT</code>信号，进程免疫。</p><p>关闭<code>session</code>发送<code>SIGHUP</code>信号，进程终止。</p></blockquote><p>使用<code>nohup</code>运行程序：</p><blockquote><p>使用<code>Ctrl-C</code>发送<code>SIGINT</code>信号，进程终止。</p><p>关闭<code>session</code>发送<code>SIGHUP</code>信号，进程免疫。</p></blockquote><p>使用<code>&amp;nohup</code>和<code>&amp;</code>来配合启动程序：</p><blockquote><p>同时免疫<code>SIGINT</code>和<code>SIGHUP</code>信号</p></blockquote><p>思考：如果使用了<code>nohup</code>和<code>&amp;</code>启动程序后，程序因异常情况被<code>kill</code>掉，如何让程序自动启动？</p><h2 id="4-进程的守护神daemontools和supervisor"><a href="#4-进程的守护神daemontools和supervisor" class="headerlink" title="4. 进程的守护神daemontools和supervisor"></a>4. 进程的守护神daemontools和supervisor</h2><p>daemontools：<a href="https://github.com/dendi875/Linux/blob/master/daemontools.md">https://github.com/dendi875/Linux/blob/master/daemontools.md</a></p><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><ul><li><a href="https://book.douban.com/subject/1788421/">APUE</a></li><li><a href="https://www.php.net/manual/zh/book.posix.php">PHP：POSIX</a></li><li><a href="https://www.php.net/manual/zh/book.pcntl.php">PHP：PCNTL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 的 4 个阶段的撤销更改</title>
      <link href="/2021/06/29/git-de-4-ge-jie-duan-de-che-xiao-geng-gai/"/>
      <url>/2021/06/29/git-de-4-ge-jie-duan-de-che-xiao-geng-gai/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-的-4-个阶段的撤销更改"><a href="#Git-的-4-个阶段的撤销更改" class="headerlink" title="Git 的 4 个阶段的撤销更改"></a>Git 的 4 个阶段的撤销更改</h1><blockquote><p>原文出处：<a href="https://www.fengerzh.com/git-reset/">张京</a></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/63918611gy1fltan48ktfj21hm12y7f5.jpg" alt="img"></p><p>虽然git诞生距今已有12年之久，网上各种关于git的介绍文章数不胜数，但是依然有很多人（包括我自己在内）对于它的功能不能完全掌握。以下的介绍只是基于我个人对于git的理解，并且可能生编硬造了一些不完全符合git说法的词语。目的只是为了让git通俗化，使初学者也能大概了解如何快速上手git。同时，下面所有讨论，我们都假设只使用一个分支，也就是主分支master的情况，虽然这种作法并不符合git规范，但是现实情况中绝大部分用户是直接在master分支上进行工作的，所以在这里我们不去引入更加复杂的各种分支的情况，也不涉及标签tag的操作，只讲在最简单的主分支上如何回退。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="3个步骤"><a href="#3个步骤" class="headerlink" title="3个步骤"></a>3个步骤</h3><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/63918611gy1fltan4vu1cj20m80463yo.jpg" alt="img"></p><p>正常情况下，我们的工作流就是3个步骤，对应上图中的3个箭头线：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git add .git commit -m "comment"git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><code>git add .</code> 把所有文件放入<code>暂存区</code>；</li><li><code>git commit</code> 把所有文件从<code>暂存区</code>提交进<code>本地仓库</code>；</li><li><code>git push</code> 把所有文件从<code>本地仓库</code>推送进<code>远程仓库</code>。</li></ol><h3 id="4个区"><a href="#4个区" class="headerlink" title="4个区"></a>4个区</h3><p>git之所以令人费解，主要是它相比于svn等等传统的版本管理工具，多引入了一个<strong>暂存区</strong>(Stage)的概念，就因为多了这一个概念，而使很多人疑惑。其实，在初学者来说，每个区具体怎么工作的，我们完全不需要关心，而只要知道有这么4个区就够了：</p><ul><li>工作区(Working Area)</li><li>暂存区(Stage)</li><li>本地仓库(Local Repository)</li><li>远程仓库(Remote Repository)</li></ul><h3 id="5种状态"><a href="#5种状态" class="headerlink" title="5种状态"></a>5种状态</h3><p>以上4个区，进入每一个区成功之后会产生一个状态，再加上最初始的一个状态，一共是5种状态。以下我们把这5种状态分别命名为：</p><ul><li>未修改(Origin)</li><li>已修改(Modified)</li><li>已暂存(Staged)</li><li>已提交(Committed)</li><li>已推送(Pushed)</li></ul><h2 id="检查修改"><a href="#检查修改" class="headerlink" title="检查修改"></a>检查修改</h2><p>了解了基本概念之后，我们来谈一谈犯错误之后如何撤销的问题。首先，我们要了解如何检查这3个步骤当中每一个步骤修改了什么，然后才好判断有没有修改成功。检查修改的二级命令都相同，都是diff，只是参数有所不同。</p><h3 id="已修改，未暂存"><a href="#已修改，未暂存" class="headerlink" title="已修改，未暂存"></a>已修改，未暂存</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git diff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先，我们来看一下，如果我们只是简单地在浏览器里保存了一下文件，但是还没有做<code>git add .</code>之前，我们如何检查有哪些修改。我们先随便拿一个文件来做一下实验：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/63918611gy1fltan5a4xuj20fi07z3zc.jpg" alt="img"></p><p>我们在文件开头的第2行胡乱加了4个数字<code>1234</code>，存盘，这时文件进入了已修改状态，但是还没有进入<code>暂存区</code>，我们运行<code>git diff</code>，结果如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">diff --git a/index.md b/index.mdindex 73ff1ba..1066758 100644--- a/index.md+++ b/index.md&lt;a href='http://www.jobbole.com/members/li754132448'&gt;@@&lt;/a&gt; -1,5 +1,5 &lt;a href='http://www.jobbole.com/members/li754132448'&gt;@@&lt;/a&gt; ----layout: main+1234layout: main color: black ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git diff</code>的结果告诉我们哪些文件已经做了哪些修改。</p><h3 id="已暂存，未提交"><a href="#已暂存，未提交" class="headerlink" title="已暂存，未提交"></a>已暂存，未提交</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git diff --cached<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在我们把修改放入<code>暂存区</code>看一下。先执行<code>git add .</code>，然后执行<code>git diff</code>，你会发现没有任何结果：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/63918611gy1fltan5m82pj20ag01rt8l.jpg" alt="img"></p><p>这说明<code>git diff</code>这个命令只检查我们的<code>工作区</code>和<code>暂存区</code>之间的差异，如果我们想看到<code>暂存区</code>和<code>本地仓库</code>之间的差异，就需要加一个参数<code>git diff --cached</code>：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">diff --git a/index.md b/index.mdindex 73ff1ba..1066758 100644--- a/index.md+++ b/index.md&lt;a href='http://www.jobbole.com/members/li754132448'&gt;@@&lt;/a&gt; -1,5 +1,5 &lt;a href='http://www.jobbole.com/members/li754132448'&gt;@@&lt;/a&gt; ----layout: main+1234layout: main color: black ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候我们看到的差异是<code>暂存区</code>和<code>本地仓库</code>之间的差异。</p><h3 id="已提交，未推送"><a href="#已提交，未推送" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git diff master origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，我们把修改从<code>暂存区</code>提交到<code>本地仓库</code>，再看一下差异。先执行<code>git commit</code>，然后再执行<code>git diff --cached</code>，没有差异，执行<code>git diff master origin/master</code>，可以看到差异：</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/63918611gy1fltan637jhj20en076aas.jpg" alt="img"></p><p>在这里，<code>master</code>就是你的本地仓库，而<code>origin/master</code>就是你的远程仓库，<code>master</code>是主分支的意思，因为我们都在主分支上工作，所以这里两边都是<code>master</code>，而<code>origin</code>就代表远程。</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>了解清楚如何检查各种修改之后，我们开始尝试各种撤销操作。</p><h3 id="已修改，未暂存-1"><a href="#已修改，未暂存-1" class="headerlink" title="已修改，未暂存"></a>已修改，未暂存</h3><p>如果我们只是在编辑器里修改了文件，但还没有执行<code>git add .</code>，这时候我们的文件还在工作区，并没有进入暂存区，我们可以用：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git checkout .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来进行撤销操作。</p><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/63918611gy1fltan6hur7j20c9075jrr.jpg" alt="img"></p><p>可以看到，在执行完<code>git checkout .</code>之后，修改已被撤销，<code>git diff</code>没有任何内容了。</p><blockquote><p><strong>一对反义词</strong> <code>git add .</code>的反义词是<code>git checkout .</code>。做完修改之后，如果你想向前走一步，让修改进入暂存区，就执行<code>git add .</code>，如果你想向后退一步，撤销刚才的修改，就执行<code>git checkout .</code>。</p></blockquote><h3 id="已暂存，未提交-1"><a href="#已暂存，未提交-1" class="headerlink" title="已暂存，未提交"></a>已暂存，未提交</h3><p>你已经执行了<code>git add .</code>，但还没有执行<code>git commit -m "comment"</code>。这时候你意识到了错误，想要撤销，你可以执行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git resetgit checkout .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git reset</code>只是把修改退回到了<code>git add .</code>之前的状态，也就是说文件本身还处于已修改未暂存状态，你如果想退回未修改状态，还需要执行<code>git checkout .</code>。</p><p>或许你已经注意到了，以上两个步骤都可以用同一个命令<code>git reset --hard</code>来完成。是的，就是这个强大的命令，可以一步到位地把你的修改完全恢复到未修改的状态。</p><h3 id="已提交，未推送-1"><a href="#已提交，未推送-1" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h3><p>你的手太快，你既执行了<code>git add .</code>，又执行了<code>git commit</code>，这时候你的代码已经进入了你的本地仓库，然而你后悔了，怎么办？不要着急，还有办法。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hard origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还是这个<code>git reset --hard</code>命令，只不过这次多了一个参数<code>origin/master</code>，正如我们上面讲过的，<code>origin/master</code>代表远程仓库，既然你已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧。</p><h3 id="已推送"><a href="#已推送" class="headerlink" title="已推送"></a>已推送</h3><p>很不幸，你的手实在是太快了，你既<code>git add</code>了，又<code>git commit</code>了，并且还<code>git push</code>了，这时你的代码已经进入远程仓库。如果你想恢复的话，还好，由于你的本地仓库和远程仓库是等价的，你只需要先恢复本地仓库，再强制push到远程仓库就好了：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git reset --hard HEAD^git push -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/63918611gy1fltan6vs0lj20di04d0td.jpg" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上4种状态的撤销我们都用到了同一个命令<code>git reset --hard</code>，前2种状态的用法甚至完全一样，所以只要掌握了<code>git reset --hard</code>这个命令的用法，从此你再也不用担心提交错误了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.fengerzh.com/git-reset/">原文</a></li><li><a href="https://segmentfault.com/a/1190000011910766">独孤求败：Git中的各种后悔药</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 学习研究</title>
      <link href="/2021/06/29/elasticsearch-xue-xi-yan-jiu/"/>
      <url>/2021/06/29/elasticsearch-xue-xi-yan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch-学习研究"><a href="#Elasticsearch-学习研究" class="headerlink" title="Elasticsearch 学习研究"></a>Elasticsearch 学习研究</h1><hr><h2 id="1-Elasticsearch-介绍"><a href="#1-Elasticsearch-介绍" class="headerlink" title="1. Elasticsearch 介绍"></a>1. Elasticsearch 介绍</h2><p>Elasticsearch（ES）是基于文本搜索库<a href="https://lucene.apache.org/">Lucene</a>构建的高度可扩展的分布式开源搜索和分析引擎。</p><p>如果有足够的计算机，ES集群通常可以跨非常大的数据集执行搜索和聚合查询。<br>如果你希望对一组文本文档进行传统的全文本搜索（类似于 Google 搜索），则ES很适合，</p><p>Elasticsearch 主要用于搜索和日志分析，也是当今最流行的日志分析平台（ELK）（Elasticsearch，Logstash和Kibana）的核心。它在处理大数据（如：系统日志，网络流量）时非常有用。</p><h2 id="2-Elasticsearch-中的重要概念"><a href="#2-Elasticsearch-中的重要概念" class="headerlink" title="2. Elasticsearch 中的重要概念"></a>2. Elasticsearch 中的重要概念</h2><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/Elasticsearch.png" alt="Elasticsearch"></p><h3 id="2-1-Cluster（集群）"><a href="#2-1-Cluster（集群）" class="headerlink" title="2.1 Cluster（集群）"></a>2.1 Cluster（集群）</h3><p>cluster是一个或一组服务器（节点）的集合，这些节点一起协同保存你的数据，并在所有节点之间为你提供索引和搜索功能。cluster具有唯一名称标识（默认是elasticsearch），你只需要指定集群标识名，启动的时候，凡是集群是这个名字的节点都会默认加到同一个集群中，选举master节点和节点管理都是自动完成的。当然一个节点也可以组成一个集群。</p><h3 id="2-2-Node（节点）"><a href="#2-2-Node（节点）" class="headerlink" title="2.2 Node（节点）"></a>2.2 Node（节点）</h3><p>node是参与到cluster的单个服务器节点，具有唯一标识名，可加入到指定的cluster中。 单个es实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p><h3 id="2-3-Index（索引）"><a href="#2-3-Index（索引）" class="headerlink" title="2.3 Index（索引）"></a>2.3 Index（索引）</h3><p>Index是一类文档的集合。例如，你可以为用户数据创建一个索引，为商品数据创建另一个索引，为订单数据创建另一个索引。es 数据管理的顶层单位就叫做 Index（索引），相当于传统数据库中的数据库。每个 Index （即数据库）的名字必须是小写。</p><p>es数据的索引、搜索和分析都是基于索引完成的。每个Index包含多个shard，默认是5个，分散在不同的node上。当索引创建完成的时候，主分片的数量就固定了，但是复制分片的数量可以随时调整。</p><p>在单个cluster中，你可以创建任意个Index。</p><p>下面的命令可以查看当前节点的所有 Index。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X GET 'http://localhost:9200/_cat/indices?v' -d ''health status index  pri rep docs.count docs.deleted store.size pri.store.sizeyellow open   orders   5   1          0            0       650b           650b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-Type（类型）"><a href="#2-4-Type（类型）" class="headerlink" title="2.4 Type（类型）"></a>2.4 Type（类型）</h3><p>Type是 Index 中数据的 ，在索引中，你可以定义一个或多个类型。它是索引中虚拟逻辑的分组，用来过滤    Document ，相当于传统数据库的表。</p><p>不同的 Type 应该有相似的结构（schema），举例来说，<code>id</code>字段不能在这个 Type 是字符串，在另 Type 是数值。这是与关系型数据库的表的一个<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.3/mapping.html">区别</a>。</p><p>举例来说，在一个商城系统中，你可以定义一个订单的 type（orders_order），可以定义一个商品的 type（orders_product），还可以定义一个日志的 type（orders_log）。</p><p>下面的命令可以列出每个 Index 所包含的 Type。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl 'http://localhost:9200/_mapping?pretty=true'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-Document（文档）"><a href="#2-5-Document（文档）" class="headerlink" title="2.5 Document（文档）"></a>2.5 Document（文档）</h3><p>Document是es数据可被索引化的基本的存储单元，需要存储在Type中，相当于传统数据库的行记录。</p><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">{  "name": "张三",  "title": "工程师",  "desc": "数据库管理"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-Shard（分片）"><a href="#2-6-Shard（分片）" class="headerlink" title="2.6 Shard（分片）"></a>2.6 Shard（分片）</h3><p>一个索引可能会存储大量的数据，进而会让单个节点超出硬件能承受范围。举例来说，存储了10亿文档的单个节点，会占用1TB磁盘空间，并且会导致查询的时候速度很慢。</p><p>为了解决这个问题，Elasticsearch 提供了分片，也就是将index细分为多个碎片的功能。当你创建index的时候，你可以简单地指定你想要的分片数量。每一个分片具有和 index 完全相同的功能。</p><p>碎片最主要的两个作用是：</p><ul><li>它允许你水平地切割你的容量体积</li><li>它允许你并行地分发作业，提高系统的性能</li></ul><p>默认在创建索引时会创建5个分片，这个数量可以修改。分片的数量只能在创建索引的时候指定，不能在后期修改。</p><h3 id="2-7-Replicas（副本）"><a href="#2-7-Replicas（副本）" class="headerlink" title="2.7 Replicas（副本）"></a>2.7 Replicas（副本）</h3><p>因为各种原因，所以数据丢失等问题会时有发生，碎片也可能会丢失，为了防止这个问题，所以你可以将一个或多个索引碎片复制到所谓的复制碎片，简称为副本。</p><p>副本最主要的两个作用是：</p><ul><li>它提供了高可用性，以防碎片/节点失败。基于这点，所以副本的永远不要和原始碎片分布在同一个节点上</li><li>它可以扩展系统的吞吐量，因为搜索可以在所有副本上执行</li></ul><p>默认情况下，Elasticsearch为每个索引分配了5个主碎片和1个副本，这意味着在你的集群中，如果至少有两个节点，那么每个索引将有5个主碎片和5个复制碎片，每个索引总共10个碎片。</p><p>将Elasticsearch和传统关系型数据库Mysql做一下类比：</p><table><thead><tr><th>MySQL</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>Database（数据库）</td><td>Index（索引）</td></tr><tr><td>Table（表）</td><td>Type（类型）</td></tr><tr><td>Row（行）</td><td>Document（文档）</td></tr><tr><td>Column（列）</td><td>Field（字段）</td></tr><tr><td>Schema（方案）</td><td>Mapping（映射）</td></tr><tr><td>Index（索引）</td><td>Everything Indexed by default（默认情况下所有字段都被索引）</td></tr><tr><td>SQL（结构化查询语言）</td><td>Query DSL（查询专用语言）</td></tr></tbody></table><h2 id="3-Elasticsearch-安装和配置"><a href="#3-Elasticsearch-安装和配置" class="headerlink" title="3. Elasticsearch 安装和配置"></a>3. Elasticsearch 安装和配置</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>Elasticsearch 至少需要 Java 7  环境。如果你的机器还没安装 Java，可以参考<a href="https://www.liquidweb.com/kb/install-java-8-on-centos-7/">这篇文章</a>。</p><p>安装完 Java，就可以跟着<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/_installation.html#_installation">官方文档</a>安装 Elasticsearch。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># cd /usr/local/software/# curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.3.tar.gz# # tar -zxvf elasticsearch-5.5.3.tar.gz  -C /usr/local/# # cd /usr/local/elasticsearch-5.5.3/# ./bin/elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果这时报错”Exception in thread “main” java.lang.RuntimeException: don’t run elasticsearch as root.”，表示不能以超级用户root启动es，我们新建一个用户：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># useradd es# passwd es# chown -R es:es /usr/local/elasticsearch-5.5.3/# su - es$ /usr/local/elasticsearch-5.5.3/bin/elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果这时报错“max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]”，这表示文件描述符太少了，我们需要设置文件描述数量：</p><p>查看<code>es</code>用户硬限制：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ ulimit -Hn4096<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开<code>/etc/security/limits.conf</code>增加一行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">es  - nofile  65536<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退出<code>es</code>用户，再重新看硬限制：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ ulimit -Hn65536<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果一切正常，es 就会在默认的9200端口运行。开启另一个终端查看es进程和端口：</p><pre class="line-numbers language-none"><code class="language-none"># ps -ef | grep elastices        1753  1726  8 18:14 pts/1    00:00:02 /bin/java -Xms2g -Xmx2g -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+AlwaysPreTouch -server -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -Djdk.io.permissionsUseCanonicalPath=true -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Dlog4j.skipJansi=true -XX:+HeapDumpOnOutOfMemoryError -Des.path.home=/usr/local/elasticsearch-5.5.3 -cp /usr/local/elasticsearch-5.5.3/lib/* org.elasticsearch.bootstrap.Elasticsearchroot      1793  1596  0 18:14 pts/0    00:00:00 grep --color=auto elastic# netstat -tlunp | grep 9200tcp6       0      0 127.0.0.1:9200          :::*                    LISTEN      1753/java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到es已经正常启动，除了查看es进程和端口外，我们还可以执行：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># curl 'http://localhost:9200'{  "name" : "Onl1EgV",  "cluster_name" : "elasticsearch",  "cluster_uuid" : "P3CrVh_BTO-1EVzJlyWXKg",  "version" : {    "number" : "5.5.3",    "build_hash" : "9305a5e",    "build_date" : "2017-09-07T15:56:59.599Z",    "build_snapshot" : false,    "lucene_version" : "6.6.0"  },  "tagline" : "You Know, for Search"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，请求9200端口，es 返回一个 JSON 对象，包含当前节点、集群、版本等信息。</p><p>以上es的运行方式可以通过<code>CTRL+C</code>或关闭窗口来停止运行，平时我们可以通过守护进程的方式在后台启动es：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ ./bin/elasticsearch -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是后台启动后想要停止es，可以通过<code>ps -ef | grep elastic</code>找到es进程PID，然后<code>kill</code>掉就行</p><h3 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h3><p>认情况下，es 只允许本机访问，如果需要远程访问，可以修改 es 安装目录的<em>ES_HOME/config/elasticsearch.yml</em>文件，去掉<strong>network.host</strong>的注释，将它的值改成<code>0.0.0.0</code>，然后重新启动 es。</p><p>如果远程还不能访问可能需要检查下<strong>防火墙</strong>和<strong>SELinux</strong>的设置。</p><p>其它配置项的解释可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/settings.html">官方页面</a></p><h2 id="4-Elasticsearch-插件"><a href="#4-Elasticsearch-插件" class="headerlink" title="4. Elasticsearch 插件"></a>4. Elasticsearch 插件</h2><h3 id="4-1-IK-中文分词插件"><a href="#4-1-IK-中文分词插件" class="headerlink" title="4.1 IK 中文分词插件"></a>4.1 IK 中文分词插件</h3><p>es 内置的分词器对中文不友好，会把中文分成单个字来进行全文检索，不能达到想要的结果，ik 可以进行友好的分词及自定义分词。</p><p>内置的分词器对中文会一个一个拆分，如下面是内置分词器的效果：</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">$ curl -H 'Content-Type: application/json'  -X GET 'localhost:9200/_analyze?pretty' -d '&gt; {&gt; "analyzer": "default",&gt; "text":"今天天气真好"&gt; }&gt; '{  "tokens" : [    {      "token" : "今",      "start_offset" : 0,      "end_offset" : 1,      "type" : "&lt;IDEOGRAPHIC&gt;",      "position" : 0    },    {      "token" : "天",      "start_offset" : 1,      "end_offset" : 2,      "type" : "&lt;IDEOGRAPHIC&gt;",      "position" : 1    },    {      "token" : "天",      "start_offset" : 2,      "end_offset" : 3,      "type" : "&lt;IDEOGRAPHIC&gt;",      "position" : 2    },    {      "token" : "气",      "start_offset" : 3,      "end_offset" : 4,      "type" : "&lt;IDEOGRAPHIC&gt;",      "position" : 3    },    {      "token" : "真",      "start_offset" : 4,      "end_offset" : 5,      "type" : "&lt;IDEOGRAPHIC&gt;",      "position" : 4    },    {      "token" : "好",      "start_offset" : 5,      "end_offset" : 6,      "type" : "&lt;IDEOGRAPHIC&gt;",      "position" : 5    }  ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，安装中文分词插件。这里使用的是<a href="https://github.com/medcl/elasticsearch-analysis-ik/">ik</a></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">[es@localhost elasticsearch-5.5.3]$ ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.5.3/elasticsearch-analysis-ik-5.5.3.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着，重新启动 Elastic，就会自动加载这个新安装的插件。</p><p>IK支持两种分词模式：</p><ul><li>ik_max_word: 会将文本做最细粒度的拆分，会穷尽各种可能的组合</li><li>ik_smart: 会做最粗粒度的拆分</li></ul><p>接下来，我们看看 IK 分词效果和自带的有什么不同。</p><p>先试一下<code>ik_smart</code>的效果：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> curl -H 'Content-Type: application/json'  -X GET 'localhost:9200/_analyze?pretty' -d '&gt; {&gt; "analyzer": "ik_smart",&gt; "text":"今天天气真好"&gt; }&gt; '{  "tokens" : [    {      "token" : "今天天气",      "start_offset" : 0,      "end_offset" : 4,      "type" : "CN_WORD",      "position" : 0    },    {      "token" : "真好",      "start_offset" : 4,      "end_offset" : 6,      "type" : "CN_WORD",      "position" : 1    }  ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再试一下<code>ik_max_word</code>的效果：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">{  "tokens" : [    {      "token" : "今天天气",      "start_offset" : 0,      "end_offset" : 4,      "type" : "CN_WORD",      "position" : 0    },    {      "token" : "今天",      "start_offset" : 0,      "end_offset" : 2,      "type" : "CN_WORD",      "position" : 1    },    {      "token" : "天天",      "start_offset" : 1,      "end_offset" : 3,      "type" : "CN_WORD",      "position" : 2    },    {      "token" : "天气",      "start_offset" : 2,      "end_offset" : 4,      "type" : "CN_WORD",      "position" : 3    },    {      "token" : "真好",      "start_offset" : 4,      "end_offset" : 6,      "type" : "CN_WORD",      "position" : 4    }  ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置mapping默认分词器：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">curl -X PUT 'localhost:9200/userdoors' -d '{  "mappings": {    "person": {      "properties": {        "name": {          "type": "text",          "analyzer": "ik_max_word",          "search_analyzer": "ik_max_word"        },        "title": {          "type": "text",          "analyzer": "ik_max_word",          "search_analyzer": "ik_max_word"        },        "desc": {          "type": "text",          "analyzer": "ik_max_word",          "search_analyzer": "ik_max_word"        }      }    }  }}'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面代码中，首先新建一个名称为<code>userdoor</code>的Index，里面有一个名称为<code>person</code>的 Type。person有三个字段<code>name</code>、<code>title</code>、<code>desc</code>。</p><p><strong>注意：</strong> 这里设置<code>search_analyzer</code>与<code>analyzer</code> 相同是为了确保搜索时和索引时使用相同的分词器，以确保查询中的术语与反向索引中的术语具有相同的格式。如果不设置<code>search_analyzer</code>，则 <code>search_analyzer</code> 与 <code>analyzer</code> 相同。详细请查阅官网<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-analyzer.html">搜索分析器</a></p><h3 id="4-2-head-插件"><a href="#4-2-head-插件" class="headerlink" title="4.2 head 插件"></a>4.2 head 插件</h3><h2 id="5-Elasticsearch-REST-APIs-的使用"><a href="#5-Elasticsearch-REST-APIs-的使用" class="headerlink" title="5. Elasticsearch REST APIs 的使用"></a>5. Elasticsearch REST APIs 的使用</h2><h3 id="5-1-Indices-APIs（索引API）"><a href="#5-1-Indices-APIs（索引API）" class="headerlink" title="5.1 Indices APIs（索引API）"></a>5.1 Indices APIs（索引API）</h3><p>索引API用于对索引进行各种管理，如：创建索引、删除索引、获取索引等，还包括，索引设置，别名管理，映射管理，状态管理等。</p><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>新建 Index，可以直接向 es 服务器发出 PUT 请求。下面的例子是新建一个名叫orders的 Index。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X PUT 'http://localhost:9200/orders' -d ''{"acknowledged":true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>服务器返回一个 JSON 对象，里面的<code>acknowledged</code>字段表示操作成功。</p><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p>我们发出 DELETE 请求，删除这个 Index。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X DELETE 'http://localhost:9200/orders'{"acknowledged":true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-2-Document-APIs（文档API）"><a href="#5-2-Document-APIs（文档API）" class="headerlink" title="5.2 Document APIs（文档API）"></a>5.2 Document APIs（文档API）</h3><h4 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h4><p>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录。比如，向<code>/userdoor/person</code>发送请求，就可以新增一条人员记录。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X PUT 'localhost:9200/userdoor/person/1?pretty=true' -d '&gt; {&gt;   "name": "张三",&gt;   "title": "工程师",&gt;   "desc": "数据库管理"&gt; }'{  "_index" : "userdoor",  "_type" : "person",  "_id" : "1",  "_version" : 4,  "result" : "created",  "_shards" : {    "total" : 2,    "successful" : 1,    "failed" : 0  },  "created" : true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后的1是该条记录的 <code>Id</code>。它不一定是数字，任意字符串（比如abc）都可以。<strong>URL</strong> 的参数<code>pretty=true</code>表示以易读的格式返回。</p><p>新增记录的时候，也可以不指定 <code>Id</code>，让<code>es</code>自动生成唯一的<code>Id</code>这时要改成 <strong>POST</strong> 请求。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X POST 'localhost:9200/userdoor/person?pretty' -d '&gt; {&gt;   "name": "李四",&gt;   "title": "工程师",&gt;   "desc": "运维管理"&gt; }'{  "_index" : "userdoor",  "_type" : "person",  "_id" : "AW8ETT-SDmqcpvuz_i-w",  "_version" : 1,  "result" : "created",  "_shards" : {    "total" : 2,    "successful" : 1,    "failed" : 0  },  "created" : true}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果没有先创建 Index（这个例子是userdoor），直接执行上面的命令，es 也不会报错，而是直接生成指定的 Index。</p><h4 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h4><p>向/Index/Type/Id发出 GET 请求，就可以查看这条记录。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X GET 'localhost:9200/userdoor/person/1?pretty=true'{  "_index" : "userdoor",  "_type" : "person",  "_id" : "1",  "_version" : 4,  "found" : true,  "_source" : {    "name" : "张三",    "title" : "工程师",    "desc" : "数据库管理"  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p>更新记录就是使用 PUT 请求，重新发送一次数据。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X PUT 'localhost:9200/userdoor/person/1?pretty' -d '&gt; {&gt;   "name": "张三",&gt;   "title": "工程师",&gt;   "desc": "数据库管理，软件开发"&gt; }'{  "_index" : "userdoor",  "_type" : "person",  "_id" : "1",  "_version" : 5,  "result" : "updated",  "_shards" : {    "total" : 2,    "successful" : 1,    "failed" : 0  },  "created" : false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl -X DELETE 'localhost:9200/userdoor/person/1?pretty' -d ''<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-Search-APIs（搜索API）"><a href="#5-3-Search-APIs（搜索API）" class="headerlink" title="5.3 Search APIs（搜索API）"></a>5.3 Search APIs（搜索API）</h3><h4 id="查询所有文档"><a href="#查询所有文档" class="headerlink" title="查询所有文档"></a>查询所有文档</h4><p>使用 GET 方法，直接请求/Index/Type/_search，就会返回所有记录。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl 'localhost:9200/userdoor/person/_search?pretty'{  "took" : 185,  "timed_out" : false,  "_shards" : {    "total" : 5,    "successful" : 5,    "failed" : 0  },  "hits" : {    "total" : 2,    "max_score" : 1.0,    "hits" : [      {        "_index" : "userdoor",        "_type" : "person",        "_id" : "AW8ETT-SDmqcpvuz_i-w",        "_score" : 1.0,        "_source" : {          "name" : "李四",          "title" : "工程师",          "desc" : "运维管理"        }      },      {        "_index" : "userdoor",        "_type" : "person",        "_id" : "1",        "_score" : 1.0,        "_source" : {          "name" : "张三",          "title" : "工程师",          "desc" : "数据库管理，软件开发"        }      }    ]  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，返回结果的 <code>took</code>字段表示该操作的耗时（单位为毫秒），<code>timed_out</code>字段表示是否超时，<code>hits</code>字段表示命中的记录，里面子字段的含义如下。</p><ul><li>total：返回记录数，本例是2条。</li><li>max_score：最高的匹配程度，本例是1.0。</li><li>hits：返回的记录组成的数组。</li></ul><p>返回的记录中，每条记录都有一个<code>_score</code>字段，表示匹配的程序，默认是按照这个字段降序排列。</p><h3 id="5-4-Query-DSL"><a href="#5-4-Query-DSL" class="headerlink" title="5.4 Query DSL"></a>5.4 Query DSL</h3><p>Elastic 的查询非常特别，使用自己的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl.html">查询语法</a>，要求 GET 请求带有数据体。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ curl 'localhost:9200/userdoor/person/_search?pretty'  -d '&gt; {&gt;   "query" : { "match" : { "desc" : "软件" }}&gt; }'{  "took" : 27,  "timed_out" : false,  "_shards" : {    "total" : 5,    "successful" : 5,    "failed" : 0  },  "hits" : {    "total" : 1,    "max_score" : 0.28582606,    "hits" : [      {        "_index" : "userdoor",        "_type" : "person",        "_id" : "1",        "_score" : 0.28582606,        "_source" : {          "name" : "张三",          "title" : "工程师",          "desc" : "数据库管理，软件开发"        }      }    ]  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码使用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-match-query.html">Match 查询</a> ，指定的匹配条件是<code>desc</code>字段里面包含”软件”这个词</p><h2 id="6-参考资料"><a href="#6-参考资料" class="headerlink" title="6. 参考资料"></a>6. 参考资料</h2><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">Elasticsearch 官方手册</a></li><li><a href="https://github.com/mobz/elasticsearch-head">elasticsearch-head</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用openssl自建CA和颁发多域名通配符证书</title>
      <link href="/2021/06/29/shi-yong-openssl-zi-jian-ca-he-ban-fa-duo-yu-ming-tong-pei-fu-zheng-shu/"/>
      <url>/2021/06/29/shi-yong-openssl-zi-jian-ca-he-ban-fa-duo-yu-ming-tong-pei-fu-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="使用openssl自建CA和颁发多域名通配符证书"><a href="#使用openssl自建CA和颁发多域名通配符证书" class="headerlink" title="使用openssl自建CA和颁发多域名通配符证书"></a>使用openssl自建CA和颁发多域名通配符证书</h1><hr><h2 id="常见的证书分类"><a href="#常见的证书分类" class="headerlink" title="常见的证书分类"></a>常见的证书分类</h2><ol><li><p>单域名ssl证书</p><p> 只保护一个域名，例如如果想要保护<a href="http://www.test.com,a.demo.com,b.example.com;每个域名分别需要一个证书./">www.test.com，a.demo.com，b.example.com；每个域名分别需要一个证书。</a></p></li><li><p>多域名ssl证书</p><p> 可以同时保护多个域名，例如同时保护<a href="http://www.test.com,a.demo.com,b.example.com等,但每一个品牌的多域名证书保护的域名数量不一样./">www.test.com，a.demo.com，b.example.com等，但每一个品牌的多域名证书保护的域名数量不一样。</a></p></li><li><p>通配符ssl证书</p><p> <strong>可以保护主域名本身及下一级的所有子域名，但不支持无限级子域名。</strong>例如*.test.com证书可以保护a.test.com，b.test.com，c.test.com但无法保护x.y.test.com。</p></li><li><p>多域名通配符ssl证书</p><p> 可以保护多个域名以及每个域名的所有二级域名，相当于将多个通配符证书合并为一个证书，例如一个多域名通配符证书可以保护test.com和demo.com，同时也能保护test.com及demo.com的所有二级域名。</p></li></ol><h2 id="制作多域名通配符ssl证书"><a href="#制作多域名通配符ssl证书" class="headerlink" title="制作多域名通配符ssl证书"></a>制作多域名通配符ssl证书</h2><h3 id="1-CA服务器配置"><a href="#1-CA服务器配置" class="headerlink" title="1. CA服务器配置"></a>1. CA服务器配置</h3><p>1.1. 在CA目录下创建两个初始文件：</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ~]# cd /etc/pki/CA/[root@localhost CA]# touch index.txt serial[root@localhost CA]# echo 01 &gt; serial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>1.2.  生成CA证书的RSA私钥</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost CA]# openssl genrsa -out private/ca.key 2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-out private/ca.key</code>是私钥存放的目录和文件名，2048指密钥长度</li><li>这里注意，公钥是按某种格式从私钥中提取出来的、公钥和私钥是成对的、生成私钥也就有了公钥</li></ul><p>1.3. 通过私钥提取公钥(这不是必要的步骤)</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost CA]# openssl rsa -in private/ca.key -pubout -out private/pub.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.4. 利用CA的RSA密钥生成CA证书请求并对CA证书请求进行自签名，得到CA证书(X.509结构)</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">openssl req -new -sha256 -x509 -days 3650 -key private/ca.key -out cacert.crt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>签发机构名示例如下</li></ul><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:ShangHaiLocality Name (eg, city) [Default City]:ShangHaiOrganization Name (eg, company) [Default Company Ltd]:GuanaitongOrganizational Unit Name (eg, section) []:PHPCommon Name (eg, your name or your server's hostname) []:Test Root CAEmail Address []:quan.zhang@guanaitong.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>可以使用<code>-subj</code>在非交互式下来代替请求字段信息</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">openssl req -new \            -sha256 \            -x509 \            -days 3650 \            -key private/ca.key \            -subj "/C=CN/ST=ShangHai/L=ShangHai/O=Guanaitong/OU=PHP/CN=Test Root CA/emailAddress=quan.zhang@guanaitong.com" \            -out cacert.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>cacert.crt</code>就是得到的CA证书</p></li></ul><hr><h3 id="2-Web服务器配置-以nginx为例"><a href="#2-Web服务器配置-以nginx为例" class="headerlink" title="2. Web服务器配置(以nginx为例)"></a>2. Web服务器配置(以nginx为例)</h3><p>2.1 建立存放服务器私钥和证书的目录</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost CA]# cd /usr/local/nginx/conf/[root@localhost conf]# mkdir ssl &amp;&amp; cd ssl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.2 生成服务器证书用的RSA私钥</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ssl]# openssl genrsa -out nginx.key 2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.3 利用生成好的私钥生成服务器证书签名请求文件</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ssl]# openssl req -new -sha256 -key nginx.key -out nginx.csr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>签名请求内容示例如下：</li></ul><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:ShangHaiLocality Name (eg, city) [Default City]:ShangHaiOrganization Name (eg, company) [Default Company Ltd]:GuanaitongOrganizational Unit Name (eg, section) []:PHPCommon Name (eg, your name or your server's hostname) []:Test InternalEmail Address []:Please enter the following 'extra' attributesto be sent with your certificate requestA challenge password []:An optional company name []:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以使用<code>-subj</code>在非交互式下来代替请求字段信息<pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">openssl req -new \            -sha256 \            -key nginx.key \            -subj "/C=CN/ST=ShangHai/L=ShangHai/O=Guanaitong/OU=PHP/CN=Test Internal" \            -out nginx.csr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>2.4 使用CA根证书对“服务器证书签名请求文件”进行签名，生成带SAN扩展证书</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">openssl x509 -req -sha256 \             -in nginx.csr \             -CA /etc/pki/CA/cacert.crt \             -CAkey /etc/pki/CA/private/ca.key \             -CAcreateserial \             -days 3650 \             -extfile v3.ext \             -out nginx.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>-extfile：指定当前创建的证书的扩展文件<br>-extensions section：指定当前创建的证书使用配置文件中的哪个section作为扩展属性。</p></blockquote><ul><li>v3.ext内容示例如下</li></ul><pre class="line-numbers language-none"><code class="language-none">subjectAltName = @alt_names[alt_names]DNS.1 = www.testvm.devDNS.2 = *.demo.dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这里使用<code>openssl</code>的<code>SubjectAlternativeName(SAN)</code>实现一个CA证书对多个通配符域名进行签名保护。</p></li><li><p>ssl目录内容</p></li></ul><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">ssl├── nginx.crt   #服务器证书├── nginx.csr   #证书签名请求文件├── nginx.key   #服务器私钥└── v3.ext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看CSR和CRT文件细节<pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ssl]# openssl req -noout -text -in nginx.csr[root@localhost ssl]# openssl x509 -noout -text -in nginx.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="3-nginx配置ssl加密"><a href="#3-nginx配置ssl加密" class="headerlink" title="3. nginx配置ssl加密"></a>3. nginx配置ssl加密</h3><p>3.1 默认nginx是没有安装ssl模块的，需要编译安装nginx时加入<code>--with-http_ssl_module</code>选项</p><p>3.2 nginx配置文件的server指令添加如下配置</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">server { listen       80; listen       443 ssl; server_name www.testvm.dev; ssl_certificate   /usr/local/nginx/conf/ssl/nginx.crt; ssl_certificate_key /usr/local/nginx/conf/ssl/nginx.key; root   /data1/www/test; index  index.php index.html index.htm; location ~ \.php$ {     fastcgi_pass   127.0.0.1:9000;     fastcgi_index  index.php;     fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;     include        fastcgi_params;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.3 重新加载nginx配置</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost ssl]# /usr/local/nginx/sbin/nginx -t[root@localhost ssl]# /usr/local/nginx/sbin/nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-浏览器导入自己制做的CA证书"><a href="#4-浏览器导入自己制做的CA证书" class="headerlink" title="4. 浏览器导入自己制做的CA证书"></a>4. 浏览器导入自己制做的CA证书</h3><h3 id="5-为linux系统添加根证书"><a href="#5-为linux系统添加根证书" class="headerlink" title="5. 为linux系统添加根证书"></a>5. 为linux系统添加根证书</h3><ul><li>我们来看下这种情况假设<code>/data1/www/test/index.php</code>文件内容如下：</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'success'</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost test]# curl https://www.testvm.dev/index.phpcurl: (60) Peer certificate cannot be authenticated with known CA certificatesMore details here: http://curl.haxx.se/docs/sslcerts.htmlcurl performs SSL certificate verification by default, using a "bundle" of Certificate Authority (CA) public keys (CA certs). If the default bundle file isn't adequate, you can specify an alternate file using the --cacert option.If this HTTPS server uses a certificate signed by a CA represented in the bundle, the certificate verification probably failed due to a problem with the certificate (it might be expired, or the name might not match the domain name in the URL).If you'd like to turn off curl's verification of the certificate, use the -k (or --insecure) option.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost test]# curl https://www.baidu.com&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;&lt;meta content=always name=referrer&gt;&lt;link rel=stylesheet type=text/css href=https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css&gt;&lt;title&gt;百度一下，你就知道&lt;/title&gt; (剩余内容省略)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>当我们访问我们自己站点时（<code>curl https://www.testvm.dev</code>）提示我们curl在linux的证书信任集里没有找到根证书，你可以使用<code>curl --insecure</code>来不验证证书的可靠性，这只能保证数据是加密传输的但无法保证对方是我们要访问的服务。使用<code>curl --cacert cacert.pem</code>可以手动指定根证书路径。为什么访问百度的<code>https</code>站点时就能正确返回内容？</p><ul><li>因为为百度站点签署的CA证书已经内置在操作系统中了，curl 访问https站点时会自动去获取操作系统内置的证书，而我们自已签名的CA证书没有导入到操作系统中，所以会获取不到内容。</li></ul></li></ul><ul><li>把自己制作的CA证书导入到操作系统中</li></ul><blockquote><p>Ubuntu, Debian系列</p></blockquote><p>0.内置的证书集在这个文件里<code>/etc/ssl/certs/ca-certificates.crt</code></p><p>1.将自己制作的CA证书复制到<code>/usr/local/share/ca-certificates/</code>目录下</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost test]# cp /etc/pki/CA/cacert.crt  /usr/local/share/ca-certificates/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.更新操作系统CA证书库</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost test]# update-ca-certificates<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.更多的命令行参数及说明， 请查看: <code>man update-ca-certificates</code></p><blockquote><p>Centos系列</p></blockquote><p>0.内置的证书集在这个文件里<code>/etc/pki/tls/cert.pem</code></p><p>1.安装根证书管理包软件</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost test]# yum install ca-certificates<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.打开根证书动态配置开关</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost test]# update-ca-trust force-enable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.将自己制作的CA证书复制到<code>/etc/pki/ca-trust/source/anchors/</code>目录下</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost test]# cp /etc/pki/CA/cacert.crt /etc/pki/ca-trust/source/anchors/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.更新操作系统CA证书库</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost test]# update-ca-trust extract<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.更多的命令行参数及说明， 请查看: <code>man update-ca-trust</code></p><ul><li>最后验证下是否成功<pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">[root@localhost logs]# curl https://www.testvm.dev/index.phpsuccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="一点扩展知识"><a href="#一点扩展知识" class="headerlink" title="一点扩展知识"></a>一点扩展知识</h3><ul><li><p>我们在使用PHP开发程序时会使用到<code>file_get_contents</code>函数、<code>curl</code>库来获取https站点数据时，如果需要对证书做信任，那么就可以把自己制作的CA证书导入到操作系统中，然后就不需要手动指定证书参数或者修改 php.ini <code> openssl.cafile或openssl.capath</code>选项，就能很爽的直接<code>file_get_contents('https://www.testvm.dev/index.php')</code>来使用了。</p></li><li><p>注意导入证书后那些在导入证书前就已经运行的服务需要将相应服务重启后才能使用系统新的证书，例如重启<code>php-fpm</code></p></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>如果是自己做的CA，浏览器要导入CA证书(导入CA证书，意味着将信任这个CA签署的所有证书)。而商业的ssl证书颁发机构如VeriSign、Wosign、StartSSL签发的证书，浏览器已经内置并信任了这些根证书。</li><li>如果对于一般的应用，管理员只需生成“证书请求”（后缀大多为.csr），它包含你的服务器名称(域名)和公钥，然后把这份请求交给诸如verisign等有CA服务公司，你的证书请求经验证后，CA用它的私钥签名，形成正式的证书发还给你。管理员再在web server上导入这个证书就行了。</li></ul><h2 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h2><ul><li>Chrome 58及以上版本要使用OpenSSL创建带有SAN(subjectAlternativeName，主题备用名称)的证书，不然chrome会报 <strong>NET::ERR_CERT_COMMON_NAME_INVALID</strong></li><li>生成证书时要使用<strong>sha256</strong>加密不然chrome会报弱的签名</li><li>注意浏览器缓存，<strong>cookie</strong></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a></li><li><a href="http://apetec.com/support/generatesan-csr.htm">http://apetec.com/support/generatesan-csr.htm</a></li><li><a href="http://liaoph.com/openssl-san/">http://liaoph.com/openssl-san/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程的守护神-daemontools</title>
      <link href="/2021/06/29/jin-cheng-de-shou-hu-shen-daemontools/"/>
      <url>/2021/06/29/jin-cheng-de-shou-hu-shen-daemontools/</url>
      
        <content type="html"><![CDATA[<h1 id="进程的守护神-daemontools"><a href="#进程的守护神-daemontools" class="headerlink" title="进程的守护神 - daemontools"></a>进程的守护神 - daemontools</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在日常的开发中可能需要写一些<code>常驻内存的程序</code>，<code>常驻内存的程序</code>和<code>守护进程</code>程序是不一样的，<code>守护进程</code>的实现步骤稍微麻烦点，感兴趣的读者可以参考我用<code>C</code>实现的一个守护进程<a href="https://github.com/dendi875/APUE/blob/master/Chapter-13-Daemon%20Processes/daemonize.c">daemonize.c</a>，我们重点关注下<code>常驻内存的程序</code>，<br>以<code>PHP</code>为例来说<code>常驻内存的程序</code>实现一般是这样的：</p><p>首先使用<code>while (1) {}</code>结构使程序无限循环，并且在程序内部对各种可能出现的异常进行捕捉处理，目的是防止程序意外退出。</p><p>hello.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// dostuff();</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hello, %d\n"</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// exception handling</span>    <span class="token punctuation">}</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，通过命令行把它放到后台执行，例如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ nohup php hello.php &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但这种实现方式是有一定的缺陷的，那就是当<code>PHP</code>执行过程中遇到错误的时候，就会退出程序，不官你程序中使用多少层<code>while (1) {}</code>，也不管你使用<code>try...catch</code>多少<code>Exception</code>，你还是阻止不了程序的意外退出（比如程序产生奇怪的<code>coredump</code>或者<code>kill</code>时手误杀错了程序）。如果这个常驻内存的程序是一个队列消费者程序，那么这种缺陷是很致命的，因为在流量高峰时如果程序一旦意外退出没有即时恢复，那么将导致队列中的消息一直堆积无法被消费掉，从而影响正常业务流程。再严重点，如果队列没有最大内存限制的策略，那么消息的堆积将会导致内存使用暴涨从而拖垮机器。怎么办？你可以用<code>crontab</code>脚本每分钟监视你的程序，看到没有在执行就启动起来。当然，还有更好的办法就是使用成熟的进程管理工具，它会监控你的程序，一旦发现进程退出了，立刻启动起来。<code>Linux</code>下对常驻内存的进程的管理通常使用<code>Daemontools</code>和<code>Supervisor</code> 这两个工具。今天我们就来研究学习下<code>Daemontools</code></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>daemontools</code>是用于管理<code>UNIX</code>服务的工具的集合，它分为三类工具：</p><ul><li>常驻进程管理工具</li></ul><p><a href="http://cr.yp.to/daemontools/svscanboot.html">The svscanboot program</a></p><p><a href="http://cr.yp.to/daemontools/svscan.html">The svscan program</a></p><p><a href="http://cr.yp.to/daemontools/supervise.html">The supervise program</a></p><p><a href="http://cr.yp.to/daemontools/svc.html">The svc program</a></p><p><a href="http://cr.yp.to/daemontools/svok.html">The svok program</a></p><p><a href="http://cr.yp.to/daemontools/svstat.html">The svstat program</a></p><p><a href="http://cr.yp.to/daemontools/fghack.html">The fghack program</a></p><p><a href="http://cr.yp.to/daemontools/pgrphack.html">The pgrphack program</a></p><ul><li>日志管理工具</li></ul><p><a href="http://cr.yp.to/daemontools/readproctitle.html">The readproctitle program</a></p><p><a href="http://cr.yp.to/daemontools/multilog.html">The multilog program</a></p><p><a href="http://cr.yp.to/daemontools/tai64n.html">The tai64n program</a></p><p><a href="http://cr.yp.to/daemontools/tai64nlocal.html">The tai64nlocal program</a></p><ul><li>环境管理工具</li></ul><p><a href="http://cr.yp.to/daemontools/setuidgid.html">The setuidgid program</a></p><p><a href="http://cr.yp.to/daemontools/envuidgid.html">The envuidgid program</a></p><p><a href="http://cr.yp.to/daemontools/envdir.html">The envdir program</a></p><p><a href="http://cr.yp.to/daemontools/softlimit.html">The softlimit program</a></p><p><a href="http://cr.yp.to/daemontools/setlock.html">The setlock program</a></p><p>我们重点关注对常驻进程管理工具的使用，日志管理工具和环境管理工具主要是辅助进程管理做一些额外的功能，进程管理工具主要是通过<code>svscanboot</code>、<code>svscan</code>、<code>supervise</code>、<code>svc</code>、<code>svok</code>、<code>svstat</code>命令来管理常驻进程的</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ cd /usr/local/software/$ wget http://cr.yp.to/daemontools/daemontools-0.76.tar.gz$ tar -zxvf daemontools-0.76.tar.gz -C /usr/local/$ cd /usr/local/admin/daemontools-0.76/$ package/install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在<code>Linux</code>下安装出现如下错误：　</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">/usr/bin/ld: errno: TLS definition in /lib/libc.so.6 section .tbss mismatches non-TLS reference in envdir.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修复很简单将<em>admin/daemontools-0.76/src/error.h</em>中的<code>extern int errno;</code>替换为<code>include &lt;errno.h&gt;</code>之后再重新执行<code>package/install</code></p><p>安装完成之后，会创建<code>/service</code>和<code>/command</code>两个目录</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">/command/├── envdir -&gt; /usr/local/admin/daemontools/command/envdir├── envuidgid -&gt; /usr/local/admin/daemontools/command/envuidgid├── fghack -&gt; /usr/local/admin/daemontools/command/fghack├── multilog -&gt; /usr/local/admin/daemontools/command/multilog├── pgrphack -&gt; /usr/local/admin/daemontools/command/pgrphack├── readproctitle -&gt; /usr/local/admin/daemontools/command/readproctitle├── setlock -&gt; /usr/local/admin/daemontools/command/setlock├── setuidgid -&gt; /usr/local/admin/daemontools/command/setuidgid├── softlimit -&gt; /usr/local/admin/daemontools/command/softlimit├── supervise -&gt; /usr/local/admin/daemontools/command/supervise├── svc -&gt; /usr/local/admin/daemontools/command/svc├── svok -&gt; /usr/local/admin/daemontools/command/svok├── svscan -&gt; /usr/local/admin/daemontools/command/svscan├── svscanboot -&gt; /usr/local/admin/daemontools/command/svscanboot├── svstat -&gt; /usr/local/admin/daemontools/command/svstat├── tai64n -&gt; /usr/local/admin/daemontools/command/tai64n└── tai64nlocal -&gt; /usr/local/admin/daemontools/command/tai64nlocal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动daemontools"><a href="#启动daemontools" class="headerlink" title="启动daemontools"></a>启动daemontools</h3><p>启动<code>svscanboot</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># /command/svscanboot &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以设置开机启动，具体参考：</p><p><a href="http://cr.yp.to/daemontools/start.html">How to start daemontools</a></p><p>启动之后，查看进程，可以发现<code>svscan</code>做为<code>svscanboot</code>的子进程在运行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># ps -ef | grep svroot      7547  5172  0 20:44 pts/0    00:00:00 /bin/sh /command/svscanbootroot      7549  7547  0 20:44 pts/0    00:00:00 svscan /service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="制作并测试你的脚本"><a href="#制作并测试你的脚本" class="headerlink" title="制作并测试你的脚本"></a>制作并测试你的脚本</h3><p>这步的主要目的就是在尝试把程序变为常驻内存进程之前，先确保它可以作为前台程序正常工作。如果脚本有误在前台都不能正常运行，那变为常驻程序后观察结果肯定是达不到预期的。比如我们制作了一个下面这样的<code>PHP</code>脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">cat /data1/www/test/php/process/hello.php#!/usr/bin/env php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hello, %d\n"</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建-daemontools-Service"><a href="#构建-daemontools-Service" class="headerlink" title="构建 daemontools Service"></a>构建 daemontools Service</h3><p>我们把所有的服务统一放到<code>/scratch/service</code>（临时服务）目录下，服务的名称是任意的，比如我们称为<strong>hello</strong></p><p>创建 <code>/scratch/service</code> 目录</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># mkdir -p /scratch/service# cd /scratch/service/# mkdir hello# cd hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>run</code>文件，其中包含：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!/bin/shexec 2&gt;&amp;1exec su - root -c "php /data1/www/test/php/process/hello.php" 1&gt;&gt; /data1/www/test/php/process/hello.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>赋予执行权限</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># chmod u+x run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装<strong>hello</strong>服务并实际开始运行它</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># ln -s /scratch/service/hello/ /service/hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong> 上面的命令执行后正常情况下服务就已经开始运行了</p><p>打开另一个终端，验证程序是否正在运行</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ tail -f /data1/www/test/php/process/hello.loghello, 67hello, 68hello, 69hello, 70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>tail</code>命令未产生输出，请执行<code>svc -u hello</code>，虽然前面的命令如<code>/command/svscanboot &amp;</code>已经打开了服务，以防万一由于某种原因关闭了服务，而这本不应该被关闭。</p><pre class="line-numbers language-none"><code class="language-none"># pstree -a -p 7547svscanboot,7547 /command/svscanboot  ├─readproctitle,7550 service errors:...  └─svscan,7549 /service      └─supervise,7578 hello          └─su,7579 - root -c php\040/data1/www/test/php/process/hello.php              └─php,7580 /data1/www/test/php/process/hello.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用<code>pstree</code>命令查看进程树，可以看到<code>supervise</code>作为<code>svscan</code>的子进程在运行，<code>su</code>作为<code>supervise</code>的子进程在运行，最终执行的<code>php /data1/www/test/php/process/hello.php</code>又作为<code>su</code>的子进程在运行。</p><h3 id="操作和监视你的服务"><a href="#操作和监视你的服务" class="headerlink" title="操作和监视你的服务"></a>操作和监视你的服务</h3><ul><li>操作服务</li></ul><p>你可以使用<code>svc</code>命令来操作你的服务，可以使用<code>svstat</code>命令来监视你的服务。</p><p><code>svc</code>命令通过向守护进程发送信号来对其进行操作。该命令以<code>root</code>身份在<code>/service</code>目录中执行。例如：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># svc -d hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令意思是关闭（<code>down</code>）或停止守护程序。下表是<code>svc</code>参数，它们的含义和信号的表：</p><table><thead><tr><th>Arg</th><th>Action</th><th>Signal</th></tr></thead><tbody><tr><td>-u</td><td>Start (up)</td><td>-</td></tr><tr><td>-d</td><td>Stop (down)</td><td>TERM, then CONT</td></tr><tr><td>-t</td><td>Restart if running</td><td>TERM</td></tr></tbody></table><p>有关该命令的其它参数，请参见： <a href="http://cr.yp.to/daemontools/svc.html">http://cr.yp.to/daemontools/svc.html</a></p><ul><li>监控服务</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># svstat hellohello: up (pid 7917) 5 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>svstat</code>可以告诉我们以下信息</p><ol><li>服务目录的名称（hello）</li><li>当前状态（up or down）</li><li>进程<code>PID</code></li><li>处于当前状态的秒数</li></ol><h2 id="Daemontools-架构模型"><a href="#Daemontools-架构模型" class="headerlink" title="Daemontools 架构模型"></a>Daemontools 架构模型</h2><p><img src="https://cdn.jsdelivr.net/gh/dendi875/images/PicGo/daemontools.png" alt="daemontools"></p><p>上图的“Connector A: Service”实际上是服务的<code>run</code>脚本，或者是任何二进制可执行文件，<code>shell</code>脚本或<code>PHP/Python/Perl/Ruby/ Lua</code>脚本，它们都是通过<code>exec</code>命令为其分配了一个<code>PID</code>的运行脚本。</p><p>通过上图可以知道<code>daemontools</code>的工作方式，计算机首先初始化，然后系统引导运行<code>/command/svscanboot</code>，接着<code>/command/svscanboot</code>依次引导运行<code>/command/readproctitle</code>和<code>/command/svscan</code>。<code>/command/readproctitle </code>只是一个可以运行的调试工具。</p><p><code>svscan /service </code>是daemontools的一个最重要的机制，每五秒钟它会扫描<code>/service</code>目录（假设<code>/ service</code>是传递给<code>svscan</code>的命令行参数）以查找符号链接目录，并运行该符号连接目录中的<code>run</code>命令（如果尚未运行）</p><p><code>svscan</code>程序会永远一直循环，每次循环做两件事：</p><p>1）扫描<code>/service</code>查找所有符号链接目录</p><p>2）对于查找到的每个符号链接目录，如果该目录还未运行<code>supervise</code>程序，则在该目录上运行<code>supervise</code>程序</p><p><code>supervise</code>程序它基于我们监控的服务目录（如/service/hello）中的 supervise 目录树中的内容来运行和停止运行<code>run</code>脚本</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">tree /service/hello/supervise//service/hello/supervise/├── control├── lock├── ok└── status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本故障排查"><a href="#基本故障排查" class="headerlink" title="基本故障排查"></a>基本故障排查</h2><p>对daemontools问题进行故障排除的第一步就是找出正在运行的东西和没有运行的东西，可以参照架构模型将范围一步步缩小。</p><p>下面几个<code>ps</code>命令，用于查看正在运行的和未运行的进程：</p><ul><li><p><code>ps -ef | grep sv</code>，查看<code>svscanboot</code>和<code>svscan</code>是否正常在运行</p></li><li><p><code># ps -ef | grep supervise</code>，查看<code>supervise </code>是否在正常运行</p></li><li><p><code>ps ax | grep myprogram</code>，查看你<code>run</code>命令中执行的程序是否在运行，例如，在前面的救命中，它是 <code>hello.php</code></p></li></ul><h2 id="正确的卸载服务"><a href="#正确的卸载服务" class="headerlink" title="正确的卸载服务"></a>正确的卸载服务</h2><p>卸载服务指的不仅仅是停止它，而是停止使用服务。正确的执行步骤如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># cd /service/hello/# rm -rf /service/hello# svc -dx .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong> 是首先<code>cd</code>到服务目录下，再使用<strong>绝对路径</strong>删除软链接，最后在执行<code>svc -dx .</code></p><p>验证是否卸载成功：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># ps -ef | grep hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一种终极大招来卸载服务，那就是关闭服务并杀死正在运行所有的守护进程和其子进程。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="http://cr.yp.to/daemontools.html">Daemontools</a></p></li><li><p><a href="http://cr.yp.to/daemontools/faq/create.html">FAQ of daemontools</a></p></li><li><p><a href="http://www.troubleshooters.com/linux/djbdns/daemontools_intro.htm">daemontools_intro</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 四种事务隔离级别说明</title>
      <link href="/2021/06/29/mysql-si-chong-shi-wu-ge-chi-ji-bie-shuo-ming/"/>
      <url>/2021/06/29/mysql-si-chong-shi-wu-ge-chi-ji-bie-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-四种事务隔离级别说明"><a href="#MySQL-四种事务隔离级别说明" class="headerlink" title="MySQL 四种事务隔离级别说明"></a>MySQL 四种事务隔离级别说明</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 <code>MySQL</code> 中，为了保证并发读取数据的正确性，提出了四种事务隔离级别，下面我们就说明如何设置隔离级别，以及用示例来说明每种隔离级别的使用情况</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><p>你可以在 <code>MySQL</code> 配置文件 <code>my.cnf</code> 的 <code>[mysqld]</code>节中设置如下选项来为所有连接设置默认的隔离级别</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[mysqld]transaction-isolation = {READ-UNCOMMITTED | READ-COMMITTED | REPEATABLE-READ | SERIALIZABLE}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果未设置此选项，则 <code>InnoDB</code>默认是可重复读（<code>REPEATABLE-READ</code>）。</p><p>你也可以用 <code>set session</code>语句来改变单个会话或所有新进来连接的隔离级别。</p><p>语法如下：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">set [session | global] transaction isolation level {read uncommitted | read committed | repeatable read | serializable}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果使用 <code>global</code> 关键字，则表示在全局（多个 session中）对从那点开始创建的所有连接设置默认事务级别</li><li>如果使用 <code>session</code>关键字，则表示为将来在当前连接上执行的所有事务设置默认事务级别</li><li>不带<code>global</code>和<code>session</code>是为下一个（未开始）事务设置隔离级别</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">set session transaction isolation level read uncommitted;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令表示：为接下来在当前会话连接上执行的所有事务设置读未提交隔离级别</p><p>注意：使用<code>set</code> 命令来设置隔离级别的方式在 <code>MySQL</code> 重启后会恢复到配置文件中设置的隔离级别</p><h3 id="查询隔离级别"><a href="#查询隔离级别" class="headerlink" title="查询隔离级别"></a>查询隔离级别</h3><ul><li>查询全局的隔离级别</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">select @@global.tx_isolation;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询一个会话的隔离级别</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">select @@session.tx_isolation;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询一个事务的隔离级别</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">select @@tx_isolation;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四种隔离级别的示例"><a href="#四种隔离级别的示例" class="headerlink" title="四种隔离级别的示例"></a>四种隔离级别的示例</h3><ol><li>各隔离级别会再现的问题</li></ol><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>读已提交</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>可串行化</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><ul><li>读未提交：该隔离级别下可能会出现 <strong>脏读</strong>，也就是可能会读取到其它会话中修改了但还未提交的数据</li><li>读已提交：该隔离级别解决了脏读问题，但可能会出现<strong>不可重复读</strong></li><li>可重复读： 该隔离级别解决了不可重复读问题，但可能会出现<strong>幻读</strong></li><li>可串行化：该隔离级别解决了幻读问题，它是完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞</li></ul><ol start="2"><li>示例来说明每种隔离级别的使用情况</li></ol><p>准备一张测试表，插入一些测试数据，然后开启两个<code>MySQL</code>终端，在此命令为<code>session1</code>和<code>session2</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">CREATE TABLE `goods` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,  `name` varchar(45) NOT NULL DEFAULT '' COMMENT '商品名称',  `stock` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '库存',  PRIMARY KEY (`id`),  UNIQUE KEY `uk_name` (`name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商品';insert into `goods` (`name`, `stock`) values ('p1', '1000'),('p2', '1000'),('p3', '1000'),('p4', '1000'),('p5', '1000'),('p6', '1000'),('p7', '1000'),('p8', '1000'),('p9', '1000');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</p><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">// 关闭自动提交，设置隔离级别为读未提交mysql&gt; set autocommit=0;mysql&gt; set session transaction isolation level read uncommitted;// 确认mysql&gt; show variables like '%autocommit%';+---------------+-------+| Variable_name | Value |+---------------+-------+| autocommit    | OFF   |+---------------+-------+mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| READ-UNCOMMITTED       |+------------------------+// 开启事务，查询 id = 1 的记录mysql&gt; start transaction;mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 |+----+------+-------+1 row in set (0.01 sec)mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 |+----+------+-------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>session2：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; set autocommit=0;mysql&gt; set session transaction isolation level read uncommitted;// 确认// 开启事务，把 id = 1记录的库存更新至 1mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 |+----+------+-------+1 row in set (0.00 sec)mysql&gt; update goods set stock=1 where id=1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; select * from goods where id=1; +----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |     1 |+----+------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong> 这时 session1 读取到了 session2 未提交的内容，如果 session2 回滚刚才更新的数据，session1 读取到的数据就是错误的</p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>事务一一直读，事务二修改数据并提交，有可能就会出现事务一内两次读取到的数据不一样</p><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">// 取消自动提交，并设置隔离级别为读已提交mysql&gt; set autocommit=0;mysql&gt; set session transaction isolation level read committed;// 确认mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| READ-COMMITTED         |+------------------------+// 开启事务，查询 id=1 的记录mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 |+----+------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>session2：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">// 取消自动提交，并设置隔离级别为读已提交mysql&gt; set autocommit=0;mysql&gt; set session transaction isolation level read committed;// 确认mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| READ-COMMITTED         |+------------------------+mysql&gt; start transaction;mysql&gt; select * from goods where id=1;mysql&gt; update goods set stock=1 where id=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时返回到 session1</p><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 |+----+------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以观察到在读已提交的隔离级别下，session1 没出现<strong>脏读</strong>。</p><p>继续返回到 session2 执行手动提交</p><p>session2：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; commit;Query OK, 0 rows affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再返回到 session1 查看 id = 1的记录</p><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |     1 |+----+------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong> 在 session2 提交后，session1 连接两次读取到的数据不一致了，这就是<strong>读已提交隔离级别可能会出现不可重复读的情况</strong></p><p>在演示幻读之前，我们先演示下<strong>可重复读</strong></p><h4 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h4><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; set autocommit=0;mysql&gt; set session transaction isolation level repeatable read;mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| REPEATABLE-READ        |+------------------------+mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 |+----+------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>session2：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; set autocommit=0;mysql&gt; set session transaction isolation level repeatable read;mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| REPEATABLE-READ        |+------------------------+mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 |+----+------+-------+1 row in set (0.00 sec)mysql&gt; update goods set stock=1 where id=1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt;  commit;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再返回到 session1 查询 id=1 的记录</p><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; select * from goods where id=1;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 |+----+------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以观察到<strong>在可重复读隔离级别下</strong>，session1 连续多次读取的数据是一致的，也就是它是可重复读的</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>两个事务彼此隔离，互相并不知道对方操作了什么，当第一个事务插入了一条数据并提交后，因为隔离级别是可重复读，在第二个事务里并不知道第一个事务已经插入了数据，所以第二个事务查询出来的数据还是没插入之前的，这时第二个事务再次插入数据时就可能会报数据已存在，以为自己出现了幻觉</p><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; set autocommit=0;mysql&gt; set session transaction isolation level repeatable read;// 开启事务，插入数据并提交mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from goods;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |     1 ||  2 | p2   |  1000 ||  3 | p3   |  1000 ||  4 | p4   |  1000 ||  5 | p5   |  1000 ||  6 | p6   |  1000 ||  7 | p7   |  1000 ||  8 | p8   |  1000 ||  9 | p9   |  1000 |+----+------+-------+9 rows in set (0.00 sec)mysql&gt; insert into goods(`name`,`stock`) values('p10', 1000);      Query OK, 1 row affected (0.00 sec)mysql&gt; commit;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换到 session2 </p><p>session2：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; set autocommit=0;mysql&gt; set session transaction isolation level repeatable read;// 开启事务，查询后再插入mysql&gt; start transaction;mysql&gt; select * from goods;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |     1 ||  2 | p2   |  1000 ||  3 | p3   |  1000 ||  4 | p4   |  1000 ||  5 | p5   |  1000 ||  6 | p6   |  1000 ||  7 | p7   |  1000 ||  8 | p8   |  1000 ||  9 | p9   |  1000 |+----+------+-------+9 rows in set (0.00 sec)mysql&gt; insert into goods(`name`, `stock`) values('p10', 1000);     ERROR 1062 (23000): Duplicate entry 'p10' for key 'uk_name'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SERIALIZABLE（可串行化）"><a href="#SERIALIZABLE（可串行化）" class="headerlink" title="SERIALIZABLE（可串行化）"></a>SERIALIZABLE（可串行化）</h4><p>在该隔离级别下事务都是串行顺序执行的，<code>MySQL</code> 数据库的 <code>InnoDB</code> 引擎会给读操作隐式加一把读共享锁，从而避免了脏读、不可重读复读和幻读问题。</p><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; set autocommit=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set session transaction isolation level serializable;Query OK, 0 rows affected (0.00 sec)mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| SERIALIZABLE           |+------------------------+1 row in set (0.00 sec)// 开启一个事务，插入一条数据但不提交mysql&gt; start transaction;Query OK, 0 rows affected (0.00 sec)mysql&gt; insert into goods(`name`, `stock`) values('p10', 1000); Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换到 session2 ，开启一个事务然后查询数据</p><p>session2：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; set autocommit=0;Query OK, 0 rows affected (0.00 sec)mysql&gt; set session transaction isolation level serializable;Query OK, 0 rows affected (0.00 sec)mysql&gt; select @@session.tx_isolation;+------------------------+| @@session.tx_isolation |+------------------------+| SERIALIZABLE           |+------------------------+1 row in set (0.00 sec)mysql&gt; select * from goods; // 些时会一直卡住<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>立马切换到 session1，提交事务</p><p>session1：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; commit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再切换到 session2</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; select * from goods;+----+------+-------+| id | name | stock |+----+------+-------+|  1 | p1   |  1000 ||  2 | p2   |  1000 ||  3 | p3   |  1000 ||  4 | p4   |  1000 ||  5 | p5   |  1000 ||  6 | p6   |  1000 ||  7 | p7   |  1000 ||  8 | p8   |  1000 ||  9 | p9   |  1000 || 10 | p10  |  1000 |+----+------+-------+10 rows in set (1.12 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>session2 也有可能获取锁超时</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">mysql&gt; select * from goods;ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：</strong>　一旦事务提交，session2 会立马返回插入的记录，否则会一直卡住，直到超时，其中超时参数是由 <code>innodb_lock_wait_timeout</code> 控制。由于每条 <code>select</code>语句都会加锁，所以该隔离级别的数据库并发能力最弱</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>四个级别逐渐增强，每个级别解决一个问题。事务级别越高，性能越差。<code>InnoDB</code>默认级别是可重复读。 </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
