<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一代键客</title>
  
  <subtitle>路漫漫其修远兮，吾将上下而求索</subtitle>
  <link href="https://www.zhangquan.me/atom.xml" rel="self"/>
  
  <link href="https://www.zhangquan.me/"/>
  <updated>2023-06-30T07:25:49.406Z</updated>
  <id>https://www.zhangquan.me/</id>
  
  <author>
    <name>张权</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发编程—CountDownLatch和CyclicBarrier：如何让多线程步调一致？</title>
    <link href="https://www.zhangquan.me/2023/06/30/java-bing-fa-bian-cheng-countdownlatch-he-cyclicbarrier-ru-he-rang-duo-xian-cheng-bu-diao-yi-zhi/"/>
    <id>https://www.zhangquan.me/2023/06/30/java-bing-fa-bian-cheng-countdownlatch-he-cyclicbarrier-ru-he-rang-duo-xian-cheng-bu-diao-yi-zhi/</id>
    <published>2023-06-30T07:25:09.000Z</published>
    <updated>2023-06-30T07:25:49.406Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;前几天老板突然匆匆忙忙过来，说对账系统最近越来越慢了，能不能快速优化一下。我了解了对账系统的业务后，发现还是挺简单的，用户通过在线商城下单，会生成电子订单，保存在订单库；之后物流会生成派送单给用户发货，派送单保存在派送单库。为了防止漏派送或者重复派送，对账系统每天还会校验是</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—StampedLock：有没有比读写锁更快的锁？</title>
    <link href="https://www.zhangquan.me/2023/06/30/java-bing-fa-bian-cheng-stampedlock-you-mei-you-bi-du-xie-suo-geng-kuai-de-suo/"/>
    <id>https://www.zhangquan.me/2023/06/30/java-bing-fa-bian-cheng-stampedlock-you-mei-you-bi-du-xie-suo-geng-kuai-de-suo/</id>
    <published>2023-06-30T07:15:53.000Z</published>
    <updated>2023-06-30T07:25:51.612Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—ReadWriteLock：如何快速实现一个完备的缓存？</title>
    <link href="https://www.zhangquan.me/2023/06/30/java-bing-fa-bian-cheng-readwritelock-ru-he-kuai-su-shi-xian-yi-ge-wan-bei-de-huan-cun/"/>
    <id>https://www.zhangquan.me/2023/06/30/java-bing-fa-bian-cheng-readwritelock-ru-he-kuai-su-shi-xian-yi-ge-wan-bei-de-huan-cun/</id>
    <published>2023-06-30T07:01:15.000Z</published>
    <updated>2023-06-30T07:02:01.547Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;前面我们介绍了&lt;a href=&quot;https://zhangquan.me/2023/06/15/java-bing-fa-bian-cheng-guan-cheng-bing-fa-bian-cheng-de-wan-neng-yao-chi/&quot;&gt;管程&lt;/a&gt;和&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Semaphore：如何快速实现一个限流器？</title>
    <link href="https://www.zhangquan.me/2023/06/29/java-bing-fa-bian-cheng-semaphore-ru-he-kuai-su-shi-xian-yi-ge-xian-liu-qi/"/>
    <id>https://www.zhangquan.me/2023/06/29/java-bing-fa-bian-cheng-semaphore-ru-he-kuai-su-shi-xian-yi-ge-xian-liu-qi/</id>
    <published>2023-06-29T02:27:46.000Z</published>
    <updated>2023-06-30T06:47:15.239Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Semaphore，现在普遍翻译为“信号量”，以前也曾被翻译成“信号灯”，因为类似现实生活里的红绿灯，车辆能不能通行，要看是不是绿灯。同样，在编程世界里，线程能不能执行，也要看信号量是不是允许。&lt;/p&gt;
&lt;p&gt;信号量是由大名鼎鼎的计算机科学家迪杰斯特拉（Dijkstra）于</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Lock和Condition（下）：Dubbo如何用管程实现异步转同步？</title>
    <link href="https://www.zhangquan.me/2023/06/27/java-bing-fa-bian-cheng-lock-he-condition-xia-dubbo-ru-he-yong-guan-cheng-shi-xian-yi-bu-zhuan-tong-bu/"/>
    <id>https://www.zhangquan.me/2023/06/27/java-bing-fa-bian-cheng-lock-he-condition-xia-dubbo-ru-he-yong-guan-cheng-shi-xian-yi-bu-zhuan-tong-bu/</id>
    <published>2023-06-27T12:27:06.000Z</published>
    <updated>2023-06-30T06:41:05.583Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Lock和Condition（上）：隐藏在并发包中的管程</title>
    <link href="https://www.zhangquan.me/2023/06/27/java-bing-fa-bian-cheng-lock-he-condition-shang-yin-cang-zai-bing-fa-bao-zhong-de-guan-cheng/"/>
    <id>https://www.zhangquan.me/2023/06/27/java-bing-fa-bian-cheng-lock-he-condition-shang-yin-cang-zai-bing-fa-bao-zhong-de-guan-cheng/</id>
    <published>2023-06-27T01:35:15.000Z</published>
    <updated>2023-06-30T06:41:07.935Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Java SDK 并发包内容很丰富，包罗万象，但是我觉得最核心的还是其对管程的实现。因为理论上利用管程，你几乎可以实现并发包里所有的工具类。在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—理论基础总结</title>
    <link href="https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-li-lun-ji-chu-zong-jie/"/>
    <id>https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-li-lun-ji-chu-zong-jie/</id>
    <published>2023-06-16T09:18:22.000Z</published>
    <updated>2023-06-16T11:09:24.511Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;到这里，专栏的第一模块——并发编程的理论基础，我们已经讲解完了，总共 12 篇，不算少，但“跳出来，看全景”你会发现这 12</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—如何用面向对象思想写好并发程序？</title>
    <link href="https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-ru-he-yong-mian-xiang-dui-xiang-si-xiang-xie-hao-bing-fa-cheng-xu/"/>
    <id>https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-ru-he-yong-mian-xiang-dui-xiang-si-xiang-xie-hao-bing-fa-cheng-xu/</id>
    <published>2023-06-16T07:42:26.000Z</published>
    <updated>2023-06-16T07:42:56.697Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;面向对象思想与并发编程有关系吗？本来是没关系的，它们分属两个不同的领域，但是在 Java 语言里，这两个领域被无情地融合在一起了，好在融合的效果还是不错的：&lt;strong&gt;在 Java</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Java线程（下）：为什么局部变量是线程安全的？</title>
    <link href="https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-java-xian-cheng-xia-wei-shi-me-ju-bu-bian-liang-shi-xian-cheng-an-quan-de/"/>
    <id>https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-java-xian-cheng-xia-wei-shi-me-ju-bu-bian-liang-shi-xian-cheng-an-quan-de/</id>
    <published>2023-06-16T04:01:42.000Z</published>
    <updated>2023-06-16T04:02:20.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我们一遍一遍重复再重复地讲到，多个线程同时访问共享变量的时候，会导致并发问题。那在 Java 语言里，是不是所有变量都是共享变量呢？工作中我发现不少同学会给方法里面的局部变量设置同步，显然这些同学并没有把共享变量搞清楚。那 Java</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Java线程（中）：创建多少线程才是合适的？</title>
    <link href="https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-java-xian-cheng-zhong-chuang-jian-duo-shao-xian-cheng-cai-shi-he-gua-de/"/>
    <id>https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-java-xian-cheng-zhong-chuang-jian-duo-shao-xian-cheng-cai-shi-he-gua-de/</id>
    <published>2023-06-16T03:57:49.000Z</published>
    <updated>2023-06-16T03:58:22.566Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Java 领域，实现并发程序的主要手段就是多线程，使用多线程还是比较简单的，但是使用多少个线程却是个困难的问题。工作中，经常有人问，“各种线程池的线程数量调整成多少是合适的？”或者“Tomcat 的线程数、Jdbc</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Java线程（上）：Java线程的生命周期</title>
    <link href="https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-java-xian-cheng-shang-java-xian-cheng-de-sheng-ming-zhou-qi/"/>
    <id>https://www.zhangquan.me/2023/06/16/java-bing-fa-bian-cheng-java-xian-cheng-shang-java-xian-cheng-de-sheng-ming-zhou-qi/</id>
    <published>2023-06-16T03:54:04.000Z</published>
    <updated>2023-06-30T06:36:34.642Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Java 领域，实现并发程序的主要手段就是多线程。线程是操作系统里的一个概念，虽然各种不同的开发语言如 Java、C# 等都对其进行了封装，但是万变不离操作系统。Java</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—管程：并发编程的万能钥匙</title>
    <link href="https://www.zhangquan.me/2023/06/15/java-bing-fa-bian-cheng-guan-cheng-bing-fa-bian-cheng-de-wan-neng-yao-chi/"/>
    <id>https://www.zhangquan.me/2023/06/15/java-bing-fa-bian-cheng-guan-cheng-bing-fa-bian-cheng-de-wan-neng-yao-chi/</id>
    <published>2023-06-15T10:51:41.000Z</published>
    <updated>2023-06-15T10:52:19.955Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;并发编程这个技术领域已经发展了半个世纪了，相关的理论和技术纷繁复杂。那有没有一种核心技术可以很方便地解决我们的并发问题呢？这个问题如果让我选择，我一定会选择&lt;strong&gt;管程&lt;/strong&gt;技术。Java 语言在 1.5 之前，提供的唯一的并发原语就是管程，而且</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—安全性、活跃性以及性能问题</title>
    <link href="https://www.zhangquan.me/2023/06/15/java-bing-fa-bian-cheng-an-quan-xing-huo-yue-xing-yi-ji-xing-neng-wen-ti/"/>
    <id>https://www.zhangquan.me/2023/06/15/java-bing-fa-bian-cheng-an-quan-xing-huo-yue-xing-yi-ji-xing-neng-wen-ti/</id>
    <published>2023-06-15T09:23:10.000Z</published>
    <updated>2023-06-30T06:26:48.628Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;并发编程中我们需要注意的问题有很多，主要有三个方面，分别是：&lt;strong&gt;安全性问题、活跃性问题和性能问题&lt;/strong&gt;。下面我就来一一介绍这些问题。&lt;/p&gt;
&lt;h2 id=&quot;安全性问题&quot;&gt;&lt;a href=&quot;#安全性问题&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—用“等待-通知”机制优化循环等待</title>
    <link href="https://www.zhangquan.me/2023/06/14/java-bing-fa-bian-cheng-yong-deng-dai-tong-zhi-ji-zhi-you-hua-xun-huan-deng-dai/"/>
    <id>https://www.zhangquan.me/2023/06/14/java-bing-fa-bian-cheng-yong-deng-dai-tong-zhi-ji-zhi-you-hua-xun-huan-deng-dai/</id>
    <published>2023-06-14T05:24:33.000Z</published>
    <updated>2023-06-14T05:43:09.692Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;由&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程— 一不小心就死锁了，怎么办？</title>
    <link href="https://www.zhangquan.me/2023/06/14/java-bing-fa-bian-cheng-yi-bu-xiao-xin-jiu-si-suo-liao-zen-me-ban/"/>
    <id>https://www.zhangquan.me/2023/06/14/java-bing-fa-bian-cheng-yi-bu-xiao-xin-jiu-si-suo-liao-zen-me-ban/</id>
    <published>2023-06-14T04:02:46.000Z</published>
    <updated>2023-06-30T06:15:08.516Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—互斥锁（下）：如何用一把锁保护多个资源？</title>
    <link href="https://www.zhangquan.me/2023/06/13/java-bing-fa-bian-cheng-hu-chi-suo-xia-ru-he-yong-yi-ba-suo-bao-hu-duo-ge-zi-yuan/"/>
    <id>https://www.zhangquan.me/2023/06/13/java-bing-fa-bian-cheng-hu-chi-suo-xia-ru-he-yong-yi-ba-suo-bao-hu-duo-ge-zi-yuan/</id>
    <published>2023-06-13T03:53:44.000Z</published>
    <updated>2023-06-14T01:52:46.754Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—互斥锁（上）：解决原子性问题</title>
    <link href="https://www.zhangquan.me/2023/06/13/java-bing-fa-bian-cheng-hu-chi-suo-shang-jie-jue-yuan-zi-xing-wen-ti/"/>
    <id>https://www.zhangquan.me/2023/06/13/java-bing-fa-bian-cheng-hu-chi-suo-shang-jie-jue-yuan-zi-xing-wen-ti/</id>
    <published>2023-06-13T03:47:58.000Z</published>
    <updated>2023-06-30T06:02:19.466Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;你已经知道，原子性问题的源头是&lt;strong&gt;线程切换&lt;/strong&gt;，如果能够禁用线程切换那不就能解决这个问题了吗？而操作系统做线程切换是依赖 CPU 中断的，所以禁止 CPU 发生中断就能够禁止线程切换。&lt;/p&gt;
&lt;p&gt;在早期单核 CPU</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Java内存模型：看Java如何解决可见性和有序性问题</title>
    <link href="https://www.zhangquan.me/2023/05/23/java-bing-fa-bian-cheng-java-nei-cun-mo-xing-kan-java-ru-he-jie-jue-ke-jian-xing-he-you-xu-xing-wen-ti/"/>
    <id>https://www.zhangquan.me/2023/05/23/java-bing-fa-bian-cheng-java-nei-cun-mo-xing-kan-java-ru-he-jie-jue-ke-jian-xing-he-you-xu-xing-wen-ti/</id>
    <published>2023-05-23T13:37:42.000Z</published>
    <updated>2023-06-30T05:59:13.338Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;上一期我们讲到在并发场景中，因可见性、原子性、有序性导致的问题常常会违背我们的直觉，从而成为并发编程的 Bug 之源。这三者在编程领域属于共性问题，所有的编程语言都会遇到，Java 在诞生之初就支持多线程，自然也有针对这三者的技术方案，而且在编程语言领域处于领先地位。理解</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—可见性、原子性和有序性问题：并发编程Bug的源头</title>
    <link href="https://www.zhangquan.me/2023/05/22/java-bing-fa-bian-cheng-ke-jian-xing-yuan-zi-xing-he-you-xu-xing-wen-ti-bing-fa-bian-cheng-bug-de-yuan-tou/"/>
    <id>https://www.zhangquan.me/2023/05/22/java-bing-fa-bian-cheng-ke-jian-xing-yuan-zi-xing-he-you-xu-xing-wen-ti-bing-fa-bian-cheng-bug-de-yuan-tou/</id>
    <published>2023-05-22T10:15:10.000Z</published>
    <updated>2023-05-22T11:50:02.156Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;并发程序幕后的故事&quot;&gt;&lt;a href=&quot;#并发程序幕后的故事&quot; class=&quot;headerlink&quot; title=&quot;并发程序幕后的故事&quot;&gt;&lt;/a&gt;并发程序幕后的故事&lt;/h2&gt;&lt;p&gt;这些年，我们的 CPU、内存、I/O</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—如何才能学好并发编程</title>
    <link href="https://www.zhangquan.me/2023/05/22/java-bing-fa-bian-cheng-ru-he-cai-neng-xue-hao-bing-fa-bian-cheng/"/>
    <id>https://www.zhangquan.me/2023/05/22/java-bing-fa-bian-cheng-ru-he-cai-neng-xue-hao-bing-fa-bian-cheng/</id>
    <published>2023-05-22T07:29:07.000Z</published>
    <updated>2023-06-30T06:54:09.204Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;并发编程并不是一门相对独立的学科，而是一个综合学科。并发编程相关的概念和技术看上非常零散，相关度也很低，总给你一种这样的感觉：我已经学习很多相关技术了，可还是搞不定并发编程。那如何才能学习好并发编程呢？&lt;/p&gt;
&lt;p&gt;其实很简单，只要你能从两个方面突破一下就可以了。一个是“</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
