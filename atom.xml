<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一代键客</title>
  
  <subtitle>几乎任何事情都是越做越简单，越想越困难，越拖着越想放弃。</subtitle>
  <link href="https://www.zhangquan.me/atom.xml" rel="self"/>
  
  <link href="https://www.zhangquan.me/"/>
  <updated>2023-12-29T09:27:47.879Z</updated>
  <id>https://www.zhangquan.me/</id>
  
  <author>
    <name>张权</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之美-原型模式：如何最快速地clone一个HashMap散列表？</title>
    <link href="https://www.zhangquan.me/2023/11/20/she-ji-mo-shi-zhi-mei-yuan-xing-mo-shi-ru-he-zui-kuai-su-di-clone-yi-ge-hashmap-san-lie-biao/"/>
    <id>https://www.zhangquan.me/2023/11/20/she-ji-mo-shi-zhi-mei-yuan-xing-mo-shi-ru-he-zui-kuai-su-di-clone-yi-ge-hashmap-san-lie-biao/</id>
    <published>2023-11-20T09:20:55.000Z</published>
    <updated>2023-12-29T09:27:47.879Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;对于熟悉 JavaScript 语言的前端程序员来说，原型模式是一种比较常用的开发模式。这是因为，有别于 Java、C++ 等基于类的面向对象编程语言，JavaScript 是一种基于原型的面向对象编程语言。即便 JavaScript</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-建造者模式：详解构造函数、set方法、建造者模式三种对象创建方式</title>
    <link href="https://www.zhangquan.me/2023/11/18/she-ji-mo-shi-zhi-mei-jian-zao-zhe-mo-shi-xiang-jie-gou-zao-han-shu-set-fang-fa-jian-zao-zhe-mo-shi-san-chong-dui-xiang-chuang-jian-fang-shi/"/>
    <id>https://www.zhangquan.me/2023/11/18/she-ji-mo-shi-zhi-mei-jian-zao-zhe-mo-shi-xiang-jie-gou-zao-han-shu-set-fang-fa-jian-zao-zhe-mo-shi-san-chong-dui-xiang-chuang-jian-fang-shi/</id>
    <published>2023-11-18T09:20:45.000Z</published>
    <updated>2023-12-29T09:27:07.378Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天，我们再来学习另外一个比较常用的创建型设计模式，&lt;strong&gt;Builder</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-工厂模式：我为什么说没事不要随便用工厂模式创建对象？</title>
    <link href="https://www.zhangquan.me/2023/11/07/she-ji-mo-shi-zhi-mei-gong-han-mo-shi-wo-wei-shi-me-shuo-mei-shi-bu-yao-sui-bian-yong-gong-han-mo-shi-chuang-jian-dui-xiang/"/>
    <id>https://www.zhangquan.me/2023/11/07/she-ji-mo-shi-zhi-mei-gong-han-mo-shi-wo-wei-shi-me-shuo-mei-shi-bu-yao-sui-bian-yong-gong-han-mo-shi-chuang-jian-dui-xiang/</id>
    <published>2023-11-07T09:20:36.000Z</published>
    <updated>2023-12-29T09:26:17.722Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GoF</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-单例模式（下）：如何设计实现一个集群环境下的分布式单例模式？</title>
    <link href="https://www.zhangquan.me/2023/11/05/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-xia-ru-he-she-ji-shi-xian-yi-ge-ji-qun-huan-jing-xia-de-fen-bu-shi-dan-li-mo-shi/"/>
    <id>https://www.zhangquan.me/2023/11/05/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-xia-ru-he-she-ji-shi-xian-yi-ge-ji-qun-huan-jing-xia-de-fen-bu-shi-dan-li-mo-shi/</id>
    <published>2023-11-05T09:20:26.000Z</published>
    <updated>2023-12-29T09:24:46.595Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;上两节课中，我们针对单例模式，讲解了单例的应用场景、几种常见的代码实现和存在的问题，并粗略给出了替换单例模式的方法，比如工厂模式、IOC</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-单例模式（中）：我为什么不推荐使用单例模式？又有何替代方案？</title>
    <link href="https://www.zhangquan.me/2023/11/01/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-zhong-wo-wei-shi-me-bu-tui-jian-shi-yong-dan-li-mo-shi-you-you-he-ti-dai-fang-an/"/>
    <id>https://www.zhangquan.me/2023/11/01/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-zhong-wo-wei-shi-me-bu-tui-jian-shi-yong-dan-li-mo-shi-you-you-he-ti-dai-fang-an/</id>
    <published>2023-11-01T09:20:17.000Z</published>
    <updated>2023-12-29T09:23:58.848Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;尽管单例是一个很常用的设计模式，在实际的开发中，我们也确实经常用到它，但是，有些人认为单例是一种反模式（anti-pattern），并不推荐使用。所以，今天，我就针对这个说法详细地讲讲这几个问题：单例这种设计模式存在哪些问题？为什么会被称为反模式？如果不用单例，该如何表示全</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-单例模式（上）：为什么说支持懒加载的双重检测不比饿汉式更优？</title>
    <link href="https://www.zhangquan.me/2023/10/24/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-shang-wei-shi-me-shuo-zhi-chi-lan-jia-zai-de-shuang-chong-jian-ce-bu-bi-e-han-shi-geng-you/"/>
    <id>https://www.zhangquan.me/2023/10/24/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-shang-wei-shi-me-shuo-zhi-chi-lan-jia-zai-de-shuang-chong-jian-ce-bu-bi-e-han-shi-geng-you/</id>
    <published>2023-10-24T09:20:08.000Z</published>
    <updated>2023-12-29T09:23:19.722Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我们知道，经典的设计模式有 23 种。其中，常用的并不是很多。据我的工作经验来看，常用的可能都不到一半。如果随便抓一个程序员，让他说一说最熟悉的 3</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？</title>
    <link href="https://www.zhangquan.me/2023/10/23/she-ji-mo-shi-zhi-mei-mian-xiang-dui-xiang-she-ji-yuan-ze-she-ji-mo-shi-bian-cheng-gui-fan-chong-gou-zhe-wu-zhe-you-he-guan-xi/"/>
    <id>https://www.zhangquan.me/2023/10/23/she-ji-mo-shi-zhi-mei-mian-xiang-dui-xiang-she-ji-yuan-ze-she-ji-mo-shi-bian-cheng-gui-fan-chong-gou-zhe-wu-zhe-you-he-guan-xi/</id>
    <published>2023-10-23T10:45:51.000Z</published>
    <updated>2023-12-29T09:28:09.928Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在上一节课中，我们讲到，要具备编写高质量代码的能力，你需要学习一些编程方法论，其中就包含面向对象（我们可以把它看成一种设计思想）、设计原则、设计模式、编程规范、 重构技巧等。而我们整个专栏的内容也是围绕着这几块展开讲解的。所以，今天我就先来简</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-如何评价代码质量的高低？</title>
    <link href="https://www.zhangquan.me/2023/10/22/she-ji-mo-shi-zhi-mei-ru-he-ping-jie-dai-ma-zhi-liang-de-gao-di/"/>
    <id>https://www.zhangquan.me/2023/10/22/she-ji-mo-shi-zhi-mei-ru-he-ping-jie-dai-ma-zhi-liang-de-gao-di/</id>
    <published>2023-10-22T10:07:00.000Z</published>
    <updated>2023-12-29T09:22:06.749Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在我的工作经历中，每当同事评论起项目代码质量的时候，听到的最多的评语就是：“代码 写得很烂”或者“代码写得很好”。用“好”“烂”这样的字眼来描述，非常地笼统。当我具体问到底如何烂、如何好的时候，尽管大部分同事都能简单地罗列上几个点，但往往都不</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>如何将一个已存在的目录转换为一个 Git 项目并托管到 GitHub 仓库</title>
    <link href="https://www.zhangquan.me/2023/09/25/ru-he-jiang-yi-ge-yi-cun-zai-de-mu-lu-zhuan-huan-wei-yi-ge-git-xiang-mu-bing-tuo-guan-dao-github-cang-ku/"/>
    <id>https://www.zhangquan.me/2023/09/25/ru-he-jiang-yi-ge-yi-cun-zai-de-mu-lu-zhuan-huan-wei-yi-ge-git-xiang-mu-bing-tuo-guan-dao-github-cang-ku/</id>
    <published>2023-09-25T02:59:48.000Z</published>
    <updated>2023-09-30T08:19:36.146Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;一、-打开命令行终端，进入项目所在的本地目录，将目录初始化为一个-Git-项目&quot;&gt;&lt;a href=&quot;#一、-打开命令行终端，进入项目所在的本地目录，将目录初始化为一个-Git-项目&quot; class=&quot;headerlink&quot; title=&quot;一、</summary>
        
      
    
    
    
    <category term="Git" scheme="https://www.zhangquan.me/categories/Git/"/>
    
    
    <category term="Git" scheme="https://www.zhangquan.me/tags/Git/"/>
    
    <category term="工具" scheme="https://www.zhangquan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的装饰器</title>
    <link href="https://www.zhangquan.me/2023/09/25/python-zhong-de-zhuang-shi-qi/"/>
    <id>https://www.zhangquan.me/2023/09/25/python-zhong-de-zhuang-shi-qi/</id>
    <published>2023-09-25T01:44:12.000Z</published>
    <updated>2023-09-25T01:45:16.232Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;引入装饰器之前，我们首先来看一下函数的几个核心概念。&lt;/p&gt;
&lt;h3 id=&quot;函数赋予变量&quot;&gt;&lt;a href=&quot;#函数赋予变量&quot;</summary>
        
      
    
    
    
    <category term="Python" scheme="https://www.zhangquan.me/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.zhangquan.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python里参数是如何传递的？</title>
    <link href="https://www.zhangquan.me/2023/09/13/python-li-can-shu-shi-ru-he-chuan-di-de/"/>
    <id>https://www.zhangquan.me/2023/09/13/python-li-can-shu-shi-ru-he-chuan-di-de/</id>
    <published>2023-09-13T05:36:46.000Z</published>
    <updated>2023-09-13T05:38:48.002Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;什么是值传递和引用传递&quot;&gt;&lt;a href=&quot;#什么是值传递和引用传递&quot; class=&quot;headerlink&quot; title=&quot;什么是值传递和引用传递&quot;&gt;&lt;/a&gt;&lt;strong&gt;什么是值传递和引用传递&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;如果你接触过其他的编程语言，比如</summary>
        
      
    
    
    
    <category term="Python" scheme="https://www.zhangquan.me/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.zhangquan.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—生产者-消费者模式：用流水线思想提高效率</title>
    <link href="https://www.zhangquan.me/2023/08/15/java-bing-fa-bian-cheng-sheng-chan-zhe-xiao-fei-zhe-mo-shi-yong-liu-shui-xian-si-xiang-ti-gao-xiao-lu/"/>
    <id>https://www.zhangquan.me/2023/08/15/java-bing-fa-bian-cheng-sheng-chan-zhe-xiao-fei-zhe-mo-shi-yong-liu-shui-xian-si-xiang-ti-gao-xiao-lu/</id>
    <published>2023-08-15T13:18:13.000Z</published>
    <updated>2023-08-15T13:19:01.649Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—两阶段终止模式：如何优雅地终止线程？</title>
    <link href="https://www.zhangquan.me/2023/08/11/java-bing-fa-bian-cheng-liang-jie-duan-zhong-zhi-mo-shi-ru-he-you-ya-di-zhong-zhi-xian-cheng/"/>
    <id>https://www.zhangquan.me/2023/08/11/java-bing-fa-bian-cheng-liang-jie-duan-zhong-zhi-mo-shi-ru-he-you-ya-di-zhong-zhi-xian-cheng/</id>
    <published>2023-08-11T12:53:28.000Z</published>
    <updated>2023-08-14T01:29:17.807Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Worker Thread模式：如何避免重复创建线程？</title>
    <link href="https://www.zhangquan.me/2023/08/06/java-bing-fa-bian-cheng-worker-thread-mo-shi-ru-he-bi-mian-chong-fu-chuang-jian-xian-cheng/"/>
    <id>https://www.zhangquan.me/2023/08/06/java-bing-fa-bian-cheng-worker-thread-mo-shi-ru-he-bi-mian-chong-fu-chuang-jian-xian-cheng/</id>
    <published>2023-08-06T11:42:01.000Z</published>
    <updated>2023-08-23T06:06:11.984Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Thread-Per-Message模式：最简单实用的分工方法</title>
    <link href="https://www.zhangquan.me/2023/08/03/java-bing-fa-bian-cheng-thread-per-message-mo-shi-zui-jian-dan-shi-yong-de-fen-gong-fang-fa/"/>
    <id>https://www.zhangquan.me/2023/08/03/java-bing-fa-bian-cheng-thread-per-message-mo-shi-zui-jian-dan-shi-yong-de-fen-gong-fang-fa/</id>
    <published>2023-08-03T10:07:13.000Z</published>
    <updated>2023-08-23T06:07:21.734Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我们曾经把并发编程领域的问题总结为三个核心问题：分工、同步和互斥。其中，同步和互斥相关问题更多地源自微观，而分工问题则是源自宏观。我们解决问题，往往都是从宏观入手，在编程领域，软件的设计过程也是先从概要设计开始，而后才进行详细设计。同样，&lt;strong&gt;解决并发编程问题，首</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Balking模式：再谈线程安全的单例模式</title>
    <link href="https://www.zhangquan.me/2023/07/31/java-bing-fa-bian-cheng-balking-mo-shi-zai-tan-xian-cheng-an-quan-de-dan-li-mo-shi/"/>
    <id>https://www.zhangquan.me/2023/07/31/java-bing-fa-bian-cheng-balking-mo-shi-zai-tan-xian-cheng-an-quan-de-dan-li-mo-shi/</id>
    <published>2023-07-31T02:20:07.000Z</published>
    <updated>2023-07-31T02:21:03.903Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;上&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Guarded Suspension模式：等待唤醒机制的规范实现</title>
    <link href="https://www.zhangquan.me/2023/07/30/java-bing-fa-bian-cheng-guarded-suspension-mo-shi-deng-dai-huan-xing-ji-zhi-de-gui-fan-shi-xian/"/>
    <id>https://www.zhangquan.me/2023/07/30/java-bing-fa-bian-cheng-guarded-suspension-mo-shi-deng-dai-huan-xing-ji-zhi-de-gui-fan-shi-xian/</id>
    <published>2023-07-30T11:55:33.000Z</published>
    <updated>2023-07-31T02:20:43.833Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;前不久，同事小灰工作中遇到一个问题，他开发了一个 Web 项目：Web</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—线程本地存储模式：没有共享，就没有伤害</title>
    <link href="https://www.zhangquan.me/2023/07/26/java-bing-fa-bian-cheng-xian-cheng-ben-di-cun-chu-mo-shi-mei-you-gong-xiang-jiu-mei-you-shang-hai/"/>
    <id>https://www.zhangquan.me/2023/07/26/java-bing-fa-bian-cheng-xian-cheng-ben-di-cun-chu-mo-shi-mei-you-gong-xiang-jiu-mei-you-shang-hai/</id>
    <published>2023-07-26T03:12:54.000Z</published>
    <updated>2023-08-23T06:11:20.867Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我们曾经一遍一遍又一遍地重复，多个线程同时读写同一共享变量存在并发问题。&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Copy-on-Write模式：不是延时策略的COW</title>
    <link href="https://www.zhangquan.me/2023/07/24/java-bing-fa-bian-cheng-copy-on-write-mo-shi-bu-shi-yan-shi-ce-lue-de-cow/"/>
    <id>https://www.zhangquan.me/2023/07/24/java-bing-fa-bian-cheng-copy-on-write-mo-shi-bu-shi-yan-shi-ce-lue-de-cow/</id>
    <published>2023-07-24T12:38:38.000Z</published>
    <updated>2023-08-23T06:10:45.656Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在&lt;a</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程—Immutability模式：如何利用不变性解决并发问题？</title>
    <link href="https://www.zhangquan.me/2023/07/18/java-bing-fa-bian-cheng-immutability-mo-shi-ru-he-li-yong-bu-bian-xing-jie-jue-bing-fa-wen-ti/"/>
    <id>https://www.zhangquan.me/2023/07/18/java-bing-fa-bian-cheng-immutability-mo-shi-ru-he-li-yong-bu-bian-xing-jie-jue-bing-fa-wen-ti/</id>
    <published>2023-07-18T07:51:13.000Z</published>
    <updated>2023-08-23T06:10:21.512Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我们知道，“多个线程同时读写同一共享变量存在并发问题”，这里的必要条件之一是读写，如果只有读，而没有写，是没有并发问题的。&lt;/p&gt;
&lt;p&gt;解决并发问题，其实最简单的办法就是让共享变量只有读操作，而没有写操作。这个办法如此重要，以至于被上升到了一种解决并发问题的设计模式：&lt;s</summary>
        
      
    
    
    
    <category term="Java并发编程" scheme="https://www.zhangquan.me/categories/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="并发编程" scheme="https://www.zhangquan.me/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
