<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一代键客</title>
  
  <subtitle>几乎任何事情都是越做越简单，越想越困难，越拖着越想放弃。</subtitle>
  <link href="https://www.zhangquan.me/atom.xml" rel="self"/>
  
  <link href="https://www.zhangquan.me/"/>
  <updated>2024-02-27T06:29:22.738Z</updated>
  <id>https://www.zhangquan.me/</id>
  
  <author>
    <name>张权</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本地开发环境搭建Nacos集群</title>
    <link href="https://www.zhangquan.me/2024/02/27/ben-di-kai-fa-huan-jing-da-jian-nacos-ji-qun/"/>
    <id>https://www.zhangquan.me/2024/02/27/ben-di-kai-fa-huan-jing-da-jian-nacos-ji-qun/</id>
    <published>2024-02-27T06:25:49.000Z</published>
    <updated>2024-02-27T06:29:22.738Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;下载-Nacos-Server&quot;&gt;&lt;a href=&quot;#下载-Nacos-Server&quot; class=&quot;headerlink&quot; title=&quot;下载 Nacos Server&quot;&gt;&lt;/a&gt;下载 Nacos Server&lt;/h2&gt;&lt;p&gt;Nacos Server</summary>
        
      
    
    
    
    <category term="后端和架构" scheme="https://www.zhangquan.me/categories/%E5%90%8E%E7%AB%AF%E5%92%8C%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Nacos" scheme="https://www.zhangquan.me/tags/Nacos/"/>
    
    <category term="服务治理" scheme="https://www.zhangquan.me/tags/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
    <category term="配置中心" scheme="https://www.zhangquan.me/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>如何在MacOS 11 Big Sur上安装MySQL？</title>
    <link href="https://www.zhangquan.me/2024/02/27/ru-he-zai-macos-11-big-sur-shang-an-zhuang-mysql/"/>
    <id>https://www.zhangquan.me/2024/02/27/ru-he-zai-macos-11-big-sur-shang-an-zhuang-mysql/</id>
    <published>2024-02-27T02:25:49.000Z</published>
    <updated>2024-02-27T06:26:33.667Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本教程将引导您在macOS 11 Big Sur上安装MySQL 8.0.24的步骤。&lt;/p&gt;
&lt;p&gt;MySQL 未随 macOS Big Sur 预装，需要从 &lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot;&gt;MySQL</summary>
        
      
    
    
    
    <category term="数据库" scheme="https://www.zhangquan.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://www.zhangquan.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Kafka-聊聊Kafka的版本号</title>
    <link href="https://www.zhangquan.me/2024/01/11/kafka-liao-liao-kafka-de-ban-ben-hao/"/>
    <id>https://www.zhangquan.me/2024/01/11/kafka-liao-liao-kafka-de-ban-ben-hao/</id>
    <published>2024-01-11T10:51:55.000Z</published>
    <updated>2024-01-11T10:52:19.287Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天要讨论的内容实在是太重要了，我觉得它甚至是你日后能否用好 Kafka 的关键。&lt;/p&gt;
&lt;p&gt;上一期我介绍了目前流行的几种 Kafka 发行版，其实不论是哪种 Kafka，本质上都内嵌了最核心的 Apache Kafka，也就是社区版 Kafka，那今天我们就来说说</summary>
        
      
    
    
    
    <category term="Kafka" scheme="https://www.zhangquan.me/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://www.zhangquan.me/tags/Kafka/"/>
    
    <category term="消息队" scheme="https://www.zhangquan.me/tags/%E6%B6%88%E6%81%AF%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>Kafka-我应该选择哪种Kafka？</title>
    <link href="https://www.zhangquan.me/2024/01/11/kafka-wo-ying-gai-xuan-ze-na-chong-kafka/"/>
    <id>https://www.zhangquan.me/2024/01/11/kafka-wo-ying-gai-xuan-ze-na-chong-kafka/</id>
    <published>2024-01-11T10:51:04.000Z</published>
    <updated>2024-01-11T10:51:35.097Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Kafka 不再是一个单纯的消息引擎系统，而是能够实现精确一次（Exactly-once）处理语义的实时流处理平台。&lt;/p&gt;
&lt;p&gt;你可能听说过 Apache Storm、Apache Spark Streaming 亦或是 Apache</summary>
        
      
    
    
    
    <category term="Kafka" scheme="https://www.zhangquan.me/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://www.zhangquan.me/tags/Kafka/"/>
    
    <category term="消息队" scheme="https://www.zhangquan.me/tags/%E6%B6%88%E6%81%AF%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>Kafka-一篇文章带你快速搞定Kafka术语</title>
    <link href="https://www.zhangquan.me/2024/01/11/kafka-yi-pian-wen-zhang-dai-ni-kuai-su-gao-ding-kafka-zhu-yu/"/>
    <id>https://www.zhangquan.me/2024/01/11/kafka-yi-pian-wen-zhang-dai-ni-kuai-su-gao-ding-kafka-zhu-yu/</id>
    <published>2024-01-11T09:25:14.000Z</published>
    <updated>2024-01-11T09:26:24.193Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Kafka 的世界中有很多概念和术语是需要你提前理解并熟练掌握的，这对于后面你深入学习 Kafka 各种功能和特性将大有裨益。下面我来盘点一下 Kafka 的各种术语。&lt;/p&gt;
&lt;p&gt; Kafka</summary>
        
      
    
    
    
    <category term="Kafka" scheme="https://www.zhangquan.me/categories/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://www.zhangquan.me/tags/Kafka/"/>
    
    <category term="消息队" scheme="https://www.zhangquan.me/tags/%E6%B6%88%E6%81%AF%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>API 之争—gRPC VS REST</title>
    <link href="https://www.zhangquan.me/2024/01/11/api-zhi-zheng-grpc-vs-rest/"/>
    <id>https://www.zhangquan.me/2024/01/11/api-zhi-zheng-grpc-vs-rest/</id>
    <published>2024-01-11T05:51:29.000Z</published>
    <updated>2024-02-26T10:13:51.038Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在构建新的基于web 的服务时，首先出现的问题之一是，“我将如何与其交谈？”有很多选择需要考虑。这里我们将重点讨论 REST 和gRPC。REST 是一个架构/设计概念，而 gRPC 更多的是一个框架。然而，两者都是用于在 Web</summary>
        
      
    
    
    
    <category term="后端和架构" scheme="https://www.zhangquan.me/categories/%E5%90%8E%E7%AB%AF%E5%92%8C%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="gRPC" scheme="https://www.zhangquan.me/tags/gRPC/"/>
    
    <category term="REST" scheme="https://www.zhangquan.me/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-桥接模式：如何实现支持不同类型和渠道的消息推送系统？</title>
    <link href="https://www.zhangquan.me/2023/11/21/she-ji-mo-shi-zhi-mei-qiao-jie-mo-shi-ru-he-shi-xian-zhi-chi-bu-tong-lei-xing-he-qu-dao-de-xiao-xi-tui-song-xi-tong/"/>
    <id>https://www.zhangquan.me/2023/11/21/she-ji-mo-shi-zhi-mei-qiao-jie-mo-shi-ru-he-shi-xian-zhi-chi-bu-tong-lei-xing-he-qu-dao-de-xiao-xi-tui-song-xi-tong/</id>
    <published>2023-11-21T05:01:10.000Z</published>
    <updated>2024-01-05T04:03:21.639Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;桥接模式的代码实现非常简单，但是理解起来稍微有点难度，并且应用场景也比较局限，所以，相当于代理模式来说，桥接模式在实际的项目中并没有那么常用，你只需要简单了解，见到能认识就可以，并不是我们学习的重点。&lt;/p&gt;
&lt;h2 id=&quot;桥接模式的原理解析&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-代理模式：代理在RPC、缓存、监控等场景中的应用</title>
    <link href="https://www.zhangquan.me/2023/11/21/she-ji-mo-shi-zhi-mei-dai-li-mo-shi-dai-li-zai-rpc-huan-cun-jian-kong-deng-chang-jing-zhong-de-ying-yong/"/>
    <id>https://www.zhangquan.me/2023/11/21/she-ji-mo-shi-zhi-mei-dai-li-mo-shi-dai-li-zai-rpc-huan-cun-jian-kong-deng-chang-jing-zhong-de-ying-yong/</id>
    <published>2023-11-21T04:01:10.000Z</published>
    <updated>2024-01-05T04:03:26.098Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;创建型模式主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。&lt;/p&gt;
&lt;p&gt;其中，单例模式用来创建全局唯一的对象。工厂模式用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。建造者模式是用来创建复杂</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-原型模式：如何最快速地clone一个HashMap散列表？</title>
    <link href="https://www.zhangquan.me/2023/11/20/she-ji-mo-shi-zhi-mei-yuan-xing-mo-shi-ru-he-zui-kuai-su-di-clone-yi-ge-hashmap-san-lie-biao/"/>
    <id>https://www.zhangquan.me/2023/11/20/she-ji-mo-shi-zhi-mei-yuan-xing-mo-shi-ru-he-zui-kuai-su-di-clone-yi-ge-hashmap-san-lie-biao/</id>
    <published>2023-11-20T09:20:55.000Z</published>
    <updated>2023-12-29T09:27:47.879Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;对于熟悉 JavaScript 语言的前端程序员来说，原型模式是一种比较常用的开发模式。这是因为，有别于 Java、C++ 等基于类的面向对象编程语言，JavaScript 是一种基于原型的面向对象编程语言。即便 JavaScript</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-建造者模式：详解构造函数、set方法、建造者模式三种对象创建方式</title>
    <link href="https://www.zhangquan.me/2023/11/18/she-ji-mo-shi-zhi-mei-jian-zao-zhe-mo-shi-xiang-jie-gou-zao-han-shu-set-fang-fa-jian-zao-zhe-mo-shi-san-chong-dui-xiang-chuang-jian-fang-shi/"/>
    <id>https://www.zhangquan.me/2023/11/18/she-ji-mo-shi-zhi-mei-jian-zao-zhe-mo-shi-xiang-jie-gou-zao-han-shu-set-fang-fa-jian-zao-zhe-mo-shi-san-chong-dui-xiang-chuang-jian-fang-shi/</id>
    <published>2023-11-18T09:20:45.000Z</published>
    <updated>2023-12-29T09:27:07.378Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天，我们再来学习另外一个比较常用的创建型设计模式，&lt;strong&gt;Builder</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-工厂模式：我为什么说没事不要随便用工厂模式创建对象？</title>
    <link href="https://www.zhangquan.me/2023/11/07/she-ji-mo-shi-zhi-mei-gong-han-mo-shi-wo-wei-shi-me-shuo-mei-shi-bu-yao-sui-bian-yong-gong-han-mo-shi-chuang-jian-dui-xiang/"/>
    <id>https://www.zhangquan.me/2023/11/07/she-ji-mo-shi-zhi-mei-gong-han-mo-shi-wo-wei-shi-me-shuo-mei-shi-bu-yao-sui-bian-yong-gong-han-mo-shi-chuang-jian-dui-xiang/</id>
    <published>2023-11-07T09:20:36.000Z</published>
    <updated>2023-12-29T09:26:17.722Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GoF</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-单例模式（下）：如何设计实现一个集群环境下的分布式单例模式？</title>
    <link href="https://www.zhangquan.me/2023/11/05/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-xia-ru-he-she-ji-shi-xian-yi-ge-ji-qun-huan-jing-xia-de-fen-bu-shi-dan-li-mo-shi/"/>
    <id>https://www.zhangquan.me/2023/11/05/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-xia-ru-he-she-ji-shi-xian-yi-ge-ji-qun-huan-jing-xia-de-fen-bu-shi-dan-li-mo-shi/</id>
    <published>2023-11-05T09:20:26.000Z</published>
    <updated>2023-12-29T09:24:46.595Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;上两节课中，我们针对单例模式，讲解了单例的应用场景、几种常见的代码实现和存在的问题，并粗略给出了替换单例模式的方法，比如工厂模式、IOC</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-单例模式（中）：我为什么不推荐使用单例模式？又有何替代方案？</title>
    <link href="https://www.zhangquan.me/2023/11/01/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-zhong-wo-wei-shi-me-bu-tui-jian-shi-yong-dan-li-mo-shi-you-you-he-ti-dai-fang-an/"/>
    <id>https://www.zhangquan.me/2023/11/01/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-zhong-wo-wei-shi-me-bu-tui-jian-shi-yong-dan-li-mo-shi-you-you-he-ti-dai-fang-an/</id>
    <published>2023-11-01T09:20:17.000Z</published>
    <updated>2023-12-29T09:23:58.848Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;尽管单例是一个很常用的设计模式，在实际的开发中，我们也确实经常用到它，但是，有些人认为单例是一种反模式（anti-pattern），并不推荐使用。所以，今天，我就针对这个说法详细地讲讲这几个问题：单例这种设计模式存在哪些问题？为什么会被称为反模式？如果不用单例，该如何表示全</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-单例模式（上）：为什么说支持懒加载的双重检测不比饿汉式更优？</title>
    <link href="https://www.zhangquan.me/2023/10/24/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-shang-wei-shi-me-shuo-zhi-chi-lan-jia-zai-de-shuang-chong-jian-ce-bu-bi-e-han-shi-geng-you/"/>
    <id>https://www.zhangquan.me/2023/10/24/she-ji-mo-shi-zhi-mei-dan-li-mo-shi-shang-wei-shi-me-shuo-zhi-chi-lan-jia-zai-de-shuang-chong-jian-ce-bu-bi-e-han-shi-geng-you/</id>
    <published>2023-10-24T09:20:08.000Z</published>
    <updated>2023-12-29T09:23:19.722Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我们知道，经典的设计模式有 23 种。其中，常用的并不是很多。据我的工作经验来看，常用的可能都不到一半。如果随便抓一个程序员，让他说一说最熟悉的 3</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？</title>
    <link href="https://www.zhangquan.me/2023/10/23/she-ji-mo-shi-zhi-mei-mian-xiang-dui-xiang-she-ji-yuan-ze-she-ji-mo-shi-bian-cheng-gui-fan-chong-gou-zhe-wu-zhe-you-he-guan-xi/"/>
    <id>https://www.zhangquan.me/2023/10/23/she-ji-mo-shi-zhi-mei-mian-xiang-dui-xiang-she-ji-yuan-ze-she-ji-mo-shi-bian-cheng-gui-fan-chong-gou-zhe-wu-zhe-you-he-guan-xi/</id>
    <published>2023-10-23T10:45:51.000Z</published>
    <updated>2023-12-29T09:28:09.928Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在上一节课中，我们讲到，要具备编写高质量代码的能力，你需要学习一些编程方法论，其中就包含面向对象（我们可以把它看成一种设计思想）、设计原则、设计模式、编程规范、 重构技巧等。而我们整个专栏的内容也是围绕着这几块展开讲解的。所以，今天我就先来简</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之美-如何评价代码质量的高低？</title>
    <link href="https://www.zhangquan.me/2023/10/22/she-ji-mo-shi-zhi-mei-ru-he-ping-jie-dai-ma-zhi-liang-de-gao-di/"/>
    <id>https://www.zhangquan.me/2023/10/22/she-ji-mo-shi-zhi-mei-ru-he-ping-jie-dai-ma-zhi-liang-de-gao-di/</id>
    <published>2023-10-22T10:07:00.000Z</published>
    <updated>2023-12-29T09:22:06.749Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在我的工作经历中，每当同事评论起项目代码质量的时候，听到的最多的评语就是：“代码 写得很烂”或者“代码写得很好”。用“好”“烂”这样的字眼来描述，非常地笼统。当我具体问到底如何烂、如何好的时候，尽管大部分同事都能简单地罗列上几个点，但往往都不</summary>
        
      
    
    
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Java" scheme="https://www.zhangquan.me/tags/Java/"/>
    
    <category term="设计模式之美" scheme="https://www.zhangquan.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>如何在 MacOS 上安装 Redis？</title>
    <link href="https://www.zhangquan.me/2023/09/26/ru-he-zai-macos-shang-an-zhuang-redis/"/>
    <id>https://www.zhangquan.me/2023/09/26/ru-he-zai-macos-shang-an-zhuang-redis/</id>
    <published>2023-09-26T14:52:40.000Z</published>
    <updated>2024-02-27T03:56:02.501Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本文介绍了在 macOS 上安装键值类型数据库“Redis”的步骤。安装时，请使用 Homebrew，这对于在 macOS</summary>
        
      
    
    
    
    <category term="数据库" scheme="https://www.zhangquan.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redi" scheme="https://www.zhangquan.me/tags/Redi/"/>
    
  </entry>
  
  <entry>
    <title>如何在 MacOS 上安装 Gradle？</title>
    <link href="https://www.zhangquan.me/2023/09/26/ru-he-zai-macos-shang-an-zhuang-gradle/"/>
    <id>https://www.zhangquan.me/2023/09/26/ru-he-zai-macos-shang-an-zhuang-gradle/</id>
    <published>2023-09-26T10:52:40.000Z</published>
    <updated>2024-01-11T10:55:59.589Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;如何在-MacOS-上安装-Gradle？&quot;&gt;&lt;a href=&quot;#如何在-MacOS-上安装-Gradle？&quot; class=&quot;headerlink&quot; title=&quot;如何在 MacOS 上安装 Gradle？&quot;&gt;&lt;/a&gt;如何在 MacOS 上安装</summary>
        
      
    
    
    
    <category term="Gradle" scheme="https://www.zhangquan.me/categories/Gradle/"/>
    
    
    <category term="Gradle" scheme="https://www.zhangquan.me/tags/Gradle/"/>
    
    <category term="构建工具" scheme="https://www.zhangquan.me/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>如何将一个已存在的目录转换为一个 Git 项目并托管到 GitHub 仓库</title>
    <link href="https://www.zhangquan.me/2023/09/25/ru-he-jiang-yi-ge-yi-cun-zai-de-mu-lu-zhuan-huan-wei-yi-ge-git-xiang-mu-bing-tuo-guan-dao-github-cang-ku/"/>
    <id>https://www.zhangquan.me/2023/09/25/ru-he-jiang-yi-ge-yi-cun-zai-de-mu-lu-zhuan-huan-wei-yi-ge-git-xiang-mu-bing-tuo-guan-dao-github-cang-ku/</id>
    <published>2023-09-25T02:59:48.000Z</published>
    <updated>2023-09-30T08:19:36.146Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;一、-打开命令行终端，进入项目所在的本地目录，将目录初始化为一个-Git-项目&quot;&gt;&lt;a href=&quot;#一、-打开命令行终端，进入项目所在的本地目录，将目录初始化为一个-Git-项目&quot; class=&quot;headerlink&quot; title=&quot;一、</summary>
        
      
    
    
    
    <category term="Git" scheme="https://www.zhangquan.me/categories/Git/"/>
    
    
    <category term="Git" scheme="https://www.zhangquan.me/tags/Git/"/>
    
    <category term="工具" scheme="https://www.zhangquan.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的装饰器</title>
    <link href="https://www.zhangquan.me/2023/09/25/python-zhong-de-zhuang-shi-qi/"/>
    <id>https://www.zhangquan.me/2023/09/25/python-zhong-de-zhuang-shi-qi/</id>
    <published>2023-09-25T01:44:12.000Z</published>
    <updated>2023-09-25T01:45:16.232Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;引入装饰器之前，我们首先来看一下函数的几个核心概念。&lt;/p&gt;
&lt;h3 id=&quot;函数赋予变量&quot;&gt;&lt;a href=&quot;#函数赋予变量&quot;</summary>
        
      
    
    
    
    <category term="Python" scheme="https://www.zhangquan.me/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.zhangquan.me/tags/Python/"/>
    
  </entry>
  
</feed>
